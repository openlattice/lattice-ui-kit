// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search snapshots should match snapshot 1`] = `
.c4 {
  color: #56565A;
  display: inline-block;
  font-size: 14px;
  font-stretch: normal;
  font-style: normal;
  font-weight: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  margin: 5px 5px 5px 0;
}

.c6 {
  color: #56565A;
  display: inline-block;
  font-size: 14px;
  font-stretch: normal;
  font-style: normal;
  font-weight: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  margin: 5px 5px 5px 0;
  visibility: hidden;
}

.c9 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c8 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c7 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  width: 100%;
  white-space: nowrap;
  background-color: #7654FF;
  border-color: #7654FF;
  color: white;
}

.c7:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4F3FA7;
  border-color: #4F3FA7;
}

.c7:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261E52;
  border-color: #261E52;
}

.c7:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #F9F9FC;
  border-color: #F9F9FC;
  color: #8B8B90;
}

.c7:focus {
  box-shadow: #261E52 0 0 0 2px;
}

.c1 {
  background-color: white;
  border: 1px solid #DFDFE3;
  border-radius: 3px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  position: relative;
  border-bottom: 1px solid #DFDFE3;
  background-color: transparent;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin: 0;
  padding: 30px 30px 30px 30px;
}

.c2:hover {
  cursor: inherit;
}

.c2:first-child {
  border-radius: 3px 3px 0 0;
}

.c2:last-child {
  border-bottom: 0;
  border-radius: 0 0 3px 3px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
}

.c0 > div {
  margin: 10px 0;
}

.c0 > div:first-child {
  margin-top: 0;
}

.c0 > div:last-child {
  margin-bottom: 0;
}

.c5 {
  background-color: white;
  border-radius: 3px;
  border: 1px solid #DFDFE3;
  box-shadow: none;
  box-sizing: border-box;
  color: #56565A;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  font-size: 14px;
  min-height: 40px;
  padding: 10px;
  text-overflow: ellipsis;
  -webkit-transition: background-color 200ms ease-out,border-color 200ms ease-out;
  transition: background-color 200ms ease-out,border-color 200ms ease-out;
  width: 100%;
}

.c5:hover {
  background-color: #F2F2F4;
}

.c5:focus {
  border: solid 1px #56565A;
  background-color: white;
  outline: none;
}

.c5:disabled {
  background-color: #F2F2F4;
  color: #8B8B90;
  cursor: not-allowed;
}

.c3 {
  display: grid;
  -webkit-flex: 1 1 100%;
  -ms-flex: 1 1 100%;
  flex: 1 1 100%;
  grid-gap: 20px 30px;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  grid-template-columns: repeat(4,minmax(0,1fr));
}

<ThemeProvider
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "overrides": Object {
        "MuiFormHelperText": Object {
          "contained": Object {
            "margin": "5px 10px 0",
          },
          "root": Object {
            "&$error": Object {
              "color": "#ff3c5d",
            },
            "fontFamily": "inherit",
            "fontSize": "12px",
          },
        },
        "MuiIconButton": Object {
          "root": Object {
            "padding": "5px",
          },
        },
        "MuiInputBase": Object {
          "input": Object {
            "&$disabled": Object {
              "color": "#8B8B90",
              "cursor": "not-allowed",
            },
            "color": "#56565A",
          },
          "root": Object {
            "&$disabled": Object {
              "cursor": "not-allowed",
            },
            "&$focused:not($disabled)": Object {
              "backgroundColor": "white",
            },
            "&:hover:not($disabled):not($focused):not($error)": Object {
              "backgroundColor": "#DFDFE3",
            },
            "backgroundColor": "#F2F2F4",
            "borderRadius": "3px",
            "fontFamily": "inherit",
            "fontSize": "14px",
            "height": "40px",
            "lineHeight": "1.5",
            "transition": "background-color 200ms ease-out,
        border-color 200ms ease-out",
          },
        },
        "MuiOutlinedInput": Object {
          "input": Object {
            "padding": "10px",
          },
          "notchedOutline": Object {
            "visibility": "hidden",
          },
          "root": Object {
            "&$error": Object {
              "borderColor": "#ff3c5d",
            },
            "&$focused": Object {
              "borderColor": "#7654FF",
            },
            "border": "1px solid #DFDFE3",
          },
        },
        "MuiTouchRipple": Object {
          "@keyframes enter": Object {
            "0%": Object {
              "opacity": 0.1,
              "transform": "scale(1)",
            },
            "100%": Object {
              "opacity": 0.3,
              "transform": "scale(1)",
            },
          },
          "child": Object {
            "borderRadius": 0,
          },
          "childLeaving": Object {
            "animationDuration": "200ms",
          },
          "rippleVisible": Object {
            "animationDuration": "200ms",
          },
        },
      },
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "augmentColor": [Function],
        "background": Object {
          "default": "#fafafa",
          "header": "#F2F2F4",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "#DFDFE3",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "100": "#d1c4e9",
          "200": "#b39ddb",
          "300": "#9575cd",
          "400": "#7e57c2",
          "50": "#ede7f6",
          "500": "#673ab7",
          "600": "#5e35b1",
          "700": "#512da8",
          "800": "#4527a0",
          "900": "#311b92",
          "A100": "#b388ff",
          "A200": "#7c4dff",
          "A400": "#651fff",
          "A700": "#6200ea",
          "contrastText": "#fff",
          "dark": "#512da8",
          "light": "#9575cd",
          "main": "#673ab7",
        },
        "secondary": Object {
          "contrastText": "#fff",
          "dark": "#c51162",
          "light": "#ff4081",
          "main": "#f50057",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#56565A",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {
        "MuiFormControl": Object {
          "fullWidth": true,
          "hiddenLabel": true,
        },
        "MuiOutlinedInput": Object {
          "notched": false,
        },
      },
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "6rem",
          "fontWeight": 300,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.167,
        },
        "h2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "3.75rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.2,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "3rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1.167,
        },
        "h4": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "2.125rem",
          "fontWeight": 400,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.235,
        },
        "h5": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1.5rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1.334,
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 500,
          "letterSpacing": "0.0075em",
          "lineHeight": 1.6,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <MuiPickersUtilsProvider
    utils={[Function]}
  >
    <Search
      filterFields={Array []}
      hasSearched={false}
      resultComponent={[Function]}
      searchFields={
        Array [
          Object {
            "id": "firstname",
            "label": "First Name",
          },
          Object {
            "id": "lastname",
            "label": "Last Name",
          },
          Object {
            "id": "dob",
            "label": "Date of Birth",
            "type": "date",
          },
        ]
      }
      searchResults={Immutable.List []}
      searchResultsComponent={[Function]}
    >
      <CardStack>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "CardStack-sc-1vtkaja-0",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  "display:flex;flex-direction:column;position:relative;& > div{margin:10px 0;}& > div:first-child{margin-top:0;}& > div:last-child{margin-bottom:0;}",
                ],
              },
              "displayName": "CardStack",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "CardStack-sc-1vtkaja-0",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0"
          >
            <Card>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Card-sc-3vnjrr-0",
                      "isStatic": false,
                      "lastClassName": "c1",
                      "rules": Array [
                        "background-color:white;border:1px solid ",
                        "#DFDFE3",
                        ";border-radius:3px;display:flex;flex:0 0 auto;flex-direction:column;position:relative;",
                        [Function],
                        ";",
                      ],
                    },
                    "displayName": "Card",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Card-sc-3vnjrr-0",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="c1"
                >
                  <CardSegment
                    vertical={true}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "CardSegment-sc-44tqm2-0",
                            "isStatic": false,
                            "lastClassName": "c2",
                            "rules": Array [
                              "display:flex;flex:1 0 auto;position:relative;",
                              [Function],
                              " &:first-child{border-radius:3px 3px 0 0;}&:last-child{border-bottom:0;border-radius:0 0 3px 3px;}",
                            ],
                          },
                          "displayName": "CardSegment",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "CardSegment-sc-44tqm2-0",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      vertical={true}
                    >
                      <div
                        className="c2"
                      >
                        <form>
                          <StyledSearchComponents__InputGrid
                            align="flex-start"
                            columns={4}
                          >
                            <StyledComponent
                              align="flex-start"
                              columns={4}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "StyledSearchComponents__InputGrid-sc-1686v4u-0",
                                    "isStatic": false,
                                    "lastClassName": "c3",
                                    "rules": Array [
                                      "display:grid;flex:1 1 100%;grid-gap:20px 30px;",
                                      [Function],
                                      " ",
                                      [Function],
                                    ],
                                  },
                                  "displayName": "StyledSearchComponents__InputGrid",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "StyledSearchComponents__InputGrid-sc-1686v4u-0",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="c3"
                              >
                                <div
                                  key="luk-search-key-firstname"
                                >
                                  <Label
                                    htmlFor="luk-search-firstname"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Label-sc-130fyca-0",
                                            "isStatic": false,
                                            "lastClassName": "c6",
                                            "rules": Array [
                                              "color:",
                                              "#56565A",
                                              ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                                              [Function],
                                              ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                                              [Function],
                                              ";",
                                              [Function],
                                              ";",
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "Label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Label-sc-130fyca-0",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      htmlFor="luk-search-firstname"
                                    >
                                      <label
                                        className="c4"
                                        htmlFor="luk-search-firstname"
                                      >
                                        First Name
                                      </label>
                                    </StyledComponent>
                                  </Label>
                                  <Input
                                    id="luk-search-firstname"
                                    name="firstname"
                                    onChange={[Function]}
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Input-ttuish-0",
                                            "isStatic": false,
                                            "lastClassName": "c5",
                                            "rules": Array [
                                              "background-color:white;border-radius:3px;border:1px solid ",
                                              [Function],
                                              ";box-shadow:none;box-sizing:border-box;color:",
                                              "#56565A",
                                              ";display:flex;flex:0 1 auto;font-size:14px;min-height:40px;padding:10px;text-overflow:ellipsis;transition:background-color ",
                                              "200ms",
                                              " ease-out,border-color ",
                                              "200ms",
                                              " ease-out;width:",
                                              [Function],
                                              ";:hover{background-color:",
                                              "#F2F2F4",
                                              ";}:focus{border:solid 1px ",
                                              "#56565A",
                                              ";background-color:white;outline:none;}:disabled{background-color:",
                                              "#F2F2F4",
                                              ";color:",
                                              "#8B8B90",
                                              ";cursor:not-allowed;}",
                                            ],
                                          },
                                          "displayName": "Input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Input-ttuish-0",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="luk-search-firstname"
                                      name="firstname"
                                      onChange={[Function]}
                                      value=""
                                    >
                                      <input
                                        className="c5"
                                        id="luk-search-firstname"
                                        name="firstname"
                                        onChange={[Function]}
                                        value=""
                                      />
                                    </StyledComponent>
                                  </Input>
                                </div>
                                <div
                                  key="luk-search-key-lastname"
                                >
                                  <Label
                                    htmlFor="luk-search-lastname"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Label-sc-130fyca-0",
                                            "isStatic": false,
                                            "lastClassName": "c6",
                                            "rules": Array [
                                              "color:",
                                              "#56565A",
                                              ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                                              [Function],
                                              ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                                              [Function],
                                              ";",
                                              [Function],
                                              ";",
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "Label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Label-sc-130fyca-0",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      htmlFor="luk-search-lastname"
                                    >
                                      <label
                                        className="c4"
                                        htmlFor="luk-search-lastname"
                                      >
                                        Last Name
                                      </label>
                                    </StyledComponent>
                                  </Label>
                                  <Input
                                    id="luk-search-lastname"
                                    name="lastname"
                                    onChange={[Function]}
                                    value=""
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Input-ttuish-0",
                                            "isStatic": false,
                                            "lastClassName": "c5",
                                            "rules": Array [
                                              "background-color:white;border-radius:3px;border:1px solid ",
                                              [Function],
                                              ";box-shadow:none;box-sizing:border-box;color:",
                                              "#56565A",
                                              ";display:flex;flex:0 1 auto;font-size:14px;min-height:40px;padding:10px;text-overflow:ellipsis;transition:background-color ",
                                              "200ms",
                                              " ease-out,border-color ",
                                              "200ms",
                                              " ease-out;width:",
                                              [Function],
                                              ";:hover{background-color:",
                                              "#F2F2F4",
                                              ";}:focus{border:solid 1px ",
                                              "#56565A",
                                              ";background-color:white;outline:none;}:disabled{background-color:",
                                              "#F2F2F4",
                                              ";color:",
                                              "#8B8B90",
                                              ";cursor:not-allowed;}",
                                            ],
                                          },
                                          "displayName": "Input",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Input-ttuish-0",
                                          "target": "input",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="luk-search-lastname"
                                      name="lastname"
                                      onChange={[Function]}
                                      value=""
                                    >
                                      <input
                                        className="c5"
                                        id="luk-search-lastname"
                                        name="lastname"
                                        onChange={[Function]}
                                        value=""
                                      />
                                    </StyledComponent>
                                  </Input>
                                </div>
                                <div
                                  key="luk-search-key-dob"
                                >
                                  <Label
                                    htmlFor="luk-search-dob"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Label-sc-130fyca-0",
                                            "isStatic": false,
                                            "lastClassName": "c6",
                                            "rules": Array [
                                              "color:",
                                              "#56565A",
                                              ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                                              [Function],
                                              ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                                              [Function],
                                              ";",
                                              [Function],
                                              ";",
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "Label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Label-sc-130fyca-0",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      htmlFor="luk-search-dob"
                                    >
                                      <label
                                        className="c4"
                                        htmlFor="luk-search-dob"
                                      >
                                        Date of Birth
                                      </label>
                                    </StyledComponent>
                                  </Label>
                                  <DatePicker
                                    disabled={false}
                                    format="MM/dd/yyyy"
                                    fullWidth={true}
                                    id="luk-search-dob"
                                    mask="__/__/____"
                                    name="dob"
                                    onChange={[Function]}
                                    placeholder="MM/DD/YYYY"
                                    value=""
                                  >
                                    <PickerWithState
                                      InputProps={
                                        Object {
                                          "onBlur": [Function],
                                          "onKeyDown": [Function],
                                        }
                                      }
                                      allowKeyboardControl={true}
                                      disabled={false}
                                      format="MM/dd/yyyy"
                                      fullWidth={true}
                                      id="luk-search-dob"
                                      inputVariant="outlined"
                                      invalidDateMessage="Invalid Date Format"
                                      mask="__/__/____"
                                      maxDate={2100-01-01T00:00:00.000Z}
                                      maxDateMessage="Date should not be after maximal date"
                                      minDate={1900-01-01T00:00:00.000Z}
                                      minDateMessage="Date should not be before minimal date"
                                      name="dob"
                                      onChange={[Function]}
                                      openTo="date"
                                      placeholder="MM/DD/YYYY"
                                      value={null}
                                      variant="inline"
                                      views={
                                        Array [
                                          "year",
                                          "date",
                                        ]
                                      }
                                    >
                                      <Wrapper
                                        DateInputProps={
                                          Object {
                                            "format": "MM/dd/yyyy",
                                            "inputValue": "",
                                            "onChange": [Function],
                                            "openPicker": [Function],
                                            "validationError": "",
                                          }
                                        }
                                        InputComponent={[Function]}
                                        InputProps={
                                          Object {
                                            "onBlur": [Function],
                                            "onKeyDown": [Function],
                                          }
                                        }
                                        disabled={false}
                                        format="MM/dd/yyyy"
                                        fullWidth={true}
                                        id="luk-search-dob"
                                        inputVariant="outlined"
                                        mask="__/__/____"
                                        name="dob"
                                        onAccept={[Function]}
                                        onClear={[Function]}
                                        onDismiss={[Function]}
                                        onSetToday={[Function]}
                                        open={false}
                                        placeholder="MM/DD/YYYY"
                                        variant="inline"
                                      >
                                        <InlineWrapper
                                          DateInputProps={
                                            Object {
                                              "format": "MM/dd/yyyy",
                                              "inputValue": "",
                                              "onChange": [Function],
                                              "openPicker": [Function],
                                              "validationError": "",
                                            }
                                          }
                                          InputComponent={[Function]}
                                          InputProps={
                                            Object {
                                              "onBlur": [Function],
                                              "onKeyDown": [Function],
                                            }
                                          }
                                          disabled={false}
                                          format="MM/dd/yyyy"
                                          fullWidth={true}
                                          id="luk-search-dob"
                                          inputVariant="outlined"
                                          mask="__/__/____"
                                          name="dob"
                                          onAccept={[Function]}
                                          onClear={[Function]}
                                          onDismiss={[Function]}
                                          onSetToday={[Function]}
                                          open={false}
                                          placeholder="MM/DD/YYYY"
                                        >
                                          <KeyboardDateInput
                                            InputProps={
                                              Object {
                                                "onBlur": [Function],
                                                "onKeyDown": [Function],
                                              }
                                            }
                                            disabled={false}
                                            format="MM/dd/yyyy"
                                            fullWidth={true}
                                            id="luk-search-dob"
                                            inputRef={
                                              Object {
                                                "current": <input
                                                  aria-invalid="false"
                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                  id="luk-search-dob"
                                                  name="dob"
                                                  placeholder="MM/DD/YYYY"
                                                  type="text"
                                                  value=""
                                                />,
                                              }
                                            }
                                            inputValue=""
                                            inputVariant="outlined"
                                            keyboardIcon={<KeyboardIcon />}
                                            mask="__/__/____"
                                            name="dob"
                                            onChange={[Function]}
                                            openPicker={[Function]}
                                            placeholder="MM/DD/YYYY"
                                            validationError=""
                                          >
                                            <Rifm
                                              format={[Function]}
                                              key="__/__/____"
                                              onChange={[Function]}
                                              refuse={/\\[\\^\\\\d\\]\\+/gi}
                                              value=""
                                            >
                                              <WithStyles(ForwardRef(TextField))
                                                InputProps={
                                                  Object {
                                                    "endAdornment": <WithStyles(ForwardRef(InputAdornment))
                                                      position="end"
                                                    >
                                                      <WithStyles(ForwardRef(IconButton))
                                                        disabled={false}
                                                        onClick={[Function]}
                                                      >
                                                        <KeyboardIcon />
                                                      </WithStyles(ForwardRef(IconButton))>
                                                    </WithStyles(ForwardRef(InputAdornment))>,
                                                    "onBlur": [Function],
                                                    "onKeyDown": [Function],
                                                  }
                                                }
                                                disabled={false}
                                                error={false}
                                                fullWidth={true}
                                                helperText=""
                                                id="luk-search-dob"
                                                inputRef={
                                                  Object {
                                                    "current": <input
                                                      aria-invalid="false"
                                                      class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                      id="luk-search-dob"
                                                      name="dob"
                                                      placeholder="MM/DD/YYYY"
                                                      type="text"
                                                      value=""
                                                    />,
                                                  }
                                                }
                                                name="dob"
                                                onChange={[Function]}
                                                placeholder="MM/DD/YYYY"
                                                value=""
                                                variant="outlined"
                                              >
                                                <ForwardRef(TextField)
                                                  InputProps={
                                                    Object {
                                                      "endAdornment": <WithStyles(ForwardRef(InputAdornment))
                                                        position="end"
                                                      >
                                                        <WithStyles(ForwardRef(IconButton))
                                                          disabled={false}
                                                          onClick={[Function]}
                                                        >
                                                          <KeyboardIcon />
                                                        </WithStyles(ForwardRef(IconButton))>
                                                      </WithStyles(ForwardRef(InputAdornment))>,
                                                      "onBlur": [Function],
                                                      "onKeyDown": [Function],
                                                    }
                                                  }
                                                  classes={
                                                    Object {
                                                      "root": "MuiTextField-root",
                                                    }
                                                  }
                                                  disabled={false}
                                                  error={false}
                                                  fullWidth={true}
                                                  helperText=""
                                                  id="luk-search-dob"
                                                  inputRef={
                                                    Object {
                                                      "current": <input
                                                        aria-invalid="false"
                                                        class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                        id="luk-search-dob"
                                                        name="dob"
                                                        placeholder="MM/DD/YYYY"
                                                        type="text"
                                                        value=""
                                                      />,
                                                    }
                                                  }
                                                  name="dob"
                                                  onChange={[Function]}
                                                  placeholder="MM/DD/YYYY"
                                                  value=""
                                                  variant="outlined"
                                                >
                                                  <WithStyles(ForwardRef(FormControl))
                                                    className="MuiTextField-root"
                                                    color="primary"
                                                    disabled={false}
                                                    error={false}
                                                    fullWidth={true}
                                                    required={false}
                                                    variant="outlined"
                                                  >
                                                    <ForwardRef(FormControl)
                                                      className="MuiTextField-root"
                                                      classes={
                                                        Object {
                                                          "fullWidth": "MuiFormControl-fullWidth",
                                                          "marginDense": "MuiFormControl-marginDense",
                                                          "marginNormal": "MuiFormControl-marginNormal",
                                                          "root": "MuiFormControl-root",
                                                        }
                                                      }
                                                      color="primary"
                                                      disabled={false}
                                                      error={false}
                                                      fullWidth={true}
                                                      hiddenLabel={true}
                                                      required={false}
                                                      variant="outlined"
                                                    >
                                                      <div
                                                        className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                      >
                                                        <WithStyles(ForwardRef(OutlinedInput))
                                                          autoFocus={false}
                                                          endAdornment={
                                                            <WithStyles(ForwardRef(InputAdornment))
                                                              position="end"
                                                            >
                                                              <WithStyles(ForwardRef(IconButton))
                                                                disabled={false}
                                                                onClick={[Function]}
                                                              >
                                                                <KeyboardIcon />
                                                              </WithStyles(ForwardRef(IconButton))>
                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                          }
                                                          fullWidth={true}
                                                          id="luk-search-dob"
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-invalid="false"
                                                                class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                id="luk-search-dob"
                                                                name="dob"
                                                                placeholder="MM/DD/YYYY"
                                                                type="text"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          multiline={false}
                                                          name="dob"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onKeyDown={[Function]}
                                                          placeholder="MM/DD/YYYY"
                                                          value=""
                                                        >
                                                          <ForwardRef(OutlinedInput)
                                                            autoFocus={false}
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                "disabled": "Mui-disabled",
                                                                "error": "Mui-error",
                                                                "focused": "Mui-focused",
                                                                "input": "MuiOutlinedInput-input",
                                                                "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                "marginDense": "MuiOutlinedInput-marginDense",
                                                                "multiline": "MuiOutlinedInput-multiline",
                                                                "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                                                "root": "MuiOutlinedInput-root",
                                                              }
                                                            }
                                                            endAdornment={
                                                              <WithStyles(ForwardRef(InputAdornment))
                                                                position="end"
                                                              >
                                                                <WithStyles(ForwardRef(IconButton))
                                                                  disabled={false}
                                                                  onClick={[Function]}
                                                                >
                                                                  <KeyboardIcon />
                                                                </WithStyles(ForwardRef(IconButton))>
                                                              </WithStyles(ForwardRef(InputAdornment))>
                                                            }
                                                            fullWidth={true}
                                                            id="luk-search-dob"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                  id="luk-search-dob"
                                                                  name="dob"
                                                                  placeholder="MM/DD/YYYY"
                                                                  type="text"
                                                                  value=""
                                                                />,
                                                              }
                                                            }
                                                            multiline={false}
                                                            name="dob"
                                                            notched={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onKeyDown={[Function]}
                                                            placeholder="MM/DD/YYYY"
                                                            value=""
                                                          >
                                                            <WithStyles(ForwardRef(InputBase))
                                                              autoFocus={false}
                                                              classes={
                                                                Object {
                                                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                                                  "disabled": "Mui-disabled",
                                                                  "error": "Mui-error",
                                                                  "focused": "Mui-focused",
                                                                  "input": "MuiOutlinedInput-input",
                                                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                                                  "marginDense": "MuiOutlinedInput-marginDense",
                                                                  "multiline": "MuiOutlinedInput-multiline",
                                                                  "notchedOutline": null,
                                                                  "root": "MuiOutlinedInput-root",
                                                                }
                                                              }
                                                              endAdornment={
                                                                <WithStyles(ForwardRef(InputAdornment))
                                                                  position="end"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    disabled={false}
                                                                    onClick={[Function]}
                                                                  >
                                                                    <KeyboardIcon />
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </WithStyles(ForwardRef(InputAdornment))>
                                                              }
                                                              fullWidth={true}
                                                              id="luk-search-dob"
                                                              inputComponent="input"
                                                              inputRef={
                                                                Object {
                                                                  "current": <input
                                                                    aria-invalid="false"
                                                                    class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                    id="luk-search-dob"
                                                                    name="dob"
                                                                    placeholder="MM/DD/YYYY"
                                                                    type="text"
                                                                    value=""
                                                                  />,
                                                                }
                                                              }
                                                              multiline={false}
                                                              name="dob"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onKeyDown={[Function]}
                                                              placeholder="MM/DD/YYYY"
                                                              renderSuffix={[Function]}
                                                              type="text"
                                                              value=""
                                                            >
                                                              <ForwardRef(InputBase)
                                                                autoFocus={false}
                                                                classes={
                                                                  Object {
                                                                    "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                                                    "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                                                    "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                                                    "disabled": "Mui-disabled Mui-disabled",
                                                                    "error": "Mui-error Mui-error",
                                                                    "focused": "Mui-focused Mui-focused",
                                                                    "formControl": "MuiInputBase-formControl",
                                                                    "fullWidth": "MuiInputBase-fullWidth",
                                                                    "input": "MuiInputBase-input MuiOutlinedInput-input",
                                                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                                                    "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                    "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                                                    "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                                                    "root": "MuiInputBase-root MuiOutlinedInput-root",
                                                                  }
                                                                }
                                                                endAdornment={
                                                                  <WithStyles(ForwardRef(InputAdornment))
                                                                    position="end"
                                                                  >
                                                                    <WithStyles(ForwardRef(IconButton))
                                                                      disabled={false}
                                                                      onClick={[Function]}
                                                                    >
                                                                      <KeyboardIcon />
                                                                    </WithStyles(ForwardRef(IconButton))>
                                                                  </WithStyles(ForwardRef(InputAdornment))>
                                                                }
                                                                fullWidth={true}
                                                                id="luk-search-dob"
                                                                inputComponent="input"
                                                                inputRef={
                                                                  Object {
                                                                    "current": <input
                                                                      aria-invalid="false"
                                                                      class="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                      id="luk-search-dob"
                                                                      name="dob"
                                                                      placeholder="MM/DD/YYYY"
                                                                      type="text"
                                                                      value=""
                                                                    />,
                                                                  }
                                                                }
                                                                multiline={false}
                                                                name="dob"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onKeyDown={[Function]}
                                                                placeholder="MM/DD/YYYY"
                                                                renderSuffix={[Function]}
                                                                type="text"
                                                                value=""
                                                              >
                                                                <div
                                                                  className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                                                  onClick={[Function]}
                                                                >
                                                                  <input
                                                                    aria-invalid={false}
                                                                    autoFocus={false}
                                                                    className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                                                    disabled={false}
                                                                    id="luk-search-dob"
                                                                    name="dob"
                                                                    onAnimationStart={[Function]}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    placeholder="MM/DD/YYYY"
                                                                    required={false}
                                                                    type="text"
                                                                    value=""
                                                                  />
                                                                  <WithStyles(ForwardRef(InputAdornment))
                                                                    position="end"
                                                                  >
                                                                    <ForwardRef(InputAdornment)
                                                                      classes={
                                                                        Object {
                                                                          "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                          "filled": "MuiInputAdornment-filled",
                                                                          "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                          "marginDense": "MuiInputAdornment-marginDense",
                                                                          "positionEnd": "MuiInputAdornment-positionEnd",
                                                                          "positionStart": "MuiInputAdornment-positionStart",
                                                                          "root": "MuiInputAdornment-root",
                                                                        }
                                                                      }
                                                                      position="end"
                                                                    >
                                                                      <div
                                                                        className="MuiInputAdornment-root MuiInputAdornment-hiddenLabel MuiInputAdornment-positionEnd"
                                                                      >
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          disabled={false}
                                                                          onClick={[Function]}
                                                                        >
                                                                          <ForwardRef(IconButton)
                                                                            classes={
                                                                              Object {
                                                                                "colorInherit": "MuiIconButton-colorInherit",
                                                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                "disabled": "Mui-disabled",
                                                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                "edgeStart": "MuiIconButton-edgeStart",
                                                                                "label": "MuiIconButton-label",
                                                                                "root": "MuiIconButton-root",
                                                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                                                              }
                                                                            }
                                                                            disabled={false}
                                                                            onClick={[Function]}
                                                                          >
                                                                            <WithStyles(ForwardRef(ButtonBase))
                                                                              centerRipple={true}
                                                                              className="MuiIconButton-root"
                                                                              disabled={false}
                                                                              focusRipple={true}
                                                                              onClick={[Function]}
                                                                            >
                                                                              <ForwardRef(ButtonBase)
                                                                                centerRipple={true}
                                                                                className="MuiIconButton-root"
                                                                                classes={
                                                                                  Object {
                                                                                    "disabled": "Mui-disabled",
                                                                                    "focusVisible": "Mui-focusVisible",
                                                                                    "root": "MuiButtonBase-root",
                                                                                  }
                                                                                }
                                                                                disabled={false}
                                                                                focusRipple={true}
                                                                                onClick={[Function]}
                                                                              >
                                                                                <button
                                                                                  className="MuiButtonBase-root MuiIconButton-root"
                                                                                  disabled={false}
                                                                                  onBlur={[Function]}
                                                                                  onClick={[Function]}
                                                                                  onDragLeave={[Function]}
                                                                                  onFocus={[Function]}
                                                                                  onKeyDown={[Function]}
                                                                                  onKeyUp={[Function]}
                                                                                  onMouseDown={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                  onMouseUp={[Function]}
                                                                                  onTouchEnd={[Function]}
                                                                                  onTouchMove={[Function]}
                                                                                  onTouchStart={[Function]}
                                                                                  tabIndex={0}
                                                                                  type="button"
                                                                                >
                                                                                  <span
                                                                                    className="MuiIconButton-label"
                                                                                  >
                                                                                    <KeyboardIcon>
                                                                                      <WithStyles(ForwardRef(SvgIcon))>
                                                                                        <ForwardRef(SvgIcon)
                                                                                          classes={
                                                                                            Object {
                                                                                              "colorAction": "MuiSvgIcon-colorAction",
                                                                                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                                              "colorError": "MuiSvgIcon-colorError",
                                                                                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                                              "root": "MuiSvgIcon-root",
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <svg
                                                                                            aria-hidden="true"
                                                                                            className="MuiSvgIcon-root"
                                                                                            focusable="false"
                                                                                            viewBox="0 0 24 24"
                                                                                          >
                                                                                            <path
                                                                                              d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
                                                                                            />
                                                                                            <path
                                                                                              d="M0 0h24v24H0z"
                                                                                              fill="none"
                                                                                            />
                                                                                          </svg>
                                                                                        </ForwardRef(SvgIcon)>
                                                                                      </WithStyles(ForwardRef(SvgIcon))>
                                                                                    </KeyboardIcon>
                                                                                  </span>
                                                                                  <WithStyles(memo)
                                                                                    center={true}
                                                                                  >
                                                                                    <ForwardRef(TouchRipple)
                                                                                      center={true}
                                                                                      classes={
                                                                                        Object {
                                                                                          "child": "MuiTouchRipple-child",
                                                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                          "ripple": "MuiTouchRipple-ripple",
                                                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                          "root": "MuiTouchRipple-root",
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <span
                                                                                        className="MuiTouchRipple-root"
                                                                                      >
                                                                                        <TransitionGroup
                                                                                          childFactory={[Function]}
                                                                                          component={null}
                                                                                          exit={true}
                                                                                        />
                                                                                      </span>
                                                                                    </ForwardRef(TouchRipple)>
                                                                                  </WithStyles(memo)>
                                                                                </button>
                                                                              </ForwardRef(ButtonBase)>
                                                                            </WithStyles(ForwardRef(ButtonBase))>
                                                                          </ForwardRef(IconButton)>
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                      </div>
                                                                    </ForwardRef(InputAdornment)>
                                                                  </WithStyles(ForwardRef(InputAdornment))>
                                                                  <WithStyles(ForwardRef(NotchedOutline))
                                                                    className="MuiOutlinedInput-notchedOutline"
                                                                    labelWidth={0}
                                                                    notched={false}
                                                                  >
                                                                    <ForwardRef(NotchedOutline)
                                                                      className="MuiOutlinedInput-notchedOutline"
                                                                      classes={
                                                                        Object {
                                                                          "legend": "PrivateNotchedOutline-legend-68",
                                                                          "legendLabelled": "PrivateNotchedOutline-legendLabelled-69",
                                                                          "legendNotched": "PrivateNotchedOutline-legendNotched-70",
                                                                          "root": "PrivateNotchedOutline-root-67",
                                                                        }
                                                                      }
                                                                      labelWidth={0}
                                                                      notched={false}
                                                                    >
                                                                      <fieldset
                                                                        aria-hidden={true}
                                                                        className="PrivateNotchedOutline-root-67 MuiOutlinedInput-notchedOutline"
                                                                        style={
                                                                          Object {
                                                                            "paddingLeft": 8,
                                                                          }
                                                                        }
                                                                      >
                                                                        <legend
                                                                          className="PrivateNotchedOutline-legend-68"
                                                                          style={
                                                                            Object {
                                                                              "width": 0.01,
                                                                            }
                                                                          }
                                                                        >
                                                                          <span
                                                                            dangerouslySetInnerHTML={
                                                                              Object {
                                                                                "__html": "&#8203;",
                                                                              }
                                                                            }
                                                                          />
                                                                        </legend>
                                                                      </fieldset>
                                                                    </ForwardRef(NotchedOutline)>
                                                                  </WithStyles(ForwardRef(NotchedOutline))>
                                                                </div>
                                                              </ForwardRef(InputBase)>
                                                            </WithStyles(ForwardRef(InputBase))>
                                                          </ForwardRef(OutlinedInput)>
                                                        </WithStyles(ForwardRef(OutlinedInput))>
                                                      </div>
                                                    </ForwardRef(FormControl)>
                                                  </WithStyles(ForwardRef(FormControl))>
                                                </ForwardRef(TextField)>
                                              </WithStyles(ForwardRef(TextField))>
                                            </Rifm>
                                          </KeyboardDateInput>
                                          <WithStyles(ForwardRef(Popover))
                                            anchorOrigin={
                                              Object {
                                                "horizontal": "center",
                                                "vertical": "bottom",
                                              }
                                            }
                                            onClose={[Function]}
                                            open={false}
                                            transformOrigin={
                                              Object {
                                                "horizontal": "center",
                                                "vertical": "top",
                                              }
                                            }
                                          >
                                            <ForwardRef(Popover)
                                              anchorOrigin={
                                                Object {
                                                  "horizontal": "center",
                                                  "vertical": "bottom",
                                                }
                                              }
                                              classes={
                                                Object {
                                                  "paper": "MuiPopover-paper",
                                                  "root": "MuiPopover-root",
                                                }
                                              }
                                              onClose={[Function]}
                                              open={false}
                                              transformOrigin={
                                                Object {
                                                  "horizontal": "center",
                                                  "vertical": "top",
                                                }
                                              }
                                            >
                                              <ForwardRef(Modal)
                                                BackdropProps={
                                                  Object {
                                                    "invisible": true,
                                                  }
                                                }
                                                className="MuiPopover-root"
                                                onClose={[Function]}
                                                open={false}
                                              />
                                            </ForwardRef(Popover)>
                                          </WithStyles(ForwardRef(Popover))>
                                        </InlineWrapper>
                                      </Wrapper>
                                    </PickerWithState>
                                  </DatePicker>
                                </div>
                                <div>
                                  <Label
                                    stealth={true}
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Label-sc-130fyca-0",
                                            "isStatic": false,
                                            "lastClassName": "c6",
                                            "rules": Array [
                                              "color:",
                                              "#56565A",
                                              ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                                              [Function],
                                              ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                                              [Function],
                                              ";",
                                              [Function],
                                              ";",
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "Label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Label-sc-130fyca-0",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      stealth={true}
                                    >
                                      <label
                                        className="c6"
                                      >
                                        Submit
                                      </label>
                                    </StyledComponent>
                                  </Label>
                                  <Button
                                    disabled={false}
                                    fontColor=""
                                    fullWidth={true}
                                    isLoading={false}
                                    mode="primary"
                                    onClick={[Function]}
                                    type="submit"
                                  >
                                    <StyledButton
                                      disabled={false}
                                      fontColor=""
                                      fullWidth={true}
                                      mode="primary"
                                      onClick={[Function]}
                                      type="submit"
                                    >
                                      <StyledComponent
                                        disabled={false}
                                        fontColor=""
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledButton-sc-1etazn9-0",
                                              "isStatic": false,
                                              "lastClassName": "c7",
                                              "rules": Array [
                                                "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                                                "100ms",
                                                " ease-out,border-color ",
                                                "100ms",
                                                " ease-out,box-shadow ",
                                                "100ms",
                                                " ease-out;width:",
                                                [Function],
                                                ";white-space:nowrap;",
                                                [Function],
                                                ";",
                                                [Function],
                                                ";:hover{cursor:pointer;text-decoration:none;",
                                                [Function],
                                                "};:active{text-decoration:none;",
                                                [Function],
                                                "};:disabled{cursor:not-allowed;text-decoration:none;",
                                                [Function],
                                                "};:focus{",
                                                [Function],
                                                "}",
                                              ],
                                            },
                                            "displayName": "StyledButton",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledButton-sc-1etazn9-0",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        fullWidth={true}
                                        mode="primary"
                                        onClick={[Function]}
                                        type="submit"
                                      >
                                        <button
                                          className="c7"
                                          disabled={false}
                                          mode="primary"
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <ContentWrapper>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ContentWrapper-sc-36hfub-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c8",
                                                    "rules": Array [
                                                      "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                                    ],
                                                  },
                                                  "displayName": "ContentWrapper",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ContentWrapper-sc-36hfub-0",
                                                  "target": "span",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <span
                                                className="c8"
                                              >
                                                <Content
                                                  isLoading={false}
                                                >
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "Content-sc-18psqsj-0",
                                                          "isStatic": false,
                                                          "lastClassName": "c9",
                                                          "rules": Array [
                                                            "flex:1 1 auto;opacity:",
                                                            [Function],
                                                            ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                          ],
                                                        },
                                                        "displayName": "Content",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "Content-sc-18psqsj-0",
                                                        "target": "span",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                    isLoading={false}
                                                  >
                                                    <span
                                                      className="c9"
                                                    >
                                                      Search
                                                    </span>
                                                  </StyledComponent>
                                                </Content>
                                              </span>
                                            </StyledComponent>
                                          </ContentWrapper>
                                        </button>
                                      </StyledComponent>
                                    </StyledButton>
                                  </Button>
                                </div>
                              </div>
                            </StyledComponent>
                          </StyledSearchComponents__InputGrid>
                        </form>
                      </div>
                    </StyledComponent>
                  </CardSegment>
                </div>
              </StyledComponent>
            </Card>
            <SearchResults
              hasSearched={false}
              isLoading={false}
              noResults={[Function]}
              resultComponent={[Function]}
              results={Immutable.List []}
            >
              <CardStack>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "CardStack-sc-1vtkaja-0",
                        "isStatic": false,
                        "lastClassName": "c0",
                        "rules": Array [
                          "display:flex;flex-direction:column;position:relative;& > div{margin:10px 0;}& > div:first-child{margin-top:0;}& > div:last-child{margin-bottom:0;}",
                        ],
                      },
                      "displayName": "CardStack",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "CardStack-sc-1vtkaja-0",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c0"
                  />
                </StyledComponent>
              </CardStack>
            </SearchResults>
          </div>
        </StyledComponent>
      </CardStack>
    </Search>
  </MuiPickersUtilsProvider>
</ThemeProvider>
`;
