// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search snapshots should match snapshot 1`] = `
.c3 {
  color: #1f1f22;
  display: inline-block;
  font-size: 14px;
  font-stretch: normal;
  font-style: normal;
  font-weight: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  margin: 5px 5px 5px 0;
}

.c4 {
  color: #1f1f22;
  display: inline-block;
  font-size: 14px;
  font-stretch: normal;
  font-style: normal;
  font-weight: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  margin: 5px 5px 5px 0;
  visibility: hidden;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  position: relative;
  border-bottom: 1px solid #dfdfe3;
  background-color: transparent;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin: 0;
  padding: 30px 30px 30px 30px;
}

.c1:hover {
  cursor: inherit;
}

.c1:first-child {
  border-radius: 3px 3px 0 0;
}

.c1:last-child {
  border-bottom: 0;
  border-radius: 0 0 3px 3px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
}

.c0 > div {
  margin: 10px 0;
}

.c0 > div:first-child {
  margin-top: 0;
}

.c0 > div:last-child {
  margin-bottom: 0;
}

.c2 {
  display: grid;
  -webkit-flex: 1 1 100%;
  -ms-flex: 1 1 100%;
  flex: 1 1 100%;
  grid-gap: 20px 30px;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  grid-template-columns: repeat(4,minmax(0,1fr));
}

<ThemeProvider
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "overrides": Object {
        "MuiButton": Object {
          "colorInherit": Object {
            "borderColor": "currentColor",
            "color": "inherit",
          },
          "contained": Object {
            "backgroundColor": "#f2f2f4",
            "color": "#56565a",
          },
          "containedSizeLarge": Object {
            "fontSize": "18px",
            "minHeight": "46px",
            "padding": "0 40px",
          },
          "containedSizeSmall": Object {
            "fontSize": "14px",
            "minHeight": "26px",
            "padding": "5px",
          },
          "disabled": Object {},
          "endIcon": Object {
            "&$iconSizeSmall": Object {
              "marginRight": -2,
            },
            "display": "inherit",
            "marginLeft": 8,
            "marginRight": -4,
          },
          "focusVisible": Object {},
          "fullWidth": Object {
            "width": "100%",
          },
          "iconSizeLarge": Object {
            "& > *:first-child": Object {
              "fontSize": "inherit",
            },
          },
          "iconSizeMedium": Object {
            "& > *:first-child": Object {
              "fontSize": "inherit",
            },
          },
          "iconSizeSmall": Object {
            "& > *:first-child": Object {
              "fontSize": "inherit",
            },
          },
          "label": Object {
            "fontWeight": 600,
            "lineHeight": 1.2,
          },
          "outlinedSizeLarge": Object {
            "fontSize": "18px",
            "minHeight": "46px",
            "padding": "0 38px",
          },
          "outlinedSizeSmall": Object {
            "fontSize": "14px",
            "minHeight": "26px",
            "padding": "4px",
          },
          "root": Object {
            "borderRadius": "3px",
            "fontSize": "16px",
            "minHeight": "40px",
            "padding": "0 16px",
            "textTransform": "none",
          },
          "sizeLarge": Object {
            "minWidth": "26px",
          },
          "sizeSmall": Object {
            "minWidth": "26px",
          },
          "startIcon": Object {
            "&$iconSizeSmall": Object {
              "marginLeft": -2,
            },
            "display": "inherit",
            "marginLeft": -4,
            "marginRight": 8,
          },
          "text": Object {
            "padding": "0 16px",
          },
          "textSizeLarge": Object {
            "fontSize": "18px",
            "minHeight": "46px",
            "padding": "0 40px",
          },
          "textSizeSmall": Object {
            "fontSize": "14px",
            "minHeight": "26px",
            "padding": "5px",
          },
        },
        "MuiCard": Object {
          "root": Object {
            "overflow": "visible",
          },
        },
        "MuiFilledInput": Object {
          "input": Object {
            "&$disabled": Object {
              "backgroundColor": "#f2f2f4",
              "cursor": "not-allowed",
            },
            "padding": "10px",
          },
          "inputHiddenLabel": Object {
            "paddingBottom": 10,
            "paddingTop": 10,
          },
          "multiline": Object {
            "padding": "10px",
          },
          "root": Object {
            "&$disabled": Object {
              "backgroundColor": "#f2f2f4",
              "cursor": "not-allowed",
            },
            "&$error": Object {
              "borderColor": "#ed4545",
            },
            "&$focused": Object {
              "backgroundColor": "#f9f9fc",
              "borderColor": "#56565a",
            },
            "&:hover:not($disabled):not($focused):not($error)": Object {
              "backgroundColor": "#dfdfe3",
              "border": "1px solid #dfdfe3",
            },
            "backgroundColor": "#f2f2f4",
            "border": "1px solid #f2f2f4",
          },
        },
        "MuiFormHelperText": Object {
          "contained": Object {
            "margin": "5px 10px 0",
          },
          "root": Object {
            "&$error": Object {
              "color": "#ed4545",
            },
            "fontFamily": "inherit",
            "fontSize": "12px",
          },
        },
        "MuiIconButton": Object {
          "root": Object {
            "fontSize": "1rem",
            "padding": "10px",
          },
          "sizeSmall": Object {
            "fontSize": "0.8rem",
            "padding": "6px",
          },
        },
        "MuiInputBase": Object {
          "input": Object {
            "&$disabled": Object {
              "color": "#8b8b90",
              "cursor": "not-allowed",
            },
            "padding": "10px",
          },
          "inputHiddenLabel": Object {
            "padding": 0,
          },
          "root": Object {
            "&$disabled": Object {
              "cursor": "not-allowed",
            },
            "&:hover:not($disabled):not($focused):not($error)": Object {
              "backgroundColor": "#dfdfe3",
            },
            "borderRadius": "3px",
            "color": "#1f1f22",
            "fontFamily": "inherit",
            "fontSize": "14px",
            "lineHeight": "1.5",
            "minHeight": "40px",
          },
        },
        "MuiOutlinedInput": Object {
          "input": Object {
            "padding": "10px",
          },
          "notchedOutline": Object {
            "visibility": "hidden",
          },
          "root": Object {
            "&$error": Object {
              "borderColor": "#ed4545",
            },
            "&$focused": Object {
              "backgroundColor": "white",
              "borderColor": "#56565a",
            },
            "&:hover:not($disabled):not($focused):not($error)": Object {
              "backgroundColor": "#f9f9fc",
            },
            "backgroundColor": "white",
            "border": "1px solid #dfdfe3",
          },
        },
        "MuiTouchRipple": Object {
          "@keyframes enter": Object {
            "0%": Object {
              "opacity": 0.1,
              "transform": "scale(1)",
            },
            "100%": Object {
              "opacity": 0.3,
              "transform": "scale(1)",
            },
          },
          "childLeaving": Object {
            "animationDuration": "250ms",
          },
          "rippleVisible": Object {
            "animationDuration": "250ms",
          },
        },
      },
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "augmentColor": [Function],
        "background": Object {
          "default": "#fafafa",
          "header": "#f2f2f4",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "#dfdfe3",
        "error": Object {
          "contrastText": "white",
          "dark": "#9c2d23",
          "light": "rgb(240, 106, 106)",
          "main": "#ed4545",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "white",
          "dark": "#2161b7",
          "light": "rgb(114, 174, 255)",
          "main": "#4f9aff",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "#4f3fa7",
          "light": "rgb(145, 118, 255)",
          "main": "#7654ff",
        },
        "secondary": Object {
          "contrastText": "#4f3fa7",
          "dark": "#a291ff",
          "light": "rgb(212, 204, 255)",
          "main": "#cac0ff",
        },
        "success": Object {
          "contrastText": "white",
          "dark": "#017546",
          "light": "rgb(51, 191, 132)",
          "main": "#00af66",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#1f1f22",
          "secondary": "#8b8b90",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "white",
          "dark": "#a34a25",
          "light": "rgb(255, 150, 91)",
          "main": "#ff7c33",
        },
      },
      "props": Object {
        "MuiFilledInput": Object {
          "disableUnderline": true,
        },
        "MuiFormControl": Object {
          "fullWidth": true,
          "hiddenLabel": true,
        },
        "MuiOutlinedInput": Object {
          "notched": false,
        },
      },
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body1": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "lineHeight": 1.66,
        },
        "fontFamily": "'Inter', 'Arial', sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "6rem",
          "fontWeight": 300,
          "lineHeight": 1.167,
        },
        "h2": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "3.75rem",
          "fontWeight": 300,
          "lineHeight": 1.2,
        },
        "h3": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "3rem",
          "fontWeight": 400,
          "lineHeight": 1.167,
        },
        "h4": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "2.125rem",
          "fontWeight": 400,
          "lineHeight": 1.235,
        },
        "h5": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "1.5rem",
          "fontWeight": 400,
          "lineHeight": 1.334,
        },
        "h6": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 500,
          "lineHeight": 1.6,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "'Inter', 'Arial', sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <MuiPickersUtilsProvider
    utils={[Function]}
  >
    <Search
      filterFields={Array []}
      hasSearched={false}
      resultComponent={[Function]}
      searchFields={
        Array [
          Object {
            "id": "firstname",
            "label": "First Name",
          },
          Object {
            "id": "lastname",
            "label": "Last Name",
          },
          Object {
            "id": "dob",
            "label": "Date of Birth",
            "type": "date",
          },
        ]
      }
      searchResults={Immutable.List []}
      searchResultsComponent={[Function]}
    >
      <CardStack>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "CardStack-sc-1vtkaja-0",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  "display:flex;flex-direction:column;position:relative;& > div{margin:10px 0;}& > div:first-child{margin-top:0;}& > div:last-child{margin-bottom:0;}",
                ],
              },
              "displayName": "CardStack",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "CardStack-sc-1vtkaja-0",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0"
          >
            <ForwardRef>
              <Card__StyledMuiCard
                variant="outlined"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Naked": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "propTypes": Object {
                          "children": [Function],
                          "className": [Function],
                          "classes": [Function],
                          "raised": [Function],
                        },
                        "render": [Function],
                      },
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Card__StyledMuiCard-sc-3vnjrr-0",
                        "isStatic": false,
                        "lastClassName": "eppFER",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Card__StyledMuiCard",
                      "foldedComponentIds": Array [],
                      "options": Object {
                        "defaultTheme": Object {
                          "breakpoints": Object {
                            "between": [Function],
                            "down": [Function],
                            "keys": Array [
                              "xs",
                              "sm",
                              "md",
                              "lg",
                              "xl",
                            ],
                            "only": [Function],
                            "up": [Function],
                            "values": Object {
                              "lg": 1280,
                              "md": 960,
                              "sm": 600,
                              "xl": 1920,
                              "xs": 0,
                            },
                            "width": [Function],
                          },
                          "direction": "ltr",
                          "mixins": Object {
                            "gutters": [Function],
                            "toolbar": Object {
                              "@media (min-width:0px) and (orientation: landscape)": Object {
                                "minHeight": 48,
                              },
                              "@media (min-width:600px)": Object {
                                "minHeight": 64,
                              },
                              "minHeight": 56,
                            },
                          },
                          "overrides": Object {},
                          "palette": Object {
                            "action": Object {
                              "activatedOpacity": 0.12,
                              "active": "rgba(0, 0, 0, 0.54)",
                              "disabled": "rgba(0, 0, 0, 0.26)",
                              "disabledBackground": "rgba(0, 0, 0, 0.12)",
                              "disabledOpacity": 0.38,
                              "focus": "rgba(0, 0, 0, 0.12)",
                              "focusOpacity": 0.12,
                              "hover": "rgba(0, 0, 0, 0.04)",
                              "hoverOpacity": 0.04,
                              "selected": "rgba(0, 0, 0, 0.08)",
                              "selectedOpacity": 0.08,
                            },
                            "augmentColor": [Function],
                            "background": Object {
                              "default": "#fafafa",
                              "paper": "#fff",
                            },
                            "common": Object {
                              "black": "#000",
                              "white": "#fff",
                            },
                            "contrastThreshold": 3,
                            "divider": "rgba(0, 0, 0, 0.12)",
                            "error": Object {
                              "contrastText": "#fff",
                              "dark": "#d32f2f",
                              "light": "#e57373",
                              "main": "#f44336",
                            },
                            "getContrastText": [Function],
                            "grey": Object {
                              "100": "#f5f5f5",
                              "200": "#eeeeee",
                              "300": "#e0e0e0",
                              "400": "#bdbdbd",
                              "50": "#fafafa",
                              "500": "#9e9e9e",
                              "600": "#757575",
                              "700": "#616161",
                              "800": "#424242",
                              "900": "#212121",
                              "A100": "#d5d5d5",
                              "A200": "#aaaaaa",
                              "A400": "#303030",
                              "A700": "#616161",
                            },
                            "info": Object {
                              "contrastText": "#fff",
                              "dark": "#1976d2",
                              "light": "#64b5f6",
                              "main": "#2196f3",
                            },
                            "primary": Object {
                              "contrastText": "#fff",
                              "dark": "#303f9f",
                              "light": "#7986cb",
                              "main": "#3f51b5",
                            },
                            "secondary": Object {
                              "contrastText": "#fff",
                              "dark": "#c51162",
                              "light": "#ff4081",
                              "main": "#f50057",
                            },
                            "success": Object {
                              "contrastText": "rgba(0, 0, 0, 0.87)",
                              "dark": "#388e3c",
                              "light": "#81c784",
                              "main": "#4caf50",
                            },
                            "text": Object {
                              "disabled": "rgba(0, 0, 0, 0.38)",
                              "hint": "rgba(0, 0, 0, 0.38)",
                              "primary": "rgba(0, 0, 0, 0.87)",
                              "secondary": "rgba(0, 0, 0, 0.54)",
                            },
                            "tonalOffset": 0.2,
                            "type": "light",
                            "warning": Object {
                              "contrastText": "rgba(0, 0, 0, 0.87)",
                              "dark": "#f57c00",
                              "light": "#ffb74d",
                              "main": "#ff9800",
                            },
                          },
                          "props": Object {},
                          "shadows": Array [
                            "none",
                            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                          ],
                          "shape": Object {
                            "borderRadius": 4,
                          },
                          "spacing": [Function],
                          "transitions": Object {
                            "create": [Function],
                            "duration": Object {
                              "complex": 375,
                              "enteringScreen": 225,
                              "leavingScreen": 195,
                              "short": 250,
                              "shorter": 200,
                              "shortest": 150,
                              "standard": 300,
                            },
                            "easing": Object {
                              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                            },
                            "getAutoHeightDuration": [Function],
                          },
                          "typography": Object {
                            "body1": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "1rem",
                              "fontWeight": 400,
                              "letterSpacing": "0.00938em",
                              "lineHeight": 1.5,
                            },
                            "body2": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "0.875rem",
                              "fontWeight": 400,
                              "letterSpacing": "0.01071em",
                              "lineHeight": 1.43,
                            },
                            "button": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "0.875rem",
                              "fontWeight": 500,
                              "letterSpacing": "0.02857em",
                              "lineHeight": 1.75,
                              "textTransform": "uppercase",
                            },
                            "caption": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "0.75rem",
                              "fontWeight": 400,
                              "letterSpacing": "0.03333em",
                              "lineHeight": 1.66,
                            },
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": 14,
                            "fontWeightBold": 700,
                            "fontWeightLight": 300,
                            "fontWeightMedium": 500,
                            "fontWeightRegular": 400,
                            "h1": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "6rem",
                              "fontWeight": 300,
                              "letterSpacing": "-0.01562em",
                              "lineHeight": 1.167,
                            },
                            "h2": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "3.75rem",
                              "fontWeight": 300,
                              "letterSpacing": "-0.00833em",
                              "lineHeight": 1.2,
                            },
                            "h3": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "3rem",
                              "fontWeight": 400,
                              "letterSpacing": "0em",
                              "lineHeight": 1.167,
                            },
                            "h4": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "2.125rem",
                              "fontWeight": 400,
                              "letterSpacing": "0.00735em",
                              "lineHeight": 1.235,
                            },
                            "h5": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "1.5rem",
                              "fontWeight": 400,
                              "letterSpacing": "0em",
                              "lineHeight": 1.334,
                            },
                            "h6": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "1.25rem",
                              "fontWeight": 500,
                              "letterSpacing": "0.0075em",
                              "lineHeight": 1.6,
                            },
                            "htmlFontSize": 16,
                            "overline": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "0.75rem",
                              "fontWeight": 400,
                              "letterSpacing": "0.08333em",
                              "lineHeight": 2.66,
                              "textTransform": "uppercase",
                            },
                            "pxToRem": [Function],
                            "round": [Function],
                            "subtitle1": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "1rem",
                              "fontWeight": 400,
                              "letterSpacing": "0.00938em",
                              "lineHeight": 1.75,
                            },
                            "subtitle2": Object {
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": "0.875rem",
                              "fontWeight": 500,
                              "letterSpacing": "0.00714em",
                              "lineHeight": 1.57,
                            },
                          },
                          "zIndex": Object {
                            "appBar": 1100,
                            "drawer": 1200,
                            "mobileStepper": 1000,
                            "modal": 1300,
                            "snackbar": 1400,
                            "speedDial": 1050,
                            "tooltip": 1500,
                          },
                        },
                        "name": "MuiCard",
                      },
                      "propTypes": Object {
                        "classes": [Function],
                        "innerRef": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "Card__StyledMuiCard-sc-3vnjrr-0",
                      "target": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Naked": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "raised": [Function],
                          },
                          "render": [Function],
                        },
                        "displayName": "WithStyles(ForwardRef(Card))",
                        "options": Object {
                          "defaultTheme": Object {
                            "breakpoints": Object {
                              "between": [Function],
                              "down": [Function],
                              "keys": Array [
                                "xs",
                                "sm",
                                "md",
                                "lg",
                                "xl",
                              ],
                              "only": [Function],
                              "up": [Function],
                              "values": Object {
                                "lg": 1280,
                                "md": 960,
                                "sm": 600,
                                "xl": 1920,
                                "xs": 0,
                              },
                              "width": [Function],
                            },
                            "direction": "ltr",
                            "mixins": Object {
                              "gutters": [Function],
                              "toolbar": Object {
                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                  "minHeight": 48,
                                },
                                "@media (min-width:600px)": Object {
                                  "minHeight": 64,
                                },
                                "minHeight": 56,
                              },
                            },
                            "overrides": Object {},
                            "palette": Object {
                              "action": Object {
                                "activatedOpacity": 0.12,
                                "active": "rgba(0, 0, 0, 0.54)",
                                "disabled": "rgba(0, 0, 0, 0.26)",
                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                "disabledOpacity": 0.38,
                                "focus": "rgba(0, 0, 0, 0.12)",
                                "focusOpacity": 0.12,
                                "hover": "rgba(0, 0, 0, 0.04)",
                                "hoverOpacity": 0.04,
                                "selected": "rgba(0, 0, 0, 0.08)",
                                "selectedOpacity": 0.08,
                              },
                              "augmentColor": [Function],
                              "background": Object {
                                "default": "#fafafa",
                                "paper": "#fff",
                              },
                              "common": Object {
                                "black": "#000",
                                "white": "#fff",
                              },
                              "contrastThreshold": 3,
                              "divider": "rgba(0, 0, 0, 0.12)",
                              "error": Object {
                                "contrastText": "#fff",
                                "dark": "#d32f2f",
                                "light": "#e57373",
                                "main": "#f44336",
                              },
                              "getContrastText": [Function],
                              "grey": Object {
                                "100": "#f5f5f5",
                                "200": "#eeeeee",
                                "300": "#e0e0e0",
                                "400": "#bdbdbd",
                                "50": "#fafafa",
                                "500": "#9e9e9e",
                                "600": "#757575",
                                "700": "#616161",
                                "800": "#424242",
                                "900": "#212121",
                                "A100": "#d5d5d5",
                                "A200": "#aaaaaa",
                                "A400": "#303030",
                                "A700": "#616161",
                              },
                              "info": Object {
                                "contrastText": "#fff",
                                "dark": "#1976d2",
                                "light": "#64b5f6",
                                "main": "#2196f3",
                              },
                              "primary": Object {
                                "contrastText": "#fff",
                                "dark": "#303f9f",
                                "light": "#7986cb",
                                "main": "#3f51b5",
                              },
                              "secondary": Object {
                                "contrastText": "#fff",
                                "dark": "#c51162",
                                "light": "#ff4081",
                                "main": "#f50057",
                              },
                              "success": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#388e3c",
                                "light": "#81c784",
                                "main": "#4caf50",
                              },
                              "text": Object {
                                "disabled": "rgba(0, 0, 0, 0.38)",
                                "hint": "rgba(0, 0, 0, 0.38)",
                                "primary": "rgba(0, 0, 0, 0.87)",
                                "secondary": "rgba(0, 0, 0, 0.54)",
                              },
                              "tonalOffset": 0.2,
                              "type": "light",
                              "warning": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#f57c00",
                                "light": "#ffb74d",
                                "main": "#ff9800",
                              },
                            },
                            "props": Object {},
                            "shadows": Array [
                              "none",
                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                            ],
                            "shape": Object {
                              "borderRadius": 4,
                            },
                            "spacing": [Function],
                            "transitions": Object {
                              "create": [Function],
                              "duration": Object {
                                "complex": 375,
                                "enteringScreen": 225,
                                "leavingScreen": 195,
                                "short": 250,
                                "shorter": 200,
                                "shortest": 150,
                                "standard": 300,
                              },
                              "easing": Object {
                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                              },
                              "getAutoHeightDuration": [Function],
                            },
                            "typography": Object {
                              "body1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.5,
                              },
                              "body2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.01071em",
                                "lineHeight": 1.43,
                              },
                              "button": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.02857em",
                                "lineHeight": 1.75,
                                "textTransform": "uppercase",
                              },
                              "caption": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.03333em",
                                "lineHeight": 1.66,
                              },
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": 14,
                              "fontWeightBold": 700,
                              "fontWeightLight": 300,
                              "fontWeightMedium": 500,
                              "fontWeightRegular": 400,
                              "h1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "6rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.01562em",
                                "lineHeight": 1.167,
                              },
                              "h2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.00833em",
                                "lineHeight": 1.2,
                              },
                              "h3": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.167,
                              },
                              "h4": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "2.125rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00735em",
                                "lineHeight": 1.235,
                              },
                              "h5": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.5rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.334,
                              },
                              "h6": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.25rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.0075em",
                                "lineHeight": 1.6,
                              },
                              "htmlFontSize": 16,
                              "overline": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.08333em",
                                "lineHeight": 2.66,
                                "textTransform": "uppercase",
                              },
                              "pxToRem": [Function],
                              "round": [Function],
                              "subtitle1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.75,
                              },
                              "subtitle2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.00714em",
                                "lineHeight": 1.57,
                              },
                            },
                            "zIndex": Object {
                              "appBar": 1100,
                              "drawer": 1200,
                              "mobileStepper": 1000,
                              "modal": 1300,
                              "snackbar": 1400,
                              "speedDial": 1050,
                              "tooltip": 1500,
                            },
                          },
                          "name": "MuiCard",
                        },
                        "propTypes": Object {
                          "classes": [Function],
                          "innerRef": [Function],
                        },
                        "render": [Function],
                        "useStyles": [Function],
                      },
                      "toString": [Function],
                      "useStyles": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  variant="outlined"
                >
                  <WithStyles(ForwardRef(Card))
                    className=""
                    variant="outlined"
                  >
                    <ForwardRef(Card)
                      className=""
                      classes={
                        Object {
                          "root": "MuiCard-root",
                        }
                      }
                      variant="outlined"
                    >
                      <WithStyles(ForwardRef(Paper))
                        className="MuiCard-root "
                        elevation={1}
                        variant="outlined"
                      >
                        <ForwardRef(Paper)
                          className="MuiCard-root "
                          classes={
                            Object {
                              "elevation0": "MuiPaper-elevation0",
                              "elevation1": "MuiPaper-elevation1",
                              "elevation10": "MuiPaper-elevation10",
                              "elevation11": "MuiPaper-elevation11",
                              "elevation12": "MuiPaper-elevation12",
                              "elevation13": "MuiPaper-elevation13",
                              "elevation14": "MuiPaper-elevation14",
                              "elevation15": "MuiPaper-elevation15",
                              "elevation16": "MuiPaper-elevation16",
                              "elevation17": "MuiPaper-elevation17",
                              "elevation18": "MuiPaper-elevation18",
                              "elevation19": "MuiPaper-elevation19",
                              "elevation2": "MuiPaper-elevation2",
                              "elevation20": "MuiPaper-elevation20",
                              "elevation21": "MuiPaper-elevation21",
                              "elevation22": "MuiPaper-elevation22",
                              "elevation23": "MuiPaper-elevation23",
                              "elevation24": "MuiPaper-elevation24",
                              "elevation3": "MuiPaper-elevation3",
                              "elevation4": "MuiPaper-elevation4",
                              "elevation5": "MuiPaper-elevation5",
                              "elevation6": "MuiPaper-elevation6",
                              "elevation7": "MuiPaper-elevation7",
                              "elevation8": "MuiPaper-elevation8",
                              "elevation9": "MuiPaper-elevation9",
                              "outlined": "MuiPaper-outlined",
                              "root": "MuiPaper-root",
                              "rounded": "MuiPaper-rounded",
                            }
                          }
                          elevation={1}
                          variant="outlined"
                        >
                          <div
                            className="MuiPaper-root MuiCard-root MuiPaper-outlined MuiPaper-rounded"
                          >
                            <CardSegment
                              vertical={true}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "CardSegment-sc-44tqm2-0",
                                      "isStatic": false,
                                      "lastClassName": "c1",
                                      "rules": Array [
                                        "display:flex;flex:1 0 auto;position:relative;",
                                        [Function],
                                        " &:first-child{border-radius:3px 3px 0 0;}&:last-child{border-bottom:0;border-radius:0 0 3px 3px;}",
                                      ],
                                    },
                                    "displayName": "CardSegment",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "CardSegment-sc-44tqm2-0",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                vertical={true}
                              >
                                <div
                                  className="c1"
                                >
                                  <form>
                                    <StyledSearchComponents__InputGrid
                                      align="flex-start"
                                      columns={4}
                                    >
                                      <StyledComponent
                                        align="flex-start"
                                        columns={4}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledSearchComponents__InputGrid-sc-1686v4u-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "display:grid;flex:1 1 100%;grid-gap:20px 30px;",
                                                [Function],
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledSearchComponents__InputGrid",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledSearchComponents__InputGrid-sc-1686v4u-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="c2"
                                        >
                                          <div
                                            key="luk-search-key-firstname"
                                          >
                                            <Label
                                              htmlFor="luk-search-firstname"
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "Label-sc-130fyca-0",
                                                      "isStatic": false,
                                                      "lastClassName": "c4",
                                                      "rules": Array [
                                                        "color:",
                                                        "#1f1f22",
                                                        ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                                                        [Function],
                                                        ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                                                        [Function],
                                                        ";",
                                                        [Function],
                                                        ";",
                                                        [Function],
                                                        ";",
                                                      ],
                                                    },
                                                    "displayName": "Label",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "Label-sc-130fyca-0",
                                                    "target": "label",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                htmlFor="luk-search-firstname"
                                              >
                                                <label
                                                  className="c3"
                                                  htmlFor="luk-search-firstname"
                                                >
                                                  First Name
                                                </label>
                                              </StyledComponent>
                                            </Label>
                                            <ForwardRef
                                              id="luk-search-firstname"
                                              name="firstname"
                                              onChange={[Function]}
                                              value=""
                                            >
                                              <WithStyles(ForwardRef(TextField))
                                                fullWidth={true}
                                                id="luk-search-firstname"
                                                name="firstname"
                                                onChange={[Function]}
                                                value=""
                                                variant="filled"
                                              >
                                                <ForwardRef(TextField)
                                                  classes={
                                                    Object {
                                                      "root": "MuiTextField-root",
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="luk-search-firstname"
                                                  name="firstname"
                                                  onChange={[Function]}
                                                  value=""
                                                  variant="filled"
                                                >
                                                  <WithStyles(ForwardRef(FormControl))
                                                    className="MuiTextField-root"
                                                    color="primary"
                                                    disabled={false}
                                                    error={false}
                                                    fullWidth={true}
                                                    required={false}
                                                    variant="filled"
                                                  >
                                                    <ForwardRef(FormControl)
                                                      className="MuiTextField-root"
                                                      classes={
                                                        Object {
                                                          "fullWidth": "MuiFormControl-fullWidth",
                                                          "marginDense": "MuiFormControl-marginDense",
                                                          "marginNormal": "MuiFormControl-marginNormal",
                                                          "root": "MuiFormControl-root",
                                                        }
                                                      }
                                                      color="primary"
                                                      disabled={false}
                                                      error={false}
                                                      fullWidth={true}
                                                      hiddenLabel={true}
                                                      required={false}
                                                      variant="filled"
                                                    >
                                                      <div
                                                        className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                      >
                                                        <WithStyles(ForwardRef(FilledInput))
                                                          autoFocus={false}
                                                          fullWidth={true}
                                                          id="luk-search-firstname"
                                                          multiline={false}
                                                          name="firstname"
                                                          onChange={[Function]}
                                                          value=""
                                                        >
                                                          <ForwardRef(FilledInput)
                                                            autoFocus={false}
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiFilledInput-adornedEnd",
                                                                "adornedStart": "MuiFilledInput-adornedStart",
                                                                "colorSecondary": "MuiFilledInput-colorSecondary",
                                                                "disabled": "Mui-disabled",
                                                                "error": "Mui-error",
                                                                "focused": "Mui-focused",
                                                                "input": "MuiFilledInput-input",
                                                                "inputAdornedEnd": "MuiFilledInput-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiFilledInput-inputAdornedStart",
                                                                "inputHiddenLabel": "MuiFilledInput-inputHiddenLabel",
                                                                "inputMarginDense": "MuiFilledInput-inputMarginDense",
                                                                "inputMultiline": "MuiFilledInput-inputMultiline",
                                                                "marginDense": "MuiFilledInput-marginDense",
                                                                "multiline": "MuiFilledInput-multiline",
                                                                "root": "MuiFilledInput-root",
                                                                "underline": "MuiFilledInput-underline",
                                                              }
                                                            }
                                                            disableUnderline={true}
                                                            fullWidth={true}
                                                            id="luk-search-firstname"
                                                            multiline={false}
                                                            name="firstname"
                                                            onChange={[Function]}
                                                            value=""
                                                          >
                                                            <WithStyles(ForwardRef(InputBase))
                                                              autoFocus={false}
                                                              classes={
                                                                Object {
                                                                  "adornedEnd": "MuiFilledInput-adornedEnd",
                                                                  "adornedStart": "MuiFilledInput-adornedStart",
                                                                  "colorSecondary": "MuiFilledInput-colorSecondary",
                                                                  "disabled": "Mui-disabled",
                                                                  "error": "Mui-error",
                                                                  "focused": "Mui-focused",
                                                                  "input": "MuiFilledInput-input",
                                                                  "inputAdornedEnd": "MuiFilledInput-inputAdornedEnd",
                                                                  "inputAdornedStart": "MuiFilledInput-inputAdornedStart",
                                                                  "inputHiddenLabel": "MuiFilledInput-inputHiddenLabel",
                                                                  "inputMarginDense": "MuiFilledInput-inputMarginDense",
                                                                  "inputMultiline": "MuiFilledInput-inputMultiline",
                                                                  "marginDense": "MuiFilledInput-marginDense",
                                                                  "multiline": "MuiFilledInput-multiline",
                                                                  "root": "MuiFilledInput-root",
                                                                  "underline": null,
                                                                }
                                                              }
                                                              fullWidth={true}
                                                              id="luk-search-firstname"
                                                              inputComponent="input"
                                                              multiline={false}
                                                              name="firstname"
                                                              onChange={[Function]}
                                                              type="text"
                                                              value=""
                                                            >
                                                              <ForwardRef(InputBase)
                                                                autoFocus={false}
                                                                classes={
                                                                  Object {
                                                                    "adornedEnd": "MuiInputBase-adornedEnd MuiFilledInput-adornedEnd",
                                                                    "adornedStart": "MuiInputBase-adornedStart MuiFilledInput-adornedStart",
                                                                    "colorSecondary": "MuiInputBase-colorSecondary MuiFilledInput-colorSecondary",
                                                                    "disabled": "Mui-disabled Mui-disabled",
                                                                    "error": "Mui-error Mui-error",
                                                                    "focused": "Mui-focused Mui-focused",
                                                                    "formControl": "MuiInputBase-formControl",
                                                                    "fullWidth": "MuiInputBase-fullWidth",
                                                                    "input": "MuiInputBase-input MuiFilledInput-input",
                                                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd",
                                                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiFilledInput-inputAdornedStart",
                                                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel",
                                                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiFilledInput-inputMarginDense",
                                                                    "inputMultiline": "MuiInputBase-inputMultiline MuiFilledInput-inputMultiline",
                                                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                    "marginDense": "MuiInputBase-marginDense MuiFilledInput-marginDense",
                                                                    "multiline": "MuiInputBase-multiline MuiFilledInput-multiline",
                                                                    "root": "MuiInputBase-root MuiFilledInput-root",
                                                                  }
                                                                }
                                                                fullWidth={true}
                                                                id="luk-search-firstname"
                                                                inputComponent="input"
                                                                multiline={false}
                                                                name="firstname"
                                                                onChange={[Function]}
                                                                type="text"
                                                                value=""
                                                              >
                                                                <div
                                                                  className="MuiInputBase-root MuiFilledInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                                                  onClick={[Function]}
                                                                >
                                                                  <input
                                                                    aria-invalid={false}
                                                                    autoFocus={false}
                                                                    className="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel"
                                                                    disabled={false}
                                                                    id="luk-search-firstname"
                                                                    name="firstname"
                                                                    onAnimationStart={[Function]}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    required={false}
                                                                    type="text"
                                                                    value=""
                                                                  />
                                                                </div>
                                                              </ForwardRef(InputBase)>
                                                            </WithStyles(ForwardRef(InputBase))>
                                                          </ForwardRef(FilledInput)>
                                                        </WithStyles(ForwardRef(FilledInput))>
                                                      </div>
                                                    </ForwardRef(FormControl)>
                                                  </WithStyles(ForwardRef(FormControl))>
                                                </ForwardRef(TextField)>
                                              </WithStyles(ForwardRef(TextField))>
                                            </ForwardRef>
                                          </div>
                                          <div
                                            key="luk-search-key-lastname"
                                          >
                                            <Label
                                              htmlFor="luk-search-lastname"
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "Label-sc-130fyca-0",
                                                      "isStatic": false,
                                                      "lastClassName": "c4",
                                                      "rules": Array [
                                                        "color:",
                                                        "#1f1f22",
                                                        ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                                                        [Function],
                                                        ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                                                        [Function],
                                                        ";",
                                                        [Function],
                                                        ";",
                                                        [Function],
                                                        ";",
                                                      ],
                                                    },
                                                    "displayName": "Label",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "Label-sc-130fyca-0",
                                                    "target": "label",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                htmlFor="luk-search-lastname"
                                              >
                                                <label
                                                  className="c3"
                                                  htmlFor="luk-search-lastname"
                                                >
                                                  Last Name
                                                </label>
                                              </StyledComponent>
                                            </Label>
                                            <ForwardRef
                                              id="luk-search-lastname"
                                              name="lastname"
                                              onChange={[Function]}
                                              value=""
                                            >
                                              <WithStyles(ForwardRef(TextField))
                                                fullWidth={true}
                                                id="luk-search-lastname"
                                                name="lastname"
                                                onChange={[Function]}
                                                value=""
                                                variant="filled"
                                              >
                                                <ForwardRef(TextField)
                                                  classes={
                                                    Object {
                                                      "root": "MuiTextField-root",
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="luk-search-lastname"
                                                  name="lastname"
                                                  onChange={[Function]}
                                                  value=""
                                                  variant="filled"
                                                >
                                                  <WithStyles(ForwardRef(FormControl))
                                                    className="MuiTextField-root"
                                                    color="primary"
                                                    disabled={false}
                                                    error={false}
                                                    fullWidth={true}
                                                    required={false}
                                                    variant="filled"
                                                  >
                                                    <ForwardRef(FormControl)
                                                      className="MuiTextField-root"
                                                      classes={
                                                        Object {
                                                          "fullWidth": "MuiFormControl-fullWidth",
                                                          "marginDense": "MuiFormControl-marginDense",
                                                          "marginNormal": "MuiFormControl-marginNormal",
                                                          "root": "MuiFormControl-root",
                                                        }
                                                      }
                                                      color="primary"
                                                      disabled={false}
                                                      error={false}
                                                      fullWidth={true}
                                                      hiddenLabel={true}
                                                      required={false}
                                                      variant="filled"
                                                    >
                                                      <div
                                                        className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                      >
                                                        <WithStyles(ForwardRef(FilledInput))
                                                          autoFocus={false}
                                                          fullWidth={true}
                                                          id="luk-search-lastname"
                                                          multiline={false}
                                                          name="lastname"
                                                          onChange={[Function]}
                                                          value=""
                                                        >
                                                          <ForwardRef(FilledInput)
                                                            autoFocus={false}
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiFilledInput-adornedEnd",
                                                                "adornedStart": "MuiFilledInput-adornedStart",
                                                                "colorSecondary": "MuiFilledInput-colorSecondary",
                                                                "disabled": "Mui-disabled",
                                                                "error": "Mui-error",
                                                                "focused": "Mui-focused",
                                                                "input": "MuiFilledInput-input",
                                                                "inputAdornedEnd": "MuiFilledInput-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiFilledInput-inputAdornedStart",
                                                                "inputHiddenLabel": "MuiFilledInput-inputHiddenLabel",
                                                                "inputMarginDense": "MuiFilledInput-inputMarginDense",
                                                                "inputMultiline": "MuiFilledInput-inputMultiline",
                                                                "marginDense": "MuiFilledInput-marginDense",
                                                                "multiline": "MuiFilledInput-multiline",
                                                                "root": "MuiFilledInput-root",
                                                                "underline": "MuiFilledInput-underline",
                                                              }
                                                            }
                                                            disableUnderline={true}
                                                            fullWidth={true}
                                                            id="luk-search-lastname"
                                                            multiline={false}
                                                            name="lastname"
                                                            onChange={[Function]}
                                                            value=""
                                                          >
                                                            <WithStyles(ForwardRef(InputBase))
                                                              autoFocus={false}
                                                              classes={
                                                                Object {
                                                                  "adornedEnd": "MuiFilledInput-adornedEnd",
                                                                  "adornedStart": "MuiFilledInput-adornedStart",
                                                                  "colorSecondary": "MuiFilledInput-colorSecondary",
                                                                  "disabled": "Mui-disabled",
                                                                  "error": "Mui-error",
                                                                  "focused": "Mui-focused",
                                                                  "input": "MuiFilledInput-input",
                                                                  "inputAdornedEnd": "MuiFilledInput-inputAdornedEnd",
                                                                  "inputAdornedStart": "MuiFilledInput-inputAdornedStart",
                                                                  "inputHiddenLabel": "MuiFilledInput-inputHiddenLabel",
                                                                  "inputMarginDense": "MuiFilledInput-inputMarginDense",
                                                                  "inputMultiline": "MuiFilledInput-inputMultiline",
                                                                  "marginDense": "MuiFilledInput-marginDense",
                                                                  "multiline": "MuiFilledInput-multiline",
                                                                  "root": "MuiFilledInput-root",
                                                                  "underline": null,
                                                                }
                                                              }
                                                              fullWidth={true}
                                                              id="luk-search-lastname"
                                                              inputComponent="input"
                                                              multiline={false}
                                                              name="lastname"
                                                              onChange={[Function]}
                                                              type="text"
                                                              value=""
                                                            >
                                                              <ForwardRef(InputBase)
                                                                autoFocus={false}
                                                                classes={
                                                                  Object {
                                                                    "adornedEnd": "MuiInputBase-adornedEnd MuiFilledInput-adornedEnd",
                                                                    "adornedStart": "MuiInputBase-adornedStart MuiFilledInput-adornedStart",
                                                                    "colorSecondary": "MuiInputBase-colorSecondary MuiFilledInput-colorSecondary",
                                                                    "disabled": "Mui-disabled Mui-disabled",
                                                                    "error": "Mui-error Mui-error",
                                                                    "focused": "Mui-focused Mui-focused",
                                                                    "formControl": "MuiInputBase-formControl",
                                                                    "fullWidth": "MuiInputBase-fullWidth",
                                                                    "input": "MuiInputBase-input MuiFilledInput-input",
                                                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd",
                                                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiFilledInput-inputAdornedStart",
                                                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel",
                                                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiFilledInput-inputMarginDense",
                                                                    "inputMultiline": "MuiInputBase-inputMultiline MuiFilledInput-inputMultiline",
                                                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                    "marginDense": "MuiInputBase-marginDense MuiFilledInput-marginDense",
                                                                    "multiline": "MuiInputBase-multiline MuiFilledInput-multiline",
                                                                    "root": "MuiInputBase-root MuiFilledInput-root",
                                                                  }
                                                                }
                                                                fullWidth={true}
                                                                id="luk-search-lastname"
                                                                inputComponent="input"
                                                                multiline={false}
                                                                name="lastname"
                                                                onChange={[Function]}
                                                                type="text"
                                                                value=""
                                                              >
                                                                <div
                                                                  className="MuiInputBase-root MuiFilledInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                                                  onClick={[Function]}
                                                                >
                                                                  <input
                                                                    aria-invalid={false}
                                                                    autoFocus={false}
                                                                    className="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel"
                                                                    disabled={false}
                                                                    id="luk-search-lastname"
                                                                    name="lastname"
                                                                    onAnimationStart={[Function]}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    required={false}
                                                                    type="text"
                                                                    value=""
                                                                  />
                                                                </div>
                                                              </ForwardRef(InputBase)>
                                                            </WithStyles(ForwardRef(InputBase))>
                                                          </ForwardRef(FilledInput)>
                                                        </WithStyles(ForwardRef(FilledInput))>
                                                      </div>
                                                    </ForwardRef(FormControl)>
                                                  </WithStyles(ForwardRef(FormControl))>
                                                </ForwardRef(TextField)>
                                              </WithStyles(ForwardRef(TextField))>
                                            </ForwardRef>
                                          </div>
                                          <div
                                            key="luk-search-key-dob"
                                          >
                                            <Label
                                              htmlFor="luk-search-dob"
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "Label-sc-130fyca-0",
                                                      "isStatic": false,
                                                      "lastClassName": "c4",
                                                      "rules": Array [
                                                        "color:",
                                                        "#1f1f22",
                                                        ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                                                        [Function],
                                                        ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                                                        [Function],
                                                        ";",
                                                        [Function],
                                                        ";",
                                                        [Function],
                                                        ";",
                                                      ],
                                                    },
                                                    "displayName": "Label",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "Label-sc-130fyca-0",
                                                    "target": "label",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                htmlFor="luk-search-dob"
                                              >
                                                <label
                                                  className="c3"
                                                  htmlFor="luk-search-dob"
                                                >
                                                  Date of Birth
                                                </label>
                                              </StyledComponent>
                                            </Label>
                                            <DatePicker
                                              disabled={false}
                                              format="MM/dd/yyyy"
                                              fullWidth={true}
                                              id="luk-search-dob"
                                              mask="__/__/____"
                                              name="dob"
                                              onChange={[Function]}
                                              placeholder="MM/DD/YYYY"
                                              value=""
                                            >
                                              <PickerWithState
                                                InputProps={
                                                  Object {
                                                    "onBlur": [Function],
                                                    "onKeyDown": [Function],
                                                  }
                                                }
                                                allowKeyboardControl={true}
                                                disabled={false}
                                                format="MM/dd/yyyy"
                                                fullWidth={true}
                                                id="luk-search-dob"
                                                inputVariant="filled"
                                                invalidDateMessage="Invalid Date Format"
                                                mask="__/__/____"
                                                maxDate={2100-01-01T00:00:00.000Z}
                                                maxDateMessage="Date should not be after maximal date"
                                                minDate={1900-01-01T00:00:00.000Z}
                                                minDateMessage="Date should not be before minimal date"
                                                name="dob"
                                                onChange={[Function]}
                                                openTo="date"
                                                placeholder="MM/DD/YYYY"
                                                value={null}
                                                variant="inline"
                                                views={
                                                  Array [
                                                    "year",
                                                    "date",
                                                  ]
                                                }
                                              >
                                                <Wrapper
                                                  DateInputProps={
                                                    Object {
                                                      "format": "MM/dd/yyyy",
                                                      "inputValue": "",
                                                      "onChange": [Function],
                                                      "openPicker": [Function],
                                                      "validationError": "",
                                                    }
                                                  }
                                                  InputComponent={[Function]}
                                                  InputProps={
                                                    Object {
                                                      "onBlur": [Function],
                                                      "onKeyDown": [Function],
                                                    }
                                                  }
                                                  disabled={false}
                                                  format="MM/dd/yyyy"
                                                  fullWidth={true}
                                                  id="luk-search-dob"
                                                  inputVariant="filled"
                                                  mask="__/__/____"
                                                  name="dob"
                                                  onAccept={[Function]}
                                                  onClear={[Function]}
                                                  onDismiss={[Function]}
                                                  onSetToday={[Function]}
                                                  open={false}
                                                  placeholder="MM/DD/YYYY"
                                                  variant="inline"
                                                >
                                                  <InlineWrapper
                                                    DateInputProps={
                                                      Object {
                                                        "format": "MM/dd/yyyy",
                                                        "inputValue": "",
                                                        "onChange": [Function],
                                                        "openPicker": [Function],
                                                        "validationError": "",
                                                      }
                                                    }
                                                    InputComponent={[Function]}
                                                    InputProps={
                                                      Object {
                                                        "onBlur": [Function],
                                                        "onKeyDown": [Function],
                                                      }
                                                    }
                                                    disabled={false}
                                                    format="MM/dd/yyyy"
                                                    fullWidth={true}
                                                    id="luk-search-dob"
                                                    inputVariant="filled"
                                                    mask="__/__/____"
                                                    name="dob"
                                                    onAccept={[Function]}
                                                    onClear={[Function]}
                                                    onDismiss={[Function]}
                                                    onSetToday={[Function]}
                                                    open={false}
                                                    placeholder="MM/DD/YYYY"
                                                  >
                                                    <KeyboardDateInput
                                                      InputProps={
                                                        Object {
                                                          "onBlur": [Function],
                                                          "onKeyDown": [Function],
                                                        }
                                                      }
                                                      disabled={false}
                                                      format="MM/dd/yyyy"
                                                      fullWidth={true}
                                                      id="luk-search-dob"
                                                      inputRef={
                                                        Object {
                                                          "current": <input
                                                            aria-invalid="false"
                                                            class="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd"
                                                            id="luk-search-dob"
                                                            name="dob"
                                                            placeholder="MM/DD/YYYY"
                                                            type="text"
                                                            value=""
                                                          />,
                                                        }
                                                      }
                                                      inputValue=""
                                                      inputVariant="filled"
                                                      keyboardIcon={<KeyboardIcon />}
                                                      mask="__/__/____"
                                                      name="dob"
                                                      onChange={[Function]}
                                                      openPicker={[Function]}
                                                      placeholder="MM/DD/YYYY"
                                                      validationError=""
                                                    >
                                                      <Rifm
                                                        format={[Function]}
                                                        key="__/__/____"
                                                        onChange={[Function]}
                                                        refuse={/\\[\\^\\\\d\\]\\+/gi}
                                                        value=""
                                                      >
                                                        <WithStyles(ForwardRef(TextField))
                                                          InputProps={
                                                            Object {
                                                              "endAdornment": <WithStyles(ForwardRef(InputAdornment))
                                                                position="end"
                                                              >
                                                                <WithStyles(ForwardRef(IconButton))
                                                                  disabled={false}
                                                                  onClick={[Function]}
                                                                >
                                                                  <KeyboardIcon />
                                                                </WithStyles(ForwardRef(IconButton))>
                                                              </WithStyles(ForwardRef(InputAdornment))>,
                                                              "onBlur": [Function],
                                                              "onKeyDown": [Function],
                                                            }
                                                          }
                                                          disabled={false}
                                                          error={false}
                                                          fullWidth={true}
                                                          helperText=""
                                                          id="luk-search-dob"
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-invalid="false"
                                                                class="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd"
                                                                id="luk-search-dob"
                                                                name="dob"
                                                                placeholder="MM/DD/YYYY"
                                                                type="text"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          name="dob"
                                                          onChange={[Function]}
                                                          placeholder="MM/DD/YYYY"
                                                          value=""
                                                          variant="filled"
                                                        >
                                                          <ForwardRef(TextField)
                                                            InputProps={
                                                              Object {
                                                                "endAdornment": <WithStyles(ForwardRef(InputAdornment))
                                                                  position="end"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    disabled={false}
                                                                    onClick={[Function]}
                                                                  >
                                                                    <KeyboardIcon />
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </WithStyles(ForwardRef(InputAdornment))>,
                                                                "onBlur": [Function],
                                                                "onKeyDown": [Function],
                                                              }
                                                            }
                                                            classes={
                                                              Object {
                                                                "root": "MuiTextField-root",
                                                              }
                                                            }
                                                            disabled={false}
                                                            error={false}
                                                            fullWidth={true}
                                                            helperText=""
                                                            id="luk-search-dob"
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-invalid="false"
                                                                  class="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd"
                                                                  id="luk-search-dob"
                                                                  name="dob"
                                                                  placeholder="MM/DD/YYYY"
                                                                  type="text"
                                                                  value=""
                                                                />,
                                                              }
                                                            }
                                                            name="dob"
                                                            onChange={[Function]}
                                                            placeholder="MM/DD/YYYY"
                                                            value=""
                                                            variant="filled"
                                                          >
                                                            <WithStyles(ForwardRef(FormControl))
                                                              className="MuiTextField-root"
                                                              color="primary"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={true}
                                                              required={false}
                                                              variant="filled"
                                                            >
                                                              <ForwardRef(FormControl)
                                                                className="MuiTextField-root"
                                                                classes={
                                                                  Object {
                                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                                    "marginDense": "MuiFormControl-marginDense",
                                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                                    "root": "MuiFormControl-root",
                                                                  }
                                                                }
                                                                color="primary"
                                                                disabled={false}
                                                                error={false}
                                                                fullWidth={true}
                                                                hiddenLabel={true}
                                                                required={false}
                                                                variant="filled"
                                                              >
                                                                <div
                                                                  className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                                >
                                                                  <WithStyles(ForwardRef(FilledInput))
                                                                    autoFocus={false}
                                                                    endAdornment={
                                                                      <WithStyles(ForwardRef(InputAdornment))
                                                                        position="end"
                                                                      >
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          disabled={false}
                                                                          onClick={[Function]}
                                                                        >
                                                                          <KeyboardIcon />
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                      </WithStyles(ForwardRef(InputAdornment))>
                                                                    }
                                                                    fullWidth={true}
                                                                    id="luk-search-dob"
                                                                    inputRef={
                                                                      Object {
                                                                        "current": <input
                                                                          aria-invalid="false"
                                                                          class="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd"
                                                                          id="luk-search-dob"
                                                                          name="dob"
                                                                          placeholder="MM/DD/YYYY"
                                                                          type="text"
                                                                          value=""
                                                                        />,
                                                                      }
                                                                    }
                                                                    multiline={false}
                                                                    name="dob"
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    placeholder="MM/DD/YYYY"
                                                                    value=""
                                                                  >
                                                                    <ForwardRef(FilledInput)
                                                                      autoFocus={false}
                                                                      classes={
                                                                        Object {
                                                                          "adornedEnd": "MuiFilledInput-adornedEnd",
                                                                          "adornedStart": "MuiFilledInput-adornedStart",
                                                                          "colorSecondary": "MuiFilledInput-colorSecondary",
                                                                          "disabled": "Mui-disabled",
                                                                          "error": "Mui-error",
                                                                          "focused": "Mui-focused",
                                                                          "input": "MuiFilledInput-input",
                                                                          "inputAdornedEnd": "MuiFilledInput-inputAdornedEnd",
                                                                          "inputAdornedStart": "MuiFilledInput-inputAdornedStart",
                                                                          "inputHiddenLabel": "MuiFilledInput-inputHiddenLabel",
                                                                          "inputMarginDense": "MuiFilledInput-inputMarginDense",
                                                                          "inputMultiline": "MuiFilledInput-inputMultiline",
                                                                          "marginDense": "MuiFilledInput-marginDense",
                                                                          "multiline": "MuiFilledInput-multiline",
                                                                          "root": "MuiFilledInput-root",
                                                                          "underline": "MuiFilledInput-underline",
                                                                        }
                                                                      }
                                                                      disableUnderline={true}
                                                                      endAdornment={
                                                                        <WithStyles(ForwardRef(InputAdornment))
                                                                          position="end"
                                                                        >
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            disabled={false}
                                                                            onClick={[Function]}
                                                                          >
                                                                            <KeyboardIcon />
                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                        </WithStyles(ForwardRef(InputAdornment))>
                                                                      }
                                                                      fullWidth={true}
                                                                      id="luk-search-dob"
                                                                      inputRef={
                                                                        Object {
                                                                          "current": <input
                                                                            aria-invalid="false"
                                                                            class="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd"
                                                                            id="luk-search-dob"
                                                                            name="dob"
                                                                            placeholder="MM/DD/YYYY"
                                                                            type="text"
                                                                            value=""
                                                                          />,
                                                                        }
                                                                      }
                                                                      multiline={false}
                                                                      name="dob"
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      placeholder="MM/DD/YYYY"
                                                                      value=""
                                                                    >
                                                                      <WithStyles(ForwardRef(InputBase))
                                                                        autoFocus={false}
                                                                        classes={
                                                                          Object {
                                                                            "adornedEnd": "MuiFilledInput-adornedEnd",
                                                                            "adornedStart": "MuiFilledInput-adornedStart",
                                                                            "colorSecondary": "MuiFilledInput-colorSecondary",
                                                                            "disabled": "Mui-disabled",
                                                                            "error": "Mui-error",
                                                                            "focused": "Mui-focused",
                                                                            "input": "MuiFilledInput-input",
                                                                            "inputAdornedEnd": "MuiFilledInput-inputAdornedEnd",
                                                                            "inputAdornedStart": "MuiFilledInput-inputAdornedStart",
                                                                            "inputHiddenLabel": "MuiFilledInput-inputHiddenLabel",
                                                                            "inputMarginDense": "MuiFilledInput-inputMarginDense",
                                                                            "inputMultiline": "MuiFilledInput-inputMultiline",
                                                                            "marginDense": "MuiFilledInput-marginDense",
                                                                            "multiline": "MuiFilledInput-multiline",
                                                                            "root": "MuiFilledInput-root",
                                                                            "underline": null,
                                                                          }
                                                                        }
                                                                        endAdornment={
                                                                          <WithStyles(ForwardRef(InputAdornment))
                                                                            position="end"
                                                                          >
                                                                            <WithStyles(ForwardRef(IconButton))
                                                                              disabled={false}
                                                                              onClick={[Function]}
                                                                            >
                                                                              <KeyboardIcon />
                                                                            </WithStyles(ForwardRef(IconButton))>
                                                                          </WithStyles(ForwardRef(InputAdornment))>
                                                                        }
                                                                        fullWidth={true}
                                                                        id="luk-search-dob"
                                                                        inputComponent="input"
                                                                        inputRef={
                                                                          Object {
                                                                            "current": <input
                                                                              aria-invalid="false"
                                                                              class="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd"
                                                                              id="luk-search-dob"
                                                                              name="dob"
                                                                              placeholder="MM/DD/YYYY"
                                                                              type="text"
                                                                              value=""
                                                                            />,
                                                                          }
                                                                        }
                                                                        multiline={false}
                                                                        name="dob"
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        placeholder="MM/DD/YYYY"
                                                                        type="text"
                                                                        value=""
                                                                      >
                                                                        <ForwardRef(InputBase)
                                                                          autoFocus={false}
                                                                          classes={
                                                                            Object {
                                                                              "adornedEnd": "MuiInputBase-adornedEnd MuiFilledInput-adornedEnd",
                                                                              "adornedStart": "MuiInputBase-adornedStart MuiFilledInput-adornedStart",
                                                                              "colorSecondary": "MuiInputBase-colorSecondary MuiFilledInput-colorSecondary",
                                                                              "disabled": "Mui-disabled Mui-disabled",
                                                                              "error": "Mui-error Mui-error",
                                                                              "focused": "Mui-focused Mui-focused",
                                                                              "formControl": "MuiInputBase-formControl",
                                                                              "fullWidth": "MuiInputBase-fullWidth",
                                                                              "input": "MuiInputBase-input MuiFilledInput-input",
                                                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd",
                                                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiFilledInput-inputAdornedStart",
                                                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel",
                                                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiFilledInput-inputMarginDense",
                                                                              "inputMultiline": "MuiInputBase-inputMultiline MuiFilledInput-inputMultiline",
                                                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                                                              "marginDense": "MuiInputBase-marginDense MuiFilledInput-marginDense",
                                                                              "multiline": "MuiInputBase-multiline MuiFilledInput-multiline",
                                                                              "root": "MuiInputBase-root MuiFilledInput-root",
                                                                            }
                                                                          }
                                                                          endAdornment={
                                                                            <WithStyles(ForwardRef(InputAdornment))
                                                                              position="end"
                                                                            >
                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                disabled={false}
                                                                                onClick={[Function]}
                                                                              >
                                                                                <KeyboardIcon />
                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                                          }
                                                                          fullWidth={true}
                                                                          id="luk-search-dob"
                                                                          inputComponent="input"
                                                                          inputRef={
                                                                            Object {
                                                                              "current": <input
                                                                                aria-invalid="false"
                                                                                class="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd"
                                                                                id="luk-search-dob"
                                                                                name="dob"
                                                                                placeholder="MM/DD/YYYY"
                                                                                type="text"
                                                                                value=""
                                                                              />,
                                                                            }
                                                                          }
                                                                          multiline={false}
                                                                          name="dob"
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onKeyDown={[Function]}
                                                                          placeholder="MM/DD/YYYY"
                                                                          type="text"
                                                                          value=""
                                                                        >
                                                                          <div
                                                                            className="MuiInputBase-root MuiFilledInput-root MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-adornedEnd MuiFilledInput-adornedEnd"
                                                                            onClick={[Function]}
                                                                          >
                                                                            <input
                                                                              aria-invalid={false}
                                                                              autoFocus={false}
                                                                              className="MuiInputBase-input MuiFilledInput-input MuiInputBase-inputHiddenLabel MuiFilledInput-inputHiddenLabel MuiInputBase-inputAdornedEnd MuiFilledInput-inputAdornedEnd"
                                                                              disabled={false}
                                                                              id="luk-search-dob"
                                                                              name="dob"
                                                                              onAnimationStart={[Function]}
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              onFocus={[Function]}
                                                                              onKeyDown={[Function]}
                                                                              placeholder="MM/DD/YYYY"
                                                                              required={false}
                                                                              type="text"
                                                                              value=""
                                                                            />
                                                                            <WithStyles(ForwardRef(InputAdornment))
                                                                              position="end"
                                                                            >
                                                                              <ForwardRef(InputAdornment)
                                                                                classes={
                                                                                  Object {
                                                                                    "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                                    "filled": "MuiInputAdornment-filled",
                                                                                    "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                                    "marginDense": "MuiInputAdornment-marginDense",
                                                                                    "positionEnd": "MuiInputAdornment-positionEnd",
                                                                                    "positionStart": "MuiInputAdornment-positionStart",
                                                                                    "root": "MuiInputAdornment-root",
                                                                                  }
                                                                                }
                                                                                position="end"
                                                                              >
                                                                                <div
                                                                                  className="MuiInputAdornment-root MuiInputAdornment-hiddenLabel MuiInputAdornment-filled MuiInputAdornment-positionEnd"
                                                                                >
                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                    disabled={false}
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <ForwardRef(IconButton)
                                                                                      classes={
                                                                                        Object {
                                                                                          "colorInherit": "MuiIconButton-colorInherit",
                                                                                          "colorPrimary": "MuiIconButton-colorPrimary",
                                                                                          "colorSecondary": "MuiIconButton-colorSecondary",
                                                                                          "disabled": "Mui-disabled",
                                                                                          "edgeEnd": "MuiIconButton-edgeEnd",
                                                                                          "edgeStart": "MuiIconButton-edgeStart",
                                                                                          "label": "MuiIconButton-label",
                                                                                          "root": "MuiIconButton-root",
                                                                                          "sizeSmall": "MuiIconButton-sizeSmall",
                                                                                        }
                                                                                      }
                                                                                      disabled={false}
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                                        centerRipple={true}
                                                                                        className="MuiIconButton-root"
                                                                                        disabled={false}
                                                                                        focusRipple={true}
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <ForwardRef(ButtonBase)
                                                                                          centerRipple={true}
                                                                                          className="MuiIconButton-root"
                                                                                          classes={
                                                                                            Object {
                                                                                              "disabled": "Mui-disabled",
                                                                                              "focusVisible": "Mui-focusVisible",
                                                                                              "root": "MuiButtonBase-root",
                                                                                            }
                                                                                          }
                                                                                          disabled={false}
                                                                                          focusRipple={true}
                                                                                          onClick={[Function]}
                                                                                        >
                                                                                          <button
                                                                                            className="MuiButtonBase-root MuiIconButton-root"
                                                                                            disabled={false}
                                                                                            onBlur={[Function]}
                                                                                            onClick={[Function]}
                                                                                            onDragLeave={[Function]}
                                                                                            onFocus={[Function]}
                                                                                            onKeyDown={[Function]}
                                                                                            onKeyUp={[Function]}
                                                                                            onMouseDown={[Function]}
                                                                                            onMouseLeave={[Function]}
                                                                                            onMouseUp={[Function]}
                                                                                            onTouchEnd={[Function]}
                                                                                            onTouchMove={[Function]}
                                                                                            onTouchStart={[Function]}
                                                                                            tabIndex={0}
                                                                                            type="button"
                                                                                          >
                                                                                            <span
                                                                                              className="MuiIconButton-label"
                                                                                            >
                                                                                              <KeyboardIcon>
                                                                                                <WithStyles(ForwardRef(SvgIcon))>
                                                                                                  <ForwardRef(SvgIcon)
                                                                                                    classes={
                                                                                                      Object {
                                                                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                                                        "colorError": "MuiSvgIcon-colorError",
                                                                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                                                        "root": "MuiSvgIcon-root",
                                                                                                      }
                                                                                                    }
                                                                                                  >
                                                                                                    <svg
                                                                                                      aria-hidden={true}
                                                                                                      className="MuiSvgIcon-root"
                                                                                                      focusable="false"
                                                                                                      viewBox="0 0 24 24"
                                                                                                    >
                                                                                                      <path
                                                                                                        d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
                                                                                                      />
                                                                                                      <path
                                                                                                        d="M0 0h24v24H0z"
                                                                                                        fill="none"
                                                                                                      />
                                                                                                    </svg>
                                                                                                  </ForwardRef(SvgIcon)>
                                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                                              </KeyboardIcon>
                                                                                            </span>
                                                                                            <WithStyles(memo)
                                                                                              center={true}
                                                                                            >
                                                                                              <ForwardRef(TouchRipple)
                                                                                                center={true}
                                                                                                classes={
                                                                                                  Object {
                                                                                                    "child": "MuiTouchRipple-child",
                                                                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                                    "ripple": "MuiTouchRipple-ripple",
                                                                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                                    "root": "MuiTouchRipple-root",
                                                                                                  }
                                                                                                }
                                                                                              >
                                                                                                <span
                                                                                                  className="MuiTouchRipple-root"
                                                                                                >
                                                                                                  <TransitionGroup
                                                                                                    childFactory={[Function]}
                                                                                                    component={null}
                                                                                                    exit={true}
                                                                                                  />
                                                                                                </span>
                                                                                              </ForwardRef(TouchRipple)>
                                                                                            </WithStyles(memo)>
                                                                                          </button>
                                                                                        </ForwardRef(ButtonBase)>
                                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                                    </ForwardRef(IconButton)>
                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                </div>
                                                                              </ForwardRef(InputAdornment)>
                                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                                          </div>
                                                                        </ForwardRef(InputBase)>
                                                                      </WithStyles(ForwardRef(InputBase))>
                                                                    </ForwardRef(FilledInput)>
                                                                  </WithStyles(ForwardRef(FilledInput))>
                                                                </div>
                                                              </ForwardRef(FormControl)>
                                                            </WithStyles(ForwardRef(FormControl))>
                                                          </ForwardRef(TextField)>
                                                        </WithStyles(ForwardRef(TextField))>
                                                      </Rifm>
                                                    </KeyboardDateInput>
                                                    <WithStyles(ForwardRef(Popover))
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "bottom",
                                                        }
                                                      }
                                                      onClose={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "center",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(Popover)
                                                        anchorOrigin={
                                                          Object {
                                                            "horizontal": "center",
                                                            "vertical": "bottom",
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "paper": "MuiPopover-paper",
                                                            "root": "MuiPopover-root",
                                                          }
                                                        }
                                                        onClose={[Function]}
                                                        open={false}
                                                        transformOrigin={
                                                          Object {
                                                            "horizontal": "center",
                                                            "vertical": "top",
                                                          }
                                                        }
                                                      >
                                                        <ForwardRef(Modal)
                                                          BackdropProps={
                                                            Object {
                                                              "invisible": true,
                                                            }
                                                          }
                                                          className="MuiPopover-root"
                                                          onClose={[Function]}
                                                          open={false}
                                                        />
                                                      </ForwardRef(Popover)>
                                                    </WithStyles(ForwardRef(Popover))>
                                                  </InlineWrapper>
                                                </Wrapper>
                                              </PickerWithState>
                                            </DatePicker>
                                          </div>
                                          <div>
                                            <Label
                                              stealth={true}
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "Label-sc-130fyca-0",
                                                      "isStatic": false,
                                                      "lastClassName": "c4",
                                                      "rules": Array [
                                                        "color:",
                                                        "#1f1f22",
                                                        ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                                                        [Function],
                                                        ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                                                        [Function],
                                                        ";",
                                                        [Function],
                                                        ";",
                                                        [Function],
                                                        ";",
                                                      ],
                                                    },
                                                    "displayName": "Label",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "Label-sc-130fyca-0",
                                                    "target": "label",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                stealth={true}
                                              >
                                                <label
                                                  className="c4"
                                                >
                                                  Submit
                                                </label>
                                              </StyledComponent>
                                            </Label>
                                            <Button
                                              fullWidth={true}
                                              mode="primary"
                                              onClick={[Function]}
                                              type="submit"
                                            >
                                              <WithStyles(ForwardRef(Button))
                                                className=""
                                                color="default"
                                                disableElevation={true}
                                                fullWidth={true}
                                                mode="primary"
                                                onClick={[Function]}
                                                type="submit"
                                                variant="contained"
                                              >
                                                <ForwardRef(Button)
                                                  className=""
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiButton-colorInherit",
                                                      "contained": "MuiButton-contained",
                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                      "disableElevation": "MuiButton-disableElevation",
                                                      "disabled": "Mui-disabled",
                                                      "endIcon": "MuiButton-endIcon",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "fullWidth": "MuiButton-fullWidth",
                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                      "label": "MuiButton-label",
                                                      "outlined": "MuiButton-outlined",
                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                      "root": "MuiButton-root",
                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                      "startIcon": "MuiButton-startIcon",
                                                      "text": "MuiButton-text",
                                                      "textPrimary": "MuiButton-textPrimary",
                                                      "textSecondary": "MuiButton-textSecondary",
                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                    }
                                                  }
                                                  color="default"
                                                  disableElevation={true}
                                                  fullWidth={true}
                                                  mode="primary"
                                                  onClick={[Function]}
                                                  type="submit"
                                                  variant="contained"
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    className="MuiButton-root MuiButton-contained MuiButton-disableElevation MuiButton-fullWidth"
                                                    component="button"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    focusVisibleClassName="Mui-focusVisible"
                                                    mode="primary"
                                                    onClick={[Function]}
                                                    type="submit"
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      className="MuiButton-root MuiButton-contained MuiButton-disableElevation MuiButton-fullWidth"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      component="button"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      focusVisibleClassName="Mui-focusVisible"
                                                      mode="primary"
                                                      onClick={[Function]}
                                                      type="submit"
                                                    >
                                                      <button
                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-disableElevation MuiButton-fullWidth"
                                                        disabled={false}
                                                        mode="primary"
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        tabIndex={0}
                                                        type="submit"
                                                      >
                                                        <span
                                                          className="MuiButton-label"
                                                        >
                                                          Search
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={false}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={false}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(Button)>
                                              </WithStyles(ForwardRef(Button))>
                                            </Button>
                                          </div>
                                        </div>
                                      </StyledComponent>
                                    </StyledSearchComponents__InputGrid>
                                  </form>
                                </div>
                              </StyledComponent>
                            </CardSegment>
                          </div>
                        </ForwardRef(Paper)>
                      </WithStyles(ForwardRef(Paper))>
                    </ForwardRef(Card)>
                  </WithStyles(ForwardRef(Card))>
                </StyledComponent>
              </Card__StyledMuiCard>
            </ForwardRef>
            <SearchResults
              hasSearched={false}
              isLoading={false}
              noResults={[Function]}
              resultComponent={[Function]}
              results={Immutable.List []}
            >
              <CardStack>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "CardStack-sc-1vtkaja-0",
                        "isStatic": false,
                        "lastClassName": "c0",
                        "rules": Array [
                          "display:flex;flex-direction:column;position:relative;& > div{margin:10px 0;}& > div:first-child{margin-top:0;}& > div:last-child{margin-bottom:0;}",
                        ],
                      },
                      "displayName": "CardStack",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "CardStack-sc-1vtkaja-0",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c0"
                  />
                </StyledComponent>
              </CardStack>
            </SearchResults>
          </div>
        </StyledComponent>
      </CardStack>
    </Search>
  </MuiPickersUtilsProvider>
</ThemeProvider>
`;
