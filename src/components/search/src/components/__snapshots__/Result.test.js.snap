// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Result snapshots should match snapshot 1`] = `
.c2 {
  display: grid;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  grid-auto-flow: row;
  grid-template-columns: repeat(4,minmax(0,1fr));
  grid-gap: 20px 30px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  padding: 10px;
}

.c1 {
  padding: 10px 30px;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<Result
  result={Immutable.Map {}}
  resultColumns={4}
>
  <ForwardRef
    onClick={[Function]}
  >
    <WithStyles(ForwardRef(Card))
      onClick={[Function]}
      variant="outlined"
    >
      <ForwardRef(Card)
        classes={
          Object {
            "root": "MuiCard-root",
          }
        }
        onClick={[Function]}
        variant="outlined"
      >
        <WithStyles(ForwardRef(Paper))
          className="MuiCard-root"
          elevation={1}
          onClick={[Function]}
          variant="outlined"
        >
          <ForwardRef(Paper)
            className="MuiCard-root"
            classes={
              Object {
                "elevation0": "MuiPaper-elevation0",
                "elevation1": "MuiPaper-elevation1",
                "elevation10": "MuiPaper-elevation10",
                "elevation11": "MuiPaper-elevation11",
                "elevation12": "MuiPaper-elevation12",
                "elevation13": "MuiPaper-elevation13",
                "elevation14": "MuiPaper-elevation14",
                "elevation15": "MuiPaper-elevation15",
                "elevation16": "MuiPaper-elevation16",
                "elevation17": "MuiPaper-elevation17",
                "elevation18": "MuiPaper-elevation18",
                "elevation19": "MuiPaper-elevation19",
                "elevation2": "MuiPaper-elevation2",
                "elevation20": "MuiPaper-elevation20",
                "elevation21": "MuiPaper-elevation21",
                "elevation22": "MuiPaper-elevation22",
                "elevation23": "MuiPaper-elevation23",
                "elevation24": "MuiPaper-elevation24",
                "elevation3": "MuiPaper-elevation3",
                "elevation4": "MuiPaper-elevation4",
                "elevation5": "MuiPaper-elevation5",
                "elevation6": "MuiPaper-elevation6",
                "elevation7": "MuiPaper-elevation7",
                "elevation8": "MuiPaper-elevation8",
                "elevation9": "MuiPaper-elevation9",
                "outlined": "MuiPaper-outlined",
                "root": "MuiPaper-root",
                "rounded": "MuiPaper-rounded",
              }
            }
            elevation={1}
            onClick={[Function]}
            variant="outlined"
          >
            <div
              className="MuiPaper-root MuiCard-root MuiPaper-outlined MuiPaper-rounded"
              onClick={[Function]}
            >
              <StyledResultComponents__ResultWrapper>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledResultComponents__ResultWrapper-drevdl-1",
                        "isStatic": false,
                        "lastClassName": "c0",
                        "rules": Array [
                          "display:flex;flex-direction:row;padding:10px;",
                        ],
                      },
                      "displayName": "StyledResultComponents__ResultWrapper",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledResultComponents__ResultWrapper-drevdl-1",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c0"
                  >
                    <StyledResultComponents__ResultDetails>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "StyledResultComponents__ResultDetails-drevdl-2",
                              "isStatic": false,
                              "lastClassName": "c1",
                              "rules": Array [
                                "padding:10px 30px;flex:1;",
                              ],
                            },
                            "displayName": "StyledResultComponents__ResultDetails",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "StyledResultComponents__ResultDetails-drevdl-2",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c1"
                        >
                          <DataGrid
                            columns={4}
                            data={Immutable.Map {}}
                            emptyString="---"
                            truncate={false}
                          >
                            <StyledResultComponents__ResultGrid
                              columns={4}
                            >
                              <StyledComponent
                                columns={4}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "StyledResultComponents__ResultGrid-drevdl-0",
                                      "isStatic": false,
                                      "lastClassName": "c2",
                                      "rules": Array [
                                        "display:grid;flex:1;grid-auto-flow:row;grid-template-columns:",
                                        [Function],
                                        ";grid-gap:20px 30px;",
                                      ],
                                    },
                                    "displayName": "StyledResultComponents__ResultGrid",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "StyledResultComponents__ResultGrid-drevdl-0",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c2"
                                >
                                  <Component />
                                </div>
                              </StyledComponent>
                            </StyledResultComponents__ResultGrid>
                          </DataGrid>
                        </div>
                      </StyledComponent>
                    </StyledResultComponents__ResultDetails>
                  </div>
                </StyledComponent>
              </StyledResultComponents__ResultWrapper>
            </div>
          </ForwardRef(Paper)>
        </WithStyles(ForwardRef(Paper))>
      </ForwardRef(Card)>
    </WithStyles(ForwardRef(Card))>
  </ForwardRef>
</Result>
`;
