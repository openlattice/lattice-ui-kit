// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Result snapshots should match snapshot 1`] = `
.c3 {
  display: grid;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  grid-auto-flow: row;
  grid-template-columns: repeat(4,minmax(0,1fr));
  grid-gap: 20px 30px;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  padding: 10px;
}

.c2 {
  padding: 10px 30px;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c0:hover,
.c0:focus {
  box-shadow: 0 2px 8px -2px rgba(0,0,0,0.15);
  outline: none;
  cursor: pointer;
}

.c0:hover *,
.c0:focus * {
  cursor: inherit;
  pointer-events: auto;
}

.c0:active {
  box-shadow: 0 2px 4px -2px rgba(0,0,0,0.15);
  cursor: pointer;
}

<Result
  result={Immutable.Map {}}
  resultColumns={4}
>
  <ForwardRef
    onClick={[Function]}
  >
    <Styled(WithStyles(ForwardRef(Card)))
      onClick={[Function]}
      variant="outlined"
    >
      <WithStyles(ForwardRef(Card))
        className="c0"
        onClick={[Function]}
        variant="outlined"
      >
        <ForwardRef(Card)
          className="c0"
          classes={
            Object {
              "root": "MuiCard-root",
            }
          }
          onClick={[Function]}
          variant="outlined"
        >
          <WithStyles(ForwardRef(Paper))
            className="MuiCard-root c0"
            elevation={1}
            onClick={[Function]}
            variant="outlined"
          >
            <ForwardRef(Paper)
              className="MuiCard-root c0"
              classes={
                Object {
                  "elevation0": "MuiPaper-elevation0",
                  "elevation1": "MuiPaper-elevation1",
                  "elevation10": "MuiPaper-elevation10",
                  "elevation11": "MuiPaper-elevation11",
                  "elevation12": "MuiPaper-elevation12",
                  "elevation13": "MuiPaper-elevation13",
                  "elevation14": "MuiPaper-elevation14",
                  "elevation15": "MuiPaper-elevation15",
                  "elevation16": "MuiPaper-elevation16",
                  "elevation17": "MuiPaper-elevation17",
                  "elevation18": "MuiPaper-elevation18",
                  "elevation19": "MuiPaper-elevation19",
                  "elevation2": "MuiPaper-elevation2",
                  "elevation20": "MuiPaper-elevation20",
                  "elevation21": "MuiPaper-elevation21",
                  "elevation22": "MuiPaper-elevation22",
                  "elevation23": "MuiPaper-elevation23",
                  "elevation24": "MuiPaper-elevation24",
                  "elevation3": "MuiPaper-elevation3",
                  "elevation4": "MuiPaper-elevation4",
                  "elevation5": "MuiPaper-elevation5",
                  "elevation6": "MuiPaper-elevation6",
                  "elevation7": "MuiPaper-elevation7",
                  "elevation8": "MuiPaper-elevation8",
                  "elevation9": "MuiPaper-elevation9",
                  "outlined": "MuiPaper-outlined",
                  "root": "MuiPaper-root",
                  "rounded": "MuiPaper-rounded",
                }
              }
              elevation={1}
              onClick={[Function]}
              variant="outlined"
            >
              <div
                className="MuiPaper-root MuiCard-root c0 MuiPaper-outlined MuiPaper-rounded"
                onClick={[Function]}
              >
                <styled.div>
                  <div
                    className="c1"
                  >
                    <styled.div>
                      <div
                        className="c2"
                      >
                        <DataGrid
                          columns={4}
                          data={Immutable.Map {}}
                          emptyString="---"
                          truncate={false}
                        >
                          <styled.div
                            columns={4}
                          >
                            <div
                              className="c3"
                            >
                              <Component />
                            </div>
                          </styled.div>
                        </DataGrid>
                      </div>
                    </styled.div>
                  </div>
                </styled.div>
              </div>
            </ForwardRef(Paper)>
          </WithStyles(ForwardRef(Paper))>
        </ForwardRef(Card)>
      </WithStyles(ForwardRef(Card))>
    </Styled(WithStyles(ForwardRef(Card)))>
  </ForwardRef>
</Result>
`;
