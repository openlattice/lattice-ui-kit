// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`overlay snapshots should match snapshot when isVisible="false" 1`] = `
<Overlay
  isScrollable={false}
  isVisible={false}
  onClose={[Function]}
  shouldCloseOnClick={true}
  transparent={false}
>
  <Portal>
    <Portal
      containerInfo={
        <div
          lattice-portal-inner-container=""
        />
      }
    >
      <CSSTransition
        classNames="fade"
        in={false}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={false}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        />
      </CSSTransition>
    </Portal>
  </Portal>
</Overlay>
`;

exports[`overlay snapshots should match snapshot when isVisible="true" 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.fade-appear {
  opacity: 0;
}

.c0.fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-in-out;
  transition: opacity 200ms ease-in-out;
}

.c0.fade-enter {
  opacity: 0;
}

.c0.fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-in-out;
  transition: opacity 200ms ease-in-out;
}

.c0.fade-exit {
  opacity: 1;
}

.c0.fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-in-out;
  transition: opacity 200ms ease-in-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

<Overlay
  isScrollable={false}
  isVisible={true}
  onClose={[Function]}
  shouldCloseOnClick={true}
  transparent={false}
>
  <Portal>
    <Portal
      containerInfo={
        .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.fade-appear {
  opacity: 0;
}

.c0.fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-in-out;
  transition: opacity 200ms ease-in-out;
}

.c0.fade-enter {
  opacity: 0;
}

.c0.fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-in-out;
  transition: opacity 200ms ease-in-out;
}

.c0.fade-exit {
  opacity: 1;
}

.c0.fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-in-out;
  transition: opacity 200ms ease-in-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

<div
          lattice-portal-inner-container=""
        >
          <div
            class="c0"
          >
            <div
              class="c1"
            >
              <span>
                hello
              </span>
            </div>
          </div>
        </div>
      }
    >
      <CSSTransition
        classNames="fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <LockToggle
            accountForScrollbars={true}
            isActive={true}
          >
            <SheetProvider
              accountForScrollbars={true}
              isActive={true}
            >
              <TouchProvider
                accountForScrollbars={true}
                isActive={true}
              >
                <ScrollLock
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchScrollable>
                    <NodeResolver
                      innerRef={[Function]}
                    >
                      <OverlayOuterContainer
                        transparent={false}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "isStatic": false,
                                "lastClassName": "c0",
                                "rules": Array [
                                  "background-color:",
                                  [Function],
                                  ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                  "&.fade-appear{opacity:0;};&.fade-appear-active{opacity:1;transition:opacity ",
                                  "200ms",
                                  " ease-in-out;};&.fade-enter{opacity:0;};&.fade-enter-active{opacity:1;transition:opacity ",
                                  "200ms",
                                  " ease-in-out;};&.fade-exit{opacity:1;};&.fade-exit-active{opacity:0;transition:opacity ",
                                  "200ms",
                                  " ease-in-out;};",
                                  ";",
                                ],
                              },
                              "displayName": "OverlayOuterContainer",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                              "target": "div",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          transparent={false}
                        >
                          <div
                            className="c0"
                          >
                            <OverlayInnerContainer
                              isScrollable={false}
                              onClick={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "isStatic": false,
                                      "lastClassName": "c1",
                                      "rules": Array [
                                        "display:block;height:100%;position:absolute;overflow-y:",
                                        [Function],
                                        ";width:100%;",
                                      ],
                                    },
                                    "displayName": "OverlayInnerContainer",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                    "target": "div",
                                    "toString": [Function],
                                    "usesTheme": false,
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <div
                                  className="c1"
                                  onClick={[Function]}
                                >
                                  <span>
                                    hello
                                  </span>
                                </div>
                              </StyledComponent>
                            </OverlayInnerContainer>
                          </div>
                        </StyledComponent>
                      </OverlayOuterContainer>
                    </NodeResolver>
                  </TouchScrollable>
                </ScrollLock>
              </TouchProvider>
            </SheetProvider>
          </LockToggle>
        </Transition>
      </CSSTransition>
    </Portal>
  </Portal>
</Overlay>
`;
