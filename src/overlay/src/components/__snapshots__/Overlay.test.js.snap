// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`overlay snapshots should match snapshot when isVisible="false" 1`] = `
<Overlay
  isScrollable={false}
  isVisible={false}
  onClose={[Function]}
  shouldCloseOnClick={true}
  transparent={false}
>
  <CSSTransition
    classNames="luk-fade"
    in={false}
    mountOnEnter={true}
    timeout={200}
    unmountOnExit={true}
  >
    <Transition
      appear={false}
      enter={true}
      exit={true}
      in={false}
      mountOnEnter={true}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      timeout={200}
      unmountOnExit={true}
    />
  </CSSTransition>
</Overlay>
`;

exports[`overlay snapshots should match snapshot when isVisible="true" 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

<Overlay
  isScrollable={false}
  isVisible={true}
  onClose={[Function]}
  shouldCloseOnClick={true}
  transparent={false}
>
  <CSSTransition
    classNames="luk-fade"
    in={true}
    mountOnEnter={true}
    timeout={200}
    unmountOnExit={true}
  >
    <Transition
      appear={false}
      enter={true}
      exit={true}
      in={true}
      mountOnEnter={true}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      timeout={200}
      unmountOnExit={true}
    >
      <Portal>
        <Portal
          containerInfo={
            .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

<div
              lattice-portal-inner-container=""
            >
              <div
                class="c0"
              >
                <div
                  class="c1"
                >
                  <span>
                    hello
                  </span>
                </div>
              </div>
            </div>
          }
        >
          <LockToggle
            accountForScrollbars={true}
            isActive={true}
          >
            <SheetProvider
              accountForScrollbars={true}
              isActive={true}
            >
              <TouchProvider
                accountForScrollbars={true}
                isActive={true}
              >
                <ScrollLock
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchScrollable>
                    <OverlayOuterContainer
                      transparent={false}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                              "isStatic": false,
                              "lastClassName": "c0",
                              "rules": Array [
                                "background-color:",
                                [Function],
                                ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                "200ms",
                                " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                "200ms",
                                " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                "200ms",
                                " ease-out;};",
                                ";",
                              ],
                            },
                            "displayName": "OverlayOuterContainer",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={[Function]}
                        transparent={false}
                      >
                        <div
                          className="c0"
                        >
                          <OverlayInnerContainer
                            isScrollable={false}
                            onClick={[Function]}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                    "isStatic": false,
                                    "lastClassName": "c1",
                                    "rules": Array [
                                      "display:block;height:100%;position:absolute;overflow-y:",
                                      [Function],
                                      ";width:100%;",
                                    ],
                                  },
                                  "displayName": "OverlayInnerContainer",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isScrollable={false}
                              onClick={[Function]}
                            >
                              <div
                                className="c1"
                                onClick={[Function]}
                              >
                                <span>
                                  hello
                                </span>
                              </div>
                            </StyledComponent>
                          </OverlayInnerContainer>
                        </div>
                      </StyledComponent>
                    </OverlayOuterContainer>
                  </TouchScrollable>
                </ScrollLock>
              </TouchProvider>
            </SheetProvider>
          </LockToggle>
        </Portal>
      </Portal>
    </Transition>
  </CSSTransition>
</Overlay>
`;
