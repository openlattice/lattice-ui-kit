// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Table handleSort should set order and orderBy when invoked 1`] = `
.c5 {
  background-color: #ffffff;
  border-collapse: collapse;
  border: none;
  table-layout: fixed;
  width: 100%;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  width: 100%;
}

.c7 {
  background-color: #f0f0f7;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
  width: 33%;
}

.c8 {
  background-color: #f0f0f7;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c9 {
  background-color: #f0f0f7;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c11 {
  background-color: inherit;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
  height: 294px;
}

.c6 {
  background-color: #ffffff;
  border-bottom: 1px solid #dcdce7;
}

.c6 td,
.c6 th {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 200;
}

.c10 {
  background-color: #ffffff;
  border-bottom: 1px solid #dcdce7;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: transparent;
  border-color: transparent;
  color: #6124e2;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgba(0,0,0,0.1);
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgba(0,0,0,0.15);
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: transparent;
  border-color: transparent;
  color: #b6bbc7;
}

.c2:focus-visible {
  box-shadow: rgba(0,0,0,0.15) 0 0 0 2px;
}

.c1 {
  color: #555e6f;
  display: inline-block;
  font-size: 14px;
  font-stretch: normal;
  font-style: normal;
  font-weight: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  margin: 5px 5px 5px 0;
  color: #8e929b;
  font-size: 11px;
  font-weight: 600;
  text-transform: uppercase;
}

<Table
  data={
    Array [
      Object {
        "dob": "1942-11-30",
        "id": "1",
        "lastUpdated": "2019-09-01",
        "manager": "Spongebob",
        "name": "Eugene Krabs",
      },
      Object {
        "dob": "",
        "id": "2",
        "lastUpdated": "2019-08-29",
        "manager": "Smitty",
        "name": "Squidward Tentacles",
      },
      Object {
        "dob": "1987-11-17",
        "id": "3",
        "lastUpdated": "2019-07-30",
        "manager": "Patrick",
        "name": "Sandy Cheeks",
      },
      Object {
        "dob": "1975-06-23",
        "id": "4",
        "lastUpdated": "2019-08-16",
        "manager": "Patchy",
        "name": "Larry the Lobster",
      },
      Object {
        "dob": "1942-11-30",
        "id": "5",
        "lastUpdated": "2019-08-20",
        "manager": "Spongebob",
        "name": "Sheldon Plankton",
      },
      Object {
        "dob": "",
        "id": "6",
        "lastUpdated": "2019-08-21",
        "manager": "Spongebob",
        "name": "Mrs. Puff",
      },
      Object {
        "dob": "1678-04-20",
        "id": "7",
        "lastUpdated": "2019-06-21",
        "manager": "Spongebob",
        "name": "Flying Dutchman",
      },
    ]
  }
  headers={
    Array [
      Object {
        "cellStyle": Object {
          "width": "33%",
        },
        "key": "name",
        "label": "Subject Name",
      },
      Object {
        "key": "dob",
        "label": "Date of Birth",
      },
      Object {
        "key": "manager",
        "label": "Manager",
      },
      Object {
        "key": "lastUpdated",
        "label": "Last Updated",
      },
      Object {
        "key": "id",
        "label": "ID",
        "sortable": false,
      },
    ]
  }
  paginated={true}
>
  <div>
    <PaginationToolbar
      count={7}
      rowsPerPage={7}
      rowsPerPageOptions={Array []}
      setPage={
        [MockFunction] {
          "calls": Array [
            Array [
              0,
            ],
            Array [
              7,
            ],
            Array [
              "desc",
            ],
            Array [
              "name",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      setRowsPerPage={
        [MockFunction] {
          "calls": Array [
            Array [
              0,
            ],
            Array [
              7,
            ],
            Array [
              "desc",
            ],
            Array [
              "name",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
    >
      <styled__PaginationWrapper>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styled__PaginationWrapper-r3xwjs-1",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  "align-items:center;display:flex;justify-content:flex-end;width:100%;",
                ],
              },
              "displayName": "styled__PaginationWrapper",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styled__PaginationWrapper-r3xwjs-1",
              "target": "div",
              "toString": [Function],
              "usesTheme": false,
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0"
          >
            <Label
              subtle={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Label-sc-130fyca-0",
                      "isStatic": false,
                      "lastClassName": "c1",
                      "rules": Array [
                        "color:",
                        "#555e6f",
                        ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                        [Function],
                        ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                        [Function],
                        ";",
                        [Function],
                        ";",
                        [Function],
                        ";",
                      ],
                    },
                    "displayName": "Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Label-sc-130fyca-0",
                    "target": "label",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                subtle={true}
              >
                <label
                  className="c1"
                >
                  Rows per page
                </label>
              </StyledComponent>
            </Label>
            <Label
              id="row-range"
              subtle={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Label-sc-130fyca-0",
                      "isStatic": false,
                      "lastClassName": "c1",
                      "rules": Array [
                        "color:",
                        "#555e6f",
                        ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                        [Function],
                        ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                        [Function],
                        ";",
                        [Function],
                        ";",
                        [Function],
                        ";",
                      ],
                    },
                    "displayName": "Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Label-sc-130fyca-0",
                    "target": "label",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                id="row-range"
                subtle={true}
              >
                <label
                  className="c1"
                  id="row-range"
                >
                  1 - 7 of 7
                </label>
              </StyledComponent>
            </Label>
            <IconButton
              disabled={true}
              icon={
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [
                        256,
                        512,
                        Array [],
                        "f053",
                        "M231.293 473.899l19.799-19.799c4.686-4.686 4.686-12.284 0-16.971L70.393 256 251.092 74.87c4.686-4.686 4.686-12.284 0-16.971L231.293 38.1c-4.686-4.686-12.284-4.686-16.971 0L4.908 247.515c-4.686 4.686-4.686 12.284 0 16.971L214.322 473.9c4.687 4.686 12.285 4.686 16.971-.001z",
                      ],
                      "iconName": "chevron-left",
                      "prefix": "far",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                />
              }
              mode="subtle"
              onClick={[Function]}
            >
              <Button
                disabled={true}
                fontColor=""
                isLoading={false}
                mode="subtle"
                onClick={[Function]}
                type="button"
              >
                <StyledButton
                  disabled={true}
                  fontColor=""
                  mode="subtle"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    disabled={true}
                    fontColor=""
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "StyledButton-sc-1etazn9-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                            "100ms",
                            " ease-out,border-color ",
                            "100ms",
                            " ease-out,box-shadow ",
                            "100ms",
                            " ease-out;width:",
                            [Function],
                            ";white-space:nowrap;",
                            [Function],
                            ";:hover{cursor:pointer;text-decoration:none;",
                            [Function],
                            "};:active{text-decoration:none;",
                            [Function],
                            "};:disabled{cursor:not-allowed;text-decoration:none;",
                            [Function],
                            "};:focus-visible{",
                            [Function],
                            "}",
                          ],
                        },
                        "displayName": "StyledButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "StyledButton-sc-1etazn9-0",
                        "target": "button",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    mode="subtle"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="c2"
                      disabled={true}
                      mode="subtle"
                      onClick={[Function]}
                      type="button"
                    >
                      <ContentWrapper>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "ContentWrapper-sc-36hfub-0",
                                "isStatic": false,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                ],
                              },
                              "displayName": "ContentWrapper",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "ContentWrapper-sc-36hfub-0",
                              "target": "span",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="c3"
                          >
                            <Content
                              isLoading={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Content-sc-18psqsj-0",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "flex:1 1 auto;opacity:",
                                        [Function],
                                        ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                      ],
                                    },
                                    "displayName": "Content",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Content-sc-18psqsj-0",
                                    "target": "span",
                                    "toString": [Function],
                                    "usesTheme": false,
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                isLoading={false}
                              >
                                <span
                                  className="c4"
                                >
                                  <FontAwesomeIcon
                                    border={false}
                                    className=""
                                    fixedWidth={true}
                                    flip={null}
                                    icon={
                                      Object {
                                        "icon": Array [
                                          256,
                                          512,
                                          Array [],
                                          "f053",
                                          "M231.293 473.899l19.799-19.799c4.686-4.686 4.686-12.284 0-16.971L70.393 256 251.092 74.87c4.686-4.686 4.686-12.284 0-16.971L231.293 38.1c-4.686-4.686-12.284-4.686-16.971 0L4.908 247.515c-4.686 4.686-4.686 12.284 0 16.971L214.322 473.9c4.687 4.686 12.285 4.686 16.971-.001z",
                                        ],
                                        "iconName": "chevron-left",
                                        "prefix": "far",
                                      }
                                    }
                                    inverse={false}
                                    listItem={false}
                                    mask={null}
                                    pull={null}
                                    pulse={false}
                                    rotation={null}
                                    size={null}
                                    spin={false}
                                    swapOpacity={false}
                                    symbol={false}
                                    title=""
                                    transform={null}
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="svg-inline--fa fa-chevron-left fa-w-8 fa-fw "
                                      data-icon="chevron-left"
                                      data-prefix="far"
                                      focusable="false"
                                      role="img"
                                      style={Object {}}
                                      viewBox="0 0 256 512"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M231.293 473.899l19.799-19.799c4.686-4.686 4.686-12.284 0-16.971L70.393 256 251.092 74.87c4.686-4.686 4.686-12.284 0-16.971L231.293 38.1c-4.686-4.686-12.284-4.686-16.971 0L4.908 247.515c-4.686 4.686-4.686 12.284 0 16.971L214.322 473.9c4.687 4.686 12.285 4.686 16.971-.001z"
                                        fill="currentColor"
                                        style={Object {}}
                                      />
                                    </svg>
                                  </FontAwesomeIcon>
                                </span>
                              </StyledComponent>
                            </Content>
                          </span>
                        </StyledComponent>
                      </ContentWrapper>
                    </button>
                  </StyledComponent>
                </StyledButton>
              </Button>
            </IconButton>
            <IconButton
              disabled={true}
              icon={
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [
                        256,
                        512,
                        Array [],
                        "f054",
                        "M24.707 38.101L4.908 57.899c-4.686 4.686-4.686 12.284 0 16.971L185.607 256 4.908 437.13c-4.686 4.686-4.686 12.284 0 16.971L24.707 473.9c4.686 4.686 12.284 4.686 16.971 0l209.414-209.414c4.686-4.686 4.686-12.284 0-16.971L41.678 38.101c-4.687-4.687-12.285-4.687-16.971 0z",
                      ],
                      "iconName": "chevron-right",
                      "prefix": "far",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                />
              }
              mode="subtle"
              onClick={[Function]}
            >
              <Button
                disabled={true}
                fontColor=""
                isLoading={false}
                mode="subtle"
                onClick={[Function]}
                type="button"
              >
                <StyledButton
                  disabled={true}
                  fontColor=""
                  mode="subtle"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    disabled={true}
                    fontColor=""
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "StyledButton-sc-1etazn9-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                            "100ms",
                            " ease-out,border-color ",
                            "100ms",
                            " ease-out,box-shadow ",
                            "100ms",
                            " ease-out;width:",
                            [Function],
                            ";white-space:nowrap;",
                            [Function],
                            ";:hover{cursor:pointer;text-decoration:none;",
                            [Function],
                            "};:active{text-decoration:none;",
                            [Function],
                            "};:disabled{cursor:not-allowed;text-decoration:none;",
                            [Function],
                            "};:focus-visible{",
                            [Function],
                            "}",
                          ],
                        },
                        "displayName": "StyledButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "StyledButton-sc-1etazn9-0",
                        "target": "button",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    mode="subtle"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="c2"
                      disabled={true}
                      mode="subtle"
                      onClick={[Function]}
                      type="button"
                    >
                      <ContentWrapper>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "ContentWrapper-sc-36hfub-0",
                                "isStatic": false,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                ],
                              },
                              "displayName": "ContentWrapper",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "ContentWrapper-sc-36hfub-0",
                              "target": "span",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="c3"
                          >
                            <Content
                              isLoading={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Content-sc-18psqsj-0",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "flex:1 1 auto;opacity:",
                                        [Function],
                                        ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                      ],
                                    },
                                    "displayName": "Content",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Content-sc-18psqsj-0",
                                    "target": "span",
                                    "toString": [Function],
                                    "usesTheme": false,
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                isLoading={false}
                              >
                                <span
                                  className="c4"
                                >
                                  <FontAwesomeIcon
                                    border={false}
                                    className=""
                                    fixedWidth={true}
                                    flip={null}
                                    icon={
                                      Object {
                                        "icon": Array [
                                          256,
                                          512,
                                          Array [],
                                          "f054",
                                          "M24.707 38.101L4.908 57.899c-4.686 4.686-4.686 12.284 0 16.971L185.607 256 4.908 437.13c-4.686 4.686-4.686 12.284 0 16.971L24.707 473.9c4.686 4.686 12.284 4.686 16.971 0l209.414-209.414c4.686-4.686 4.686-12.284 0-16.971L41.678 38.101c-4.687-4.687-12.285-4.687-16.971 0z",
                                        ],
                                        "iconName": "chevron-right",
                                        "prefix": "far",
                                      }
                                    }
                                    inverse={false}
                                    listItem={false}
                                    mask={null}
                                    pull={null}
                                    pulse={false}
                                    rotation={null}
                                    size={null}
                                    spin={false}
                                    swapOpacity={false}
                                    symbol={false}
                                    title=""
                                    transform={null}
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="svg-inline--fa fa-chevron-right fa-w-8 fa-fw "
                                      data-icon="chevron-right"
                                      data-prefix="far"
                                      focusable="false"
                                      role="img"
                                      style={Object {}}
                                      viewBox="0 0 256 512"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M24.707 38.101L4.908 57.899c-4.686 4.686-4.686 12.284 0 16.971L185.607 256 4.908 437.13c-4.686 4.686-4.686 12.284 0 16.971L24.707 473.9c4.686 4.686 12.284 4.686 16.971 0l209.414-209.414c4.686-4.686 4.686-12.284 0-16.971L41.678 38.101c-4.687-4.687-12.285-4.687-16.971 0z"
                                        fill="currentColor"
                                        style={Object {}}
                                      />
                                    </svg>
                                  </FontAwesomeIcon>
                                </span>
                              </StyledComponent>
                            </Content>
                          </span>
                        </StyledComponent>
                      </ContentWrapper>
                    </button>
                  </StyledComponent>
                </StyledButton>
              </Button>
            </IconButton>
          </div>
        </StyledComponent>
      </styled__PaginationWrapper>
    </PaginationToolbar>
    <styled__StyledTable>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__StyledTable-r3xwjs-0",
              "isStatic": false,
              "lastClassName": "c5",
              "rules": Array [
                "background-color:",
                "#ffffff",
                ";border-collapse:collapse;border:none;table-layout:fixed;width:100%;",
              ],
            },
            "displayName": "styled__StyledTable",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__StyledTable-r3xwjs-0",
            "target": "table",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <table
          className="c5"
        >
          <TableHeader
            components={
              Object {
                "Body": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": null,
                  "type": [Function],
                },
                "Cell": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styled__Cell-r3xwjs-2",
                    "isStatic": false,
                    "lastClassName": "c11",
                    "rules": Array [
                      [Function],
                    ],
                  },
                  "displayName": "Cell",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styled__Cell-r3xwjs-2",
                  "target": "td",
                  "toString": [Function],
                  "usesTheme": false,
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
                "HeadCell": [Function],
                "Header": [Function],
                "Pagination": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": null,
                  "type": [Function],
                },
                "Row": [Function],
              }
            }
            headers={
              Array [
                Object {
                  "cellStyle": Object {
                    "width": "33%",
                  },
                  "key": "name",
                  "label": "Subject Name",
                },
                Object {
                  "key": "dob",
                  "label": "Date of Birth",
                },
                Object {
                  "key": "manager",
                  "label": "Manager",
                },
                Object {
                  "key": "lastUpdated",
                  "label": "Last Updated",
                },
                Object {
                  "key": "id",
                  "label": "ID",
                  "sortable": false,
                },
              ]
            }
            onSort={[Function]}
            order={false}
            sticky={true}
          >
            <thead>
              <styled__StyledRow
                sticky={true}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styled__StyledRow-r3xwjs-3",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "background-color:",
                          "#ffffff",
                          ";border-bottom:1px solid ",
                          "#dcdce7",
                          ";td,th{",
                          [Function],
                          "};",
                        ],
                      },
                      "displayName": "styled__StyledRow",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styled__StyledRow-r3xwjs-3",
                      "target": "tr",
                      "toString": [Function],
                      "usesTheme": false,
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  sticky={true}
                >
                  <tr
                    className="c6"
                  >
                    <HeadCell
                      cellStyle={
                        Object {
                          "width": "33%",
                        }
                      }
                      components={
                        Object {
                          "Body": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Cell": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "styled__Cell-r3xwjs-2",
                              "isStatic": false,
                              "lastClassName": "c11",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Cell",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "styled__Cell-r3xwjs-2",
                            "target": "td",
                            "toString": [Function],
                            "usesTheme": false,
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                          "HeadCell": [Function],
                          "Header": [Function],
                          "Pagination": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Row": [Function],
                        }
                      }
                      key="name"
                      onClick={[Function]}
                      order={false}
                      sortable={true}
                    >
                      <Cell
                        as="th"
                        cellStyle={
                          Object {
                            "width": "33%",
                          }
                        }
                        onClick={[Function]}
                      >
                        <StyledComponent
                          as="th"
                          cellStyle={
                            Object {
                              "width": "33%",
                            }
                          }
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "styled__Cell-r3xwjs-2",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "Cell",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "styled__Cell-r3xwjs-2",
                              "target": "td",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <th
                            className="c7"
                            onClick={[Function]}
                          >
                            Subject Name
                            <span>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={true}
                                flip={null}
                                icon={
                                  Object {
                                    "icon": Array [
                                      320,
                                      512,
                                      Array [],
                                      "f0dc",
                                      Array [
                                        "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                        "",
                                      ],
                                    ],
                                    "iconName": "sort",
                                    "prefix": "fad",
                                  }
                                }
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                swapOpacity={false}
                                symbol={false}
                                title=""
                                transform={null}
                              >
                                <svg
                                  aria-hidden="true"
                                  className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                                  data-icon="sort"
                                  data-prefix="fad"
                                  focusable="false"
                                  role="img"
                                  style={Object {}}
                                  viewBox="0 0 320 512"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <g
                                    className="fa-group"
                                    style={Object {}}
                                  >
                                    <path
                                      className="fa-secondary"
                                      d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                      fill="currentColor"
                                      style={Object {}}
                                    />
                                    <path
                                      className="fa-primary"
                                      d=""
                                      fill="currentColor"
                                      style={Object {}}
                                    />
                                  </g>
                                </svg>
                              </FontAwesomeIcon>
                            </span>
                          </th>
                        </StyledComponent>
                      </Cell>
                    </HeadCell>
                    <HeadCell
                      cellStyle={Object {}}
                      components={
                        Object {
                          "Body": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Cell": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "styled__Cell-r3xwjs-2",
                              "isStatic": false,
                              "lastClassName": "c11",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Cell",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "styled__Cell-r3xwjs-2",
                            "target": "td",
                            "toString": [Function],
                            "usesTheme": false,
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                          "HeadCell": [Function],
                          "Header": [Function],
                          "Pagination": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Row": [Function],
                        }
                      }
                      key="dob"
                      onClick={[Function]}
                      order={false}
                      sortable={true}
                    >
                      <Cell
                        as="th"
                        cellStyle={Object {}}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          as="th"
                          cellStyle={Object {}}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "styled__Cell-r3xwjs-2",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "Cell",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "styled__Cell-r3xwjs-2",
                              "target": "td",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <th
                            className="c8"
                            onClick={[Function]}
                          >
                            Date of Birth
                            <span>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={true}
                                flip={null}
                                icon={
                                  Object {
                                    "icon": Array [
                                      320,
                                      512,
                                      Array [],
                                      "f0dc",
                                      Array [
                                        "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                        "",
                                      ],
                                    ],
                                    "iconName": "sort",
                                    "prefix": "fad",
                                  }
                                }
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                swapOpacity={false}
                                symbol={false}
                                title=""
                                transform={null}
                              >
                                <svg
                                  aria-hidden="true"
                                  className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                                  data-icon="sort"
                                  data-prefix="fad"
                                  focusable="false"
                                  role="img"
                                  style={Object {}}
                                  viewBox="0 0 320 512"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <g
                                    className="fa-group"
                                    style={Object {}}
                                  >
                                    <path
                                      className="fa-secondary"
                                      d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                      fill="currentColor"
                                      style={Object {}}
                                    />
                                    <path
                                      className="fa-primary"
                                      d=""
                                      fill="currentColor"
                                      style={Object {}}
                                    />
                                  </g>
                                </svg>
                              </FontAwesomeIcon>
                            </span>
                          </th>
                        </StyledComponent>
                      </Cell>
                    </HeadCell>
                    <HeadCell
                      cellStyle={Object {}}
                      components={
                        Object {
                          "Body": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Cell": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "styled__Cell-r3xwjs-2",
                              "isStatic": false,
                              "lastClassName": "c11",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Cell",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "styled__Cell-r3xwjs-2",
                            "target": "td",
                            "toString": [Function],
                            "usesTheme": false,
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                          "HeadCell": [Function],
                          "Header": [Function],
                          "Pagination": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Row": [Function],
                        }
                      }
                      key="manager"
                      onClick={[Function]}
                      order={false}
                      sortable={true}
                    >
                      <Cell
                        as="th"
                        cellStyle={Object {}}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          as="th"
                          cellStyle={Object {}}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "styled__Cell-r3xwjs-2",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "Cell",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "styled__Cell-r3xwjs-2",
                              "target": "td",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <th
                            className="c8"
                            onClick={[Function]}
                          >
                            Manager
                            <span>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={true}
                                flip={null}
                                icon={
                                  Object {
                                    "icon": Array [
                                      320,
                                      512,
                                      Array [],
                                      "f0dc",
                                      Array [
                                        "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                        "",
                                      ],
                                    ],
                                    "iconName": "sort",
                                    "prefix": "fad",
                                  }
                                }
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                swapOpacity={false}
                                symbol={false}
                                title=""
                                transform={null}
                              >
                                <svg
                                  aria-hidden="true"
                                  className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                                  data-icon="sort"
                                  data-prefix="fad"
                                  focusable="false"
                                  role="img"
                                  style={Object {}}
                                  viewBox="0 0 320 512"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <g
                                    className="fa-group"
                                    style={Object {}}
                                  >
                                    <path
                                      className="fa-secondary"
                                      d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                      fill="currentColor"
                                      style={Object {}}
                                    />
                                    <path
                                      className="fa-primary"
                                      d=""
                                      fill="currentColor"
                                      style={Object {}}
                                    />
                                  </g>
                                </svg>
                              </FontAwesomeIcon>
                            </span>
                          </th>
                        </StyledComponent>
                      </Cell>
                    </HeadCell>
                    <HeadCell
                      cellStyle={Object {}}
                      components={
                        Object {
                          "Body": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Cell": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "styled__Cell-r3xwjs-2",
                              "isStatic": false,
                              "lastClassName": "c11",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Cell",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "styled__Cell-r3xwjs-2",
                            "target": "td",
                            "toString": [Function],
                            "usesTheme": false,
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                          "HeadCell": [Function],
                          "Header": [Function],
                          "Pagination": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Row": [Function],
                        }
                      }
                      key="lastUpdated"
                      onClick={[Function]}
                      order={false}
                      sortable={true}
                    >
                      <Cell
                        as="th"
                        cellStyle={Object {}}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          as="th"
                          cellStyle={Object {}}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "styled__Cell-r3xwjs-2",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "Cell",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "styled__Cell-r3xwjs-2",
                              "target": "td",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <th
                            className="c8"
                            onClick={[Function]}
                          >
                            Last Updated
                            <span>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={true}
                                flip={null}
                                icon={
                                  Object {
                                    "icon": Array [
                                      320,
                                      512,
                                      Array [],
                                      "f0dc",
                                      Array [
                                        "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                        "",
                                      ],
                                    ],
                                    "iconName": "sort",
                                    "prefix": "fad",
                                  }
                                }
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                swapOpacity={false}
                                symbol={false}
                                title=""
                                transform={null}
                              >
                                <svg
                                  aria-hidden="true"
                                  className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                                  data-icon="sort"
                                  data-prefix="fad"
                                  focusable="false"
                                  role="img"
                                  style={Object {}}
                                  viewBox="0 0 320 512"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <g
                                    className="fa-group"
                                    style={Object {}}
                                  >
                                    <path
                                      className="fa-secondary"
                                      d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                      fill="currentColor"
                                      style={Object {}}
                                    />
                                    <path
                                      className="fa-primary"
                                      d=""
                                      fill="currentColor"
                                      style={Object {}}
                                    />
                                  </g>
                                </svg>
                              </FontAwesomeIcon>
                            </span>
                          </th>
                        </StyledComponent>
                      </Cell>
                    </HeadCell>
                    <HeadCell
                      cellStyle={Object {}}
                      components={
                        Object {
                          "Body": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Cell": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "styled__Cell-r3xwjs-2",
                              "isStatic": false,
                              "lastClassName": "c11",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Cell",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "styled__Cell-r3xwjs-2",
                            "target": "td",
                            "toString": [Function],
                            "usesTheme": false,
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          },
                          "HeadCell": [Function],
                          "Header": [Function],
                          "Pagination": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "type": [Function],
                          },
                          "Row": [Function],
                        }
                      }
                      key="id"
                      order={false}
                      sortable={false}
                    >
                      <Cell
                        as="th"
                        cellStyle={Object {}}
                      >
                        <StyledComponent
                          as="th"
                          cellStyle={Object {}}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "styled__Cell-r3xwjs-2",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "Cell",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "styled__Cell-r3xwjs-2",
                              "target": "td",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <th
                            className="c9"
                          >
                            ID
                          </th>
                        </StyledComponent>
                      </Cell>
                    </HeadCell>
                  </tr>
                </StyledComponent>
              </styled__StyledRow>
            </thead>
          </TableHeader>
          <TableBody
            components={
              Object {
                "Body": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": null,
                  "type": [Function],
                },
                "Cell": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styled__Cell-r3xwjs-2",
                    "isStatic": false,
                    "lastClassName": "c11",
                    "rules": Array [
                      [Function],
                    ],
                  },
                  "displayName": "Cell",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styled__Cell-r3xwjs-2",
                  "target": "td",
                  "toString": [Function],
                  "usesTheme": false,
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
                "HeadCell": [Function],
                "Header": [Function],
                "Pagination": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": null,
                  "type": [Function],
                },
                "Row": [Function],
              }
            }
            data={
              Array [
                Object {
                  "dob": "1942-11-30",
                  "id": "1",
                  "lastUpdated": "2019-09-01",
                  "manager": "Spongebob",
                  "name": "Eugene Krabs",
                },
                Object {
                  "dob": "",
                  "id": "2",
                  "lastUpdated": "2019-08-29",
                  "manager": "Smitty",
                  "name": "Squidward Tentacles",
                },
                Object {
                  "dob": "1987-11-17",
                  "id": "3",
                  "lastUpdated": "2019-07-30",
                  "manager": "Patrick",
                  "name": "Sandy Cheeks",
                },
                Object {
                  "dob": "1975-06-23",
                  "id": "4",
                  "lastUpdated": "2019-08-16",
                  "manager": "Patchy",
                  "name": "Larry the Lobster",
                },
                Object {
                  "dob": "1942-11-30",
                  "id": "5",
                  "lastUpdated": "2019-08-20",
                  "manager": "Spongebob",
                  "name": "Sheldon Plankton",
                },
                Object {
                  "dob": "",
                  "id": "6",
                  "lastUpdated": "2019-08-21",
                  "manager": "Spongebob",
                  "name": "Mrs. Puff",
                },
                Object {
                  "dob": "1678-04-20",
                  "id": "7",
                  "lastUpdated": "2019-06-21",
                  "manager": "Spongebob",
                  "name": "Flying Dutchman",
                },
              ]
            }
            headers={
              Array [
                Object {
                  "cellStyle": Object {
                    "width": "33%",
                  },
                  "key": "name",
                  "label": "Subject Name",
                },
                Object {
                  "key": "dob",
                  "label": "Date of Birth",
                },
                Object {
                  "key": "manager",
                  "label": "Manager",
                },
                Object {
                  "key": "lastUpdated",
                  "label": "Last Updated",
                },
                Object {
                  "key": "id",
                  "label": "ID",
                  "sortable": false,
                },
              ]
            }
            rowsPerPage={7}
          >
            <tbody>
              <styled__StyledRow
                id="empty-row-filler"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styled__StyledRow-r3xwjs-3",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "background-color:",
                          "#ffffff",
                          ";border-bottom:1px solid ",
                          "#dcdce7",
                          ";td,th{",
                          [Function],
                          "};",
                        ],
                      },
                      "displayName": "styled__StyledRow",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styled__StyledRow-r3xwjs-3",
                      "target": "tr",
                      "toString": [Function],
                      "usesTheme": false,
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  id="empty-row-filler"
                >
                  <tr
                    className="c10"
                    id="empty-row-filler"
                  >
                    <Cell
                      cellStyle={
                        Object {
                          "height": "294px",
                        }
                      }
                      colSpan={5}
                    >
                      <StyledComponent
                        cellStyle={
                          Object {
                            "height": "294px",
                          }
                        }
                        colSpan={5}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "styled__Cell-r3xwjs-2",
                              "isStatic": false,
                              "lastClassName": "c11",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Cell",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "styled__Cell-r3xwjs-2",
                            "target": "td",
                            "toString": [Function],
                            "usesTheme": false,
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <td
                          className="c11"
                          colSpan={5}
                        />
                      </StyledComponent>
                    </Cell>
                  </tr>
                </StyledComponent>
              </styled__StyledRow>
            </tbody>
          </TableBody>
        </table>
      </StyledComponent>
    </styled__StyledTable>
    <PaginationToolbar
      count={7}
      rowsPerPage={7}
      rowsPerPageOptions={Array []}
      setPage={
        [MockFunction] {
          "calls": Array [
            Array [
              0,
            ],
            Array [
              7,
            ],
            Array [
              "desc",
            ],
            Array [
              "name",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      setRowsPerPage={
        [MockFunction] {
          "calls": Array [
            Array [
              0,
            ],
            Array [
              7,
            ],
            Array [
              "desc",
            ],
            Array [
              "name",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
    >
      <styled__PaginationWrapper>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styled__PaginationWrapper-r3xwjs-1",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  "align-items:center;display:flex;justify-content:flex-end;width:100%;",
                ],
              },
              "displayName": "styled__PaginationWrapper",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styled__PaginationWrapper-r3xwjs-1",
              "target": "div",
              "toString": [Function],
              "usesTheme": false,
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0"
          >
            <Label
              subtle={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Label-sc-130fyca-0",
                      "isStatic": false,
                      "lastClassName": "c1",
                      "rules": Array [
                        "color:",
                        "#555e6f",
                        ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                        [Function],
                        ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                        [Function],
                        ";",
                        [Function],
                        ";",
                        [Function],
                        ";",
                      ],
                    },
                    "displayName": "Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Label-sc-130fyca-0",
                    "target": "label",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                subtle={true}
              >
                <label
                  className="c1"
                >
                  Rows per page
                </label>
              </StyledComponent>
            </Label>
            <Label
              id="row-range"
              subtle={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Label-sc-130fyca-0",
                      "isStatic": false,
                      "lastClassName": "c1",
                      "rules": Array [
                        "color:",
                        "#555e6f",
                        ";display:inline-block;font-size:14px;font-stretch:normal;font-style:normal;font-weight:",
                        [Function],
                        ";letter-spacing:normal;margin:5px 5px 5px 0;visibility:",
                        [Function],
                        ";",
                        [Function],
                        ";",
                        [Function],
                        ";",
                      ],
                    },
                    "displayName": "Label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Label-sc-130fyca-0",
                    "target": "label",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                id="row-range"
                subtle={true}
              >
                <label
                  className="c1"
                  id="row-range"
                >
                  1 - 7 of 7
                </label>
              </StyledComponent>
            </Label>
            <IconButton
              disabled={true}
              icon={
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [
                        256,
                        512,
                        Array [],
                        "f053",
                        "M231.293 473.899l19.799-19.799c4.686-4.686 4.686-12.284 0-16.971L70.393 256 251.092 74.87c4.686-4.686 4.686-12.284 0-16.971L231.293 38.1c-4.686-4.686-12.284-4.686-16.971 0L4.908 247.515c-4.686 4.686-4.686 12.284 0 16.971L214.322 473.9c4.687 4.686 12.285 4.686 16.971-.001z",
                      ],
                      "iconName": "chevron-left",
                      "prefix": "far",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                />
              }
              mode="subtle"
              onClick={[Function]}
            >
              <Button
                disabled={true}
                fontColor=""
                isLoading={false}
                mode="subtle"
                onClick={[Function]}
                type="button"
              >
                <StyledButton
                  disabled={true}
                  fontColor=""
                  mode="subtle"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    disabled={true}
                    fontColor=""
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "StyledButton-sc-1etazn9-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                            "100ms",
                            " ease-out,border-color ",
                            "100ms",
                            " ease-out,box-shadow ",
                            "100ms",
                            " ease-out;width:",
                            [Function],
                            ";white-space:nowrap;",
                            [Function],
                            ";:hover{cursor:pointer;text-decoration:none;",
                            [Function],
                            "};:active{text-decoration:none;",
                            [Function],
                            "};:disabled{cursor:not-allowed;text-decoration:none;",
                            [Function],
                            "};:focus-visible{",
                            [Function],
                            "}",
                          ],
                        },
                        "displayName": "StyledButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "StyledButton-sc-1etazn9-0",
                        "target": "button",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    mode="subtle"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="c2"
                      disabled={true}
                      mode="subtle"
                      onClick={[Function]}
                      type="button"
                    >
                      <ContentWrapper>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "ContentWrapper-sc-36hfub-0",
                                "isStatic": false,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                ],
                              },
                              "displayName": "ContentWrapper",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "ContentWrapper-sc-36hfub-0",
                              "target": "span",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="c3"
                          >
                            <Content
                              isLoading={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Content-sc-18psqsj-0",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "flex:1 1 auto;opacity:",
                                        [Function],
                                        ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                      ],
                                    },
                                    "displayName": "Content",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Content-sc-18psqsj-0",
                                    "target": "span",
                                    "toString": [Function],
                                    "usesTheme": false,
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                isLoading={false}
                              >
                                <span
                                  className="c4"
                                >
                                  <FontAwesomeIcon
                                    border={false}
                                    className=""
                                    fixedWidth={true}
                                    flip={null}
                                    icon={
                                      Object {
                                        "icon": Array [
                                          256,
                                          512,
                                          Array [],
                                          "f053",
                                          "M231.293 473.899l19.799-19.799c4.686-4.686 4.686-12.284 0-16.971L70.393 256 251.092 74.87c4.686-4.686 4.686-12.284 0-16.971L231.293 38.1c-4.686-4.686-12.284-4.686-16.971 0L4.908 247.515c-4.686 4.686-4.686 12.284 0 16.971L214.322 473.9c4.687 4.686 12.285 4.686 16.971-.001z",
                                        ],
                                        "iconName": "chevron-left",
                                        "prefix": "far",
                                      }
                                    }
                                    inverse={false}
                                    listItem={false}
                                    mask={null}
                                    pull={null}
                                    pulse={false}
                                    rotation={null}
                                    size={null}
                                    spin={false}
                                    swapOpacity={false}
                                    symbol={false}
                                    title=""
                                    transform={null}
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="svg-inline--fa fa-chevron-left fa-w-8 fa-fw "
                                      data-icon="chevron-left"
                                      data-prefix="far"
                                      focusable="false"
                                      role="img"
                                      style={Object {}}
                                      viewBox="0 0 256 512"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M231.293 473.899l19.799-19.799c4.686-4.686 4.686-12.284 0-16.971L70.393 256 251.092 74.87c4.686-4.686 4.686-12.284 0-16.971L231.293 38.1c-4.686-4.686-12.284-4.686-16.971 0L4.908 247.515c-4.686 4.686-4.686 12.284 0 16.971L214.322 473.9c4.687 4.686 12.285 4.686 16.971-.001z"
                                        fill="currentColor"
                                        style={Object {}}
                                      />
                                    </svg>
                                  </FontAwesomeIcon>
                                </span>
                              </StyledComponent>
                            </Content>
                          </span>
                        </StyledComponent>
                      </ContentWrapper>
                    </button>
                  </StyledComponent>
                </StyledButton>
              </Button>
            </IconButton>
            <IconButton
              disabled={true}
              icon={
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [
                        256,
                        512,
                        Array [],
                        "f054",
                        "M24.707 38.101L4.908 57.899c-4.686 4.686-4.686 12.284 0 16.971L185.607 256 4.908 437.13c-4.686 4.686-4.686 12.284 0 16.971L24.707 473.9c4.686 4.686 12.284 4.686 16.971 0l209.414-209.414c4.686-4.686 4.686-12.284 0-16.971L41.678 38.101c-4.687-4.687-12.285-4.687-16.971 0z",
                      ],
                      "iconName": "chevron-right",
                      "prefix": "far",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                />
              }
              mode="subtle"
              onClick={[Function]}
            >
              <Button
                disabled={true}
                fontColor=""
                isLoading={false}
                mode="subtle"
                onClick={[Function]}
                type="button"
              >
                <StyledButton
                  disabled={true}
                  fontColor=""
                  mode="subtle"
                  onClick={[Function]}
                  type="button"
                >
                  <StyledComponent
                    disabled={true}
                    fontColor=""
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "StyledButton-sc-1etazn9-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                            "100ms",
                            " ease-out,border-color ",
                            "100ms",
                            " ease-out,box-shadow ",
                            "100ms",
                            " ease-out;width:",
                            [Function],
                            ";white-space:nowrap;",
                            [Function],
                            ";:hover{cursor:pointer;text-decoration:none;",
                            [Function],
                            "};:active{text-decoration:none;",
                            [Function],
                            "};:disabled{cursor:not-allowed;text-decoration:none;",
                            [Function],
                            "};:focus-visible{",
                            [Function],
                            "}",
                          ],
                        },
                        "displayName": "StyledButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "StyledButton-sc-1etazn9-0",
                        "target": "button",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    mode="subtle"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="c2"
                      disabled={true}
                      mode="subtle"
                      onClick={[Function]}
                      type="button"
                    >
                      <ContentWrapper>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "ContentWrapper-sc-36hfub-0",
                                "isStatic": false,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                ],
                              },
                              "displayName": "ContentWrapper",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "ContentWrapper-sc-36hfub-0",
                              "target": "span",
                              "toString": [Function],
                              "usesTheme": false,
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="c3"
                          >
                            <Content
                              isLoading={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Content-sc-18psqsj-0",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "flex:1 1 auto;opacity:",
                                        [Function],
                                        ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                      ],
                                    },
                                    "displayName": "Content",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Content-sc-18psqsj-0",
                                    "target": "span",
                                    "toString": [Function],
                                    "usesTheme": false,
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                isLoading={false}
                              >
                                <span
                                  className="c4"
                                >
                                  <FontAwesomeIcon
                                    border={false}
                                    className=""
                                    fixedWidth={true}
                                    flip={null}
                                    icon={
                                      Object {
                                        "icon": Array [
                                          256,
                                          512,
                                          Array [],
                                          "f054",
                                          "M24.707 38.101L4.908 57.899c-4.686 4.686-4.686 12.284 0 16.971L185.607 256 4.908 437.13c-4.686 4.686-4.686 12.284 0 16.971L24.707 473.9c4.686 4.686 12.284 4.686 16.971 0l209.414-209.414c4.686-4.686 4.686-12.284 0-16.971L41.678 38.101c-4.687-4.687-12.285-4.687-16.971 0z",
                                        ],
                                        "iconName": "chevron-right",
                                        "prefix": "far",
                                      }
                                    }
                                    inverse={false}
                                    listItem={false}
                                    mask={null}
                                    pull={null}
                                    pulse={false}
                                    rotation={null}
                                    size={null}
                                    spin={false}
                                    swapOpacity={false}
                                    symbol={false}
                                    title=""
                                    transform={null}
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="svg-inline--fa fa-chevron-right fa-w-8 fa-fw "
                                      data-icon="chevron-right"
                                      data-prefix="far"
                                      focusable="false"
                                      role="img"
                                      style={Object {}}
                                      viewBox="0 0 256 512"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M24.707 38.101L4.908 57.899c-4.686 4.686-4.686 12.284 0 16.971L185.607 256 4.908 437.13c-4.686 4.686-4.686 12.284 0 16.971L24.707 473.9c4.686 4.686 12.284 4.686 16.971 0l209.414-209.414c4.686-4.686 4.686-12.284 0-16.971L41.678 38.101c-4.687-4.687-12.285-4.687-16.971 0z"
                                        fill="currentColor"
                                        style={Object {}}
                                      />
                                    </svg>
                                  </FontAwesomeIcon>
                                </span>
                              </StyledComponent>
                            </Content>
                          </span>
                        </StyledComponent>
                      </ContentWrapper>
                    </button>
                  </StyledComponent>
                </StyledButton>
              </Button>
            </IconButton>
          </div>
        </StyledComponent>
      </styled__PaginationWrapper>
    </PaginationToolbar>
  </div>
</Table>
`;

exports[`Table props paginated Table should set rowsPerPage to data.length when data is provided 1`] = `
<div>
  <styled__StyledTable>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
        ]
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      rowsPerPage={7}
    />
  </styled__StyledTable>
</div>
`;

exports[`Table props paginated paginated Table should set rowsPerPage to 5 by default 1`] = `
<div>
  <Memo(PaginationToolbar)
    count={0}
    rowsPerPage={5}
    rowsPerPageOptions={Array []}
    setPage={[Function]}
    setRowsPerPage={[Function]}
  />
  <styled__StyledTable>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={Array []}
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      rowsPerPage={5}
    />
  </styled__StyledTable>
  <Memo(PaginationToolbar)
    count={0}
    rowsPerPage={5}
    rowsPerPageOptions={Array []}
    setPage={[Function]}
    setRowsPerPage={[Function]}
  />
</div>
`;

exports[`Table props paginated paginated Table should set rowsPerPage to data.length when data is provided 1`] = `
<div>
  <Memo(PaginationToolbar)
    count={7}
    rowsPerPage={7}
    rowsPerPageOptions={Array []}
    setPage={[Function]}
    setRowsPerPage={[Function]}
  />
  <styled__StyledTable>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
        ]
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      rowsPerPage={7}
    />
  </styled__StyledTable>
  <Memo(PaginationToolbar)
    count={7}
    rowsPerPage={7}
    rowsPerPageOptions={Array []}
    setPage={[Function]}
    setRowsPerPage={[Function]}
  />
</div>
`;

exports[`Table props paginated paginated Table should set rowsPerPage to first element of rowsPerPageOptions when provided 1`] = `
<div>
  <Memo(PaginationToolbar)
    count={7}
    rowsPerPage={10}
    rowsPerPageOptions={
      Array [
        10,
        20,
        100,
      ]
    }
    setPage={[Function]}
    setRowsPerPage={[Function]}
  />
  <styled__StyledTable>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
        ]
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      rowsPerPage={10}
    />
  </styled__StyledTable>
  <Memo(PaginationToolbar)
    count={7}
    rowsPerPage={10}
    rowsPerPageOptions={
      Array [
        10,
        20,
        100,
      ]
    }
    setPage={[Function]}
    setRowsPerPage={[Function]}
  />
</div>
`;

exports[`Table props paginated paginated=true should render PaginationToolbar 1`] = `
<div>
  <Memo(PaginationToolbar)
    count={7}
    rowsPerPage={7}
    rowsPerPageOptions={Array []}
    setPage={[Function]}
    setRowsPerPage={[Function]}
  />
  <styled__StyledTable>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
        ]
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      rowsPerPage={7}
    />
  </styled__StyledTable>
  <Memo(PaginationToolbar)
    count={7}
    rowsPerPage={7}
    rowsPerPageOptions={Array []}
    setPage={[Function]}
    setRowsPerPage={[Function]}
  />
</div>
`;

exports[`Table render should render table first child 1`] = `
<div>
  <styled__StyledTable>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "lastClassName": "dmTbmI",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "styled__Cell-r3xwjs-2",
              "isStatic": false,
              "lastClassName": "dmTbmI",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "styled__Cell-r3xwjs-2",
            "target": "td",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
        ]
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      rowsPerPage={7}
    />
  </styled__StyledTable>
</div>
`;
