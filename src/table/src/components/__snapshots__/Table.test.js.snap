// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Table handlePageChange should invoke onPageChange on pagination button click 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "column": undefined,
        "order": undefined,
        "page": 2,
        "rowsPerPage": 9,
        "start": 9,
      },
      Object {
        "target": "mock",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Table handlePageChange should invoke onPageChange on pagination button click 2`] = `
.c1 {
  background-color: white;
  border-collapse: collapse;
  border: none;
  table-layout: fixed;
  width: 100%;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  width: 100%;
  margin: 8px 0;
}

.c3 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
  width: 33%;
}

.c4 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c5 {
  background-color: #f9f9fc;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c7 {
  background-color: inherit;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c2 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

.c2 td,
.c2 th {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 200;
}

.c6 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

<Table
  data={
    Array [
      Object {
        "dob": "1942-11-30",
        "id": "1",
        "lastUpdated": "2019-09-01",
        "manager": "Spongebob",
        "name": "Eugene Krabs",
      },
      Object {
        "dob": "",
        "id": "2",
        "lastUpdated": "2019-08-29",
        "manager": "Smitty",
        "name": "Squidward Tentacles",
      },
      Object {
        "dob": "1987-11-17",
        "id": "3",
        "lastUpdated": "2019-07-30",
        "manager": "Patrick",
        "name": "Sandy Cheeks",
      },
      Object {
        "dob": "1975-06-23",
        "id": "4",
        "lastUpdated": "2019-08-16",
        "manager": "Patchy",
        "name": "Larry the Lobster",
      },
      Object {
        "dob": "1942-11-30",
        "id": "5",
        "lastUpdated": "2019-08-20",
        "manager": "Spongebob",
        "name": "Sheldon Plankton",
      },
      Object {
        "dob": "",
        "id": "6",
        "lastUpdated": "2019-08-21",
        "manager": "Spongebob",
        "name": "Mrs. Puff",
      },
      Object {
        "dob": "1678-04-20",
        "id": "7",
        "lastUpdated": "2019-06-21",
        "manager": "Spongebob",
        "name": "Flying Dutchman",
      },
      Object {
        "dob": "1999-07-17",
        "id": "8",
        "lastUpdated": "2019-06-21",
        "manager": "Eugene Krabs",
        "name": "Spongebob Squarepants",
      },
      Object {
        "dob": "1984-03-17",
        "id": "9",
        "lastUpdated": "2019-06-21",
        "manager": "N/A",
        "name": "Patrick Star",
      },
    ]
  }
  headers={
    Array [
      Object {
        "cellStyle": Object {
          "width": "33%",
        },
        "key": "name",
        "label": "Subject Name",
      },
      Object {
        "key": "dob",
        "label": "Date of Birth",
      },
      Object {
        "key": "manager",
        "label": "Manager",
      },
      Object {
        "key": "lastUpdated",
        "label": "Last Updated",
      },
      Object {
        "key": "id",
        "label": "ID",
        "sortable": false,
      },
    ]
  }
  onPageChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "column": undefined,
            "order": undefined,
            "page": 2,
            "rowsPerPage": 9,
            "start": 9,
          },
          Object {
            "target": "mock",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  paginated={true}
>
  <div>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={9}
      rowsPerPageOptions={Array []}
    >
      <styled.div>
        <div
          className="c0"
        >
          <WithStyles(ForwardRef(Pagination))
            count={1}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={1}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
    <styled.table>
      <table
        className="c1"
      >
        <TableHeader
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          onSort={[Function]}
          order={false}
          sticky={true}
        >
          <thead>
            <styled.tr
              sticky={true}
            >
              <tr
                className="c2"
              >
                <HeadCell
                  cellStyle={
                    Object {
                      "width": "33%",
                    }
                  }
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="name"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={
                      Object {
                        "width": "33%",
                      }
                    }
                    onClick={[Function]}
                  >
                    <th
                      className="c3"
                      onClick={[Function]}
                    >
                      Subject Name
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="dob"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Date of Birth
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="manager"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Manager
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="lastUpdated"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Last Updated
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="id"
                  order={false}
                  sortable={false}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                  >
                    <th
                      className="c5"
                    >
                      ID
                    </th>
                  </Cell>
                </HeadCell>
              </tr>
            </styled.tr>
          </thead>
        </TableHeader>
        <TableBody
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          data={
            Array [
              Object {
                "dob": "1942-11-30",
                "id": "1",
                "lastUpdated": "2019-09-01",
                "manager": "Spongebob",
                "name": "Eugene Krabs",
              },
              Object {
                "dob": "",
                "id": "2",
                "lastUpdated": "2019-08-29",
                "manager": "Smitty",
                "name": "Squidward Tentacles",
              },
              Object {
                "dob": "1987-11-17",
                "id": "3",
                "lastUpdated": "2019-07-30",
                "manager": "Patrick",
                "name": "Sandy Cheeks",
              },
              Object {
                "dob": "1975-06-23",
                "id": "4",
                "lastUpdated": "2019-08-16",
                "manager": "Patchy",
                "name": "Larry the Lobster",
              },
              Object {
                "dob": "1942-11-30",
                "id": "5",
                "lastUpdated": "2019-08-20",
                "manager": "Spongebob",
                "name": "Sheldon Plankton",
              },
              Object {
                "dob": "",
                "id": "6",
                "lastUpdated": "2019-08-21",
                "manager": "Spongebob",
                "name": "Mrs. Puff",
              },
              Object {
                "dob": "1678-04-20",
                "id": "7",
                "lastUpdated": "2019-06-21",
                "manager": "Spongebob",
                "name": "Flying Dutchman",
              },
              Object {
                "dob": "1999-07-17",
                "id": "8",
                "lastUpdated": "2019-06-21",
                "manager": "Eugene Krabs",
                "name": "Spongebob Squarepants",
              },
              Object {
                "dob": "1984-03-17",
                "id": "9",
                "lastUpdated": "2019-06-21",
                "manager": "N/A",
                "name": "Patrick Star",
              },
            ]
          }
          exact={false}
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          page={1}
          rowsPerPage={9}
        >
          <tbody>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "1",
                  "lastUpdated": "2019-09-01",
                  "manager": "Spongebob",
                  "name": "Eugene Krabs",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="1"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="1_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-09-01
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      1
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "2",
                  "lastUpdated": "2019-08-29",
                  "manager": "Smitty",
                  "name": "Squidward Tentacles",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="2"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="2_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Squidward Tentacles
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_dob"
                  >
                    <td
                      className="c7"
                    />
                  </Cell>
                  <Cell
                    key="2_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Smitty
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-29
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      2
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1987-11-17",
                  "id": "3",
                  "lastUpdated": "2019-07-30",
                  "manager": "Patrick",
                  "name": "Sandy Cheeks",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="3"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="3_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Sandy Cheeks
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1987-11-17
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Patrick
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-07-30
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      3
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1975-06-23",
                  "id": "4",
                  "lastUpdated": "2019-08-16",
                  "manager": "Patchy",
                  "name": "Larry the Lobster",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="4"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="4_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Larry the Lobster
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1975-06-23
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Patchy
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-16
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      4
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "5",
                  "lastUpdated": "2019-08-20",
                  "manager": "Spongebob",
                  "name": "Sheldon Plankton",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="5"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="5_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Sheldon Plankton
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-20
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      5
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "6",
                  "lastUpdated": "2019-08-21",
                  "manager": "Spongebob",
                  "name": "Mrs. Puff",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="6"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="6_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Mrs. Puff
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_dob"
                  >
                    <td
                      className="c7"
                    />
                  </Cell>
                  <Cell
                    key="6_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-21
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      6
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1678-04-20",
                  "id": "7",
                  "lastUpdated": "2019-06-21",
                  "manager": "Spongebob",
                  "name": "Flying Dutchman",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="7"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="7_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Flying Dutchman
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1678-04-20
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      7
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1999-07-17",
                  "id": "8",
                  "lastUpdated": "2019-06-21",
                  "manager": "Eugene Krabs",
                  "name": "Spongebob Squarepants",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="8"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="8_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob Squarepants
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1999-07-17
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      8
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1984-03-17",
                  "id": "9",
                  "lastUpdated": "2019-06-21",
                  "manager": "N/A",
                  "name": "Patrick Star",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="9"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="9_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Patrick Star
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1984-03-17
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      N/A
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      9
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
          </tbody>
        </TableBody>
      </table>
    </styled.table>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={9}
      rowsPerPageOptions={Array []}
    >
      <styled.div>
        <div
          className="c0"
        >
          <WithStyles(ForwardRef(Pagination))
            count={1}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={1}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
  </div>
</Table>
`;

exports[`Table handlePageChange should invoke onPageChange on rows per page select 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "column": undefined,
        "order": undefined,
        "page": 1,
        "rowsPerPage": 20,
        "start": 0,
      },
      Object {
        "action": "select-option",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Table handlePageChange should invoke onPageChange on rows per page select 2`] = `
.c3 {
  background-color: white;
  border-collapse: collapse;
  border: none;
  table-layout: fixed;
  width: 100%;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  width: 100%;
  margin: 8px 0;
}

.c5 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
  width: 33%;
}

.c6 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c7 {
  background-color: #f9f9fc;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c9 {
  background-color: inherit;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c4 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

.c4 td,
.c4 th {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 200;
}

.c8 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

.c2 {
  font-size: 14px;
  margin-right: 10px;
  width: 75px;
}

.c1 {
  color: #1f1f22;
  display: inline-block;
  font-size: 14px;
  font-stretch: normal;
  font-style: normal;
  font-weight: normal;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  margin: 5px 5px 5px 0;
  color: #717175;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
}

<Table
  data={
    Array [
      Object {
        "dob": "1942-11-30",
        "id": "1",
        "lastUpdated": "2019-09-01",
        "manager": "Spongebob",
        "name": "Eugene Krabs",
      },
      Object {
        "dob": "",
        "id": "2",
        "lastUpdated": "2019-08-29",
        "manager": "Smitty",
        "name": "Squidward Tentacles",
      },
      Object {
        "dob": "1987-11-17",
        "id": "3",
        "lastUpdated": "2019-07-30",
        "manager": "Patrick",
        "name": "Sandy Cheeks",
      },
      Object {
        "dob": "1975-06-23",
        "id": "4",
        "lastUpdated": "2019-08-16",
        "manager": "Patchy",
        "name": "Larry the Lobster",
      },
      Object {
        "dob": "1942-11-30",
        "id": "5",
        "lastUpdated": "2019-08-20",
        "manager": "Spongebob",
        "name": "Sheldon Plankton",
      },
      Object {
        "dob": "",
        "id": "6",
        "lastUpdated": "2019-08-21",
        "manager": "Spongebob",
        "name": "Mrs. Puff",
      },
      Object {
        "dob": "1678-04-20",
        "id": "7",
        "lastUpdated": "2019-06-21",
        "manager": "Spongebob",
        "name": "Flying Dutchman",
      },
      Object {
        "dob": "1999-07-17",
        "id": "8",
        "lastUpdated": "2019-06-21",
        "manager": "Eugene Krabs",
        "name": "Spongebob Squarepants",
      },
      Object {
        "dob": "1984-03-17",
        "id": "9",
        "lastUpdated": "2019-06-21",
        "manager": "N/A",
        "name": "Patrick Star",
      },
    ]
  }
  headers={
    Array [
      Object {
        "cellStyle": Object {
          "width": "33%",
        },
        "key": "name",
        "label": "Subject Name",
      },
      Object {
        "key": "dob",
        "label": "Date of Birth",
      },
      Object {
        "key": "manager",
        "label": "Manager",
      },
      Object {
        "key": "lastUpdated",
        "label": "Last Updated",
      },
      Object {
        "key": "id",
        "label": "ID",
        "sortable": false,
      },
    ]
  }
  onPageChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "column": undefined,
            "order": undefined,
            "page": 1,
            "rowsPerPage": 20,
            "start": 0,
          },
          Object {
            "action": "select-option",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  paginated={true}
  rowsPerPageOptions={
    Array [
      5,
      20,
      50,
    ]
  }
>
  <div>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={5}
      rowsPerPageOptions={
        Array [
          5,
          20,
          50,
        ]
      }
    >
      <styled.div>
        <div
          className="c0"
        >
          <styled.label
            subtle={true}
          >
            <label
              className="c1"
            >
              Rows per page
            </label>
          </styled.label>
          <styled.div>
            <div
              className="c2"
            >
              <Select
                borderless={true}
                defaultValue={
                  Object {
                    "label": "5",
                    "value": 5,
                  }
                }
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "5",
                      "value": 5,
                    },
                    Object {
                      "label": "20",
                      "value": 20,
                    },
                    Object {
                      "label": "50",
                      "value": 50,
                    },
                  ]
                }
                useRawValues={true}
                value={5}
              >
                <SelectController
                  borderless={true}
                  defaultValue={
                    Object {
                      "label": "5",
                      "value": 5,
                    }
                  }
                  hideDropdownIcon={false}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "5",
                        "value": 5,
                      },
                      Object {
                        "label": "20",
                        "value": 20,
                      },
                      Object {
                        "label": "50",
                        "value": 50,
                      },
                    ]
                  }
                  render={[Function]}
                  useRawValues={true}
                  value={5}
                >
                  <StateManager
                    borderless={true}
                    components={
                      Object {
                        "DropdownIndicator": [Function],
                        "Option": [Function],
                        "ValueContainer": [Function],
                      }
                    }
                    defaultInputValue=""
                    defaultMenuIsOpen={false}
                    defaultValue={
                      Object {
                        "label": "5",
                        "value": 5,
                      }
                    }
                    filterOption={[Function]}
                    hideDropdownIcon={false}
                    menuPlacement="auto"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "5",
                          "value": 5,
                        },
                        Object {
                          "label": "20",
                          "value": 20,
                        },
                        Object {
                          "label": "50",
                          "value": 50,
                        },
                      ]
                    }
                    styles={
                      Object {
                        "clearIndicator": [Function],
                        "container": [Function],
                        "control": [Function],
                        "dropdownIndicator": [Function],
                        "indicatorSeparator": [Function],
                        "indicatorsContainer": [Function],
                        "menu": [Function],
                        "menuList": [Function],
                        "menuPortal": [Function],
                        "option": [Function],
                        "singleValue": [Function],
                        "valueContainer": [Function],
                      }
                    }
                    theme={[Function]}
                    value={
                      Object {
                        "label": "5",
                        "value": 5,
                      }
                    }
                  >
                    <Select
                      aria-live="polite"
                      backspaceRemovesValue={true}
                      blurInputOnSelect={true}
                      borderless={true}
                      captureMenuScroll={false}
                      closeMenuOnScroll={false}
                      closeMenuOnSelect={true}
                      components={
                        Object {
                          "DropdownIndicator": [Function],
                          "Option": [Function],
                          "ValueContainer": [Function],
                        }
                      }
                      controlShouldRenderValue={true}
                      escapeClearsValue={false}
                      filterOption={[Function]}
                      formatGroupLabel={[Function]}
                      getOptionLabel={[Function]}
                      getOptionValue={[Function]}
                      hideDropdownIcon={false}
                      inputValue=""
                      isDisabled={false}
                      isLoading={false}
                      isMulti={false}
                      isOptionDisabled={[Function]}
                      isRtl={false}
                      isSearchable={true}
                      loadingMessage={[Function]}
                      maxMenuHeight={300}
                      menuIsOpen={false}
                      menuPlacement="auto"
                      menuPosition="absolute"
                      menuShouldBlockScroll={false}
                      menuShouldScrollIntoView={true}
                      minMenuHeight={140}
                      noOptionsMessage={[Function]}
                      onChange={[Function]}
                      onInputChange={[Function]}
                      onMenuClose={[Function]}
                      onMenuOpen={[Function]}
                      openMenuOnClick={true}
                      openMenuOnFocus={false}
                      options={
                        Array [
                          Object {
                            "label": "5",
                            "value": 5,
                          },
                          Object {
                            "label": "20",
                            "value": 20,
                          },
                          Object {
                            "label": "50",
                            "value": 50,
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      screenReaderStatus={[Function]}
                      styles={
                        Object {
                          "clearIndicator": [Function],
                          "container": [Function],
                          "control": [Function],
                          "dropdownIndicator": [Function],
                          "indicatorSeparator": [Function],
                          "indicatorsContainer": [Function],
                          "menu": [Function],
                          "menuList": [Function],
                          "menuPortal": [Function],
                          "option": [Function],
                          "singleValue": [Function],
                          "valueContainer": [Function],
                        }
                      }
                      tabIndex="0"
                      tabSelectsValue={true}
                      theme={[Function]}
                      value={
                        Object {
                          "label": "5",
                          "value": 5,
                        }
                      }
                    >
                      <SelectContainer
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={true}
                        innerProps={
                          Object {
                            "id": undefined,
                            "onKeyDown": [Function],
                          }
                        }
                        isDisabled={false}
                        isFocused={false}
                        isMulti={false}
                        isRtl={false}
                        options={
                          Array [
                            Object {
                              "label": "5",
                              "value": 5,
                            },
                            Object {
                              "label": "20",
                              "value": 20,
                            },
                            Object {
                              "label": "50",
                              "value": 50,
                            },
                          ]
                        }
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "aria-live": "polite",
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "borderless": true,
                            "captureMenuScroll": false,
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {
                              "DropdownIndicator": [Function],
                              "Option": [Function],
                              "ValueContainer": [Function],
                            },
                            "controlShouldRenderValue": true,
                            "dropdownIcon": undefined,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "hideDropdownIcon": false,
                            "inputIcon": undefined,
                            "inputValue": "",
                            "isDisabled": false,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "auto",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [
                              Object {
                                "label": "5",
                                "value": 5,
                              },
                              Object {
                                "label": "20",
                                "value": 20,
                              },
                              Object {
                                "label": "50",
                                "value": 50,
                              },
                            ],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "styles": Object {
                              "clearIndicator": [Function],
                              "container": [Function],
                              "control": [Function],
                              "dropdownIndicator": [Function],
                              "indicatorSeparator": [Function],
                              "indicatorsContainer": [Function],
                              "menu": [Function],
                              "menuList": [Function],
                              "menuPortal": [Function],
                              "option": [Function],
                              "singleValue": [Function],
                              "valueContainer": [Function],
                            },
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "theme": [Function],
                            "value": Object {
                              "label": "5",
                              "value": 5,
                            },
                          }
                        }
                        setValue={[Function]}
                        theme={
                          Object {
                            "borderRadius": 4,
                            "colors": Object {
                              "danger": "#DE350B",
                              "dangerLight": "#FFBDAD",
                              "neutral0": "hsl(0, 0%, 100%)",
                              "neutral10": "hsl(0, 0%, 90%)",
                              "neutral20": "hsl(0, 0%, 80%)",
                              "neutral30": "hsl(0, 0%, 70%)",
                              "neutral40": "hsl(0, 0%, 60%)",
                              "neutral5": "hsl(0, 0%, 95%)",
                              "neutral50": "#56565a",
                              "neutral60": "hsl(0, 0%, 40%)",
                              "neutral70": "hsl(0, 0%, 30%)",
                              "neutral80": "hsl(0, 0%, 20%)",
                              "neutral90": "hsl(0, 0%, 10%)",
                              "primary": "#2684FF",
                              "primary25": "#DEEBFF",
                              "primary50": "#B2D4FF",
                              "primary75": "#4C9AFF",
                            },
                            "spacing": Object {
                              "baseUnit": 4,
                              "controlHeight": 38,
                              "menuGutter": 8,
                            },
                          }
                        }
                      >
                        <EmotionCssPropInternal
                          __EMOTION_LABEL_PLEASE_DO_NOT_USE__="SelectContainer"
                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                          className=""
                          css={
                            Object {
                              "boxSizing": "border-box",
                              "cursor": "default",
                              "direction": null,
                              "label": "container",
                              "pointerEvents": "auto",
                              "position": "relative",
                              "width": "100%",
                            }
                          }
                          onKeyDown={[Function]}
                        >
                          <div
                            className=" css-gprrux-container"
                            onKeyDown={[Function]}
                          >
                            <LiveRegion
                              ariaSelection={null}
                              clearValue={[Function]}
                              cx={[Function]}
                              focusableOptions={Array []}
                              focusedOption={null}
                              focusedValue={null}
                              getStyles={[Function]}
                              getValue={[Function]}
                              hasValue={true}
                              isFocused={false}
                              isMulti={false}
                              isRtl={false}
                              options={
                                Array [
                                  Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                  Object {
                                    "label": "20",
                                    "value": 20,
                                  },
                                  Object {
                                    "label": "50",
                                    "value": 50,
                                  },
                                ]
                              }
                              selectOption={[Function]}
                              selectProps={
                                Object {
                                  "aria-live": "polite",
                                  "backspaceRemovesValue": true,
                                  "blurInputOnSelect": true,
                                  "borderless": true,
                                  "captureMenuScroll": false,
                                  "closeMenuOnScroll": false,
                                  "closeMenuOnSelect": true,
                                  "components": Object {
                                    "DropdownIndicator": [Function],
                                    "Option": [Function],
                                    "ValueContainer": [Function],
                                  },
                                  "controlShouldRenderValue": true,
                                  "dropdownIcon": undefined,
                                  "escapeClearsValue": false,
                                  "filterOption": [Function],
                                  "formatGroupLabel": [Function],
                                  "getOptionLabel": [Function],
                                  "getOptionValue": [Function],
                                  "hideDropdownIcon": false,
                                  "inputIcon": undefined,
                                  "inputValue": "",
                                  "isDisabled": false,
                                  "isLoading": false,
                                  "isMulti": false,
                                  "isOptionDisabled": [Function],
                                  "isRtl": false,
                                  "isSearchable": true,
                                  "loadingMessage": [Function],
                                  "maxMenuHeight": 300,
                                  "menuIsOpen": false,
                                  "menuPlacement": "auto",
                                  "menuPosition": "absolute",
                                  "menuShouldBlockScroll": false,
                                  "menuShouldScrollIntoView": true,
                                  "minMenuHeight": 140,
                                  "noOptionsMessage": [Function],
                                  "onChange": [Function],
                                  "onInputChange": [Function],
                                  "onMenuClose": [Function],
                                  "onMenuOpen": [Function],
                                  "openMenuOnClick": true,
                                  "openMenuOnFocus": false,
                                  "options": Array [
                                    Object {
                                      "label": "5",
                                      "value": 5,
                                    },
                                    Object {
                                      "label": "20",
                                      "value": 20,
                                    },
                                    Object {
                                      "label": "50",
                                      "value": 50,
                                    },
                                  ],
                                  "pageSize": 5,
                                  "placeholder": "Select...",
                                  "screenReaderStatus": [Function],
                                  "styles": Object {
                                    "clearIndicator": [Function],
                                    "container": [Function],
                                    "control": [Function],
                                    "dropdownIndicator": [Function],
                                    "indicatorSeparator": [Function],
                                    "indicatorsContainer": [Function],
                                    "menu": [Function],
                                    "menuList": [Function],
                                    "menuPortal": [Function],
                                    "option": [Function],
                                    "singleValue": [Function],
                                    "valueContainer": [Function],
                                  },
                                  "tabIndex": "0",
                                  "tabSelectsValue": true,
                                  "theme": [Function],
                                  "value": Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                }
                              }
                              selectValue={
                                Array [
                                  Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                ]
                              }
                              setValue={[Function]}
                              theme={
                                Object {
                                  "borderRadius": 4,
                                  "colors": Object {
                                    "danger": "#DE350B",
                                    "dangerLight": "#FFBDAD",
                                    "neutral0": "hsl(0, 0%, 100%)",
                                    "neutral10": "hsl(0, 0%, 90%)",
                                    "neutral20": "hsl(0, 0%, 80%)",
                                    "neutral30": "hsl(0, 0%, 70%)",
                                    "neutral40": "hsl(0, 0%, 60%)",
                                    "neutral5": "hsl(0, 0%, 95%)",
                                    "neutral50": "#56565a",
                                    "neutral60": "hsl(0, 0%, 40%)",
                                    "neutral70": "hsl(0, 0%, 30%)",
                                    "neutral80": "hsl(0, 0%, 20%)",
                                    "neutral90": "hsl(0, 0%, 10%)",
                                    "primary": "#2684FF",
                                    "primary25": "#DEEBFF",
                                    "primary50": "#B2D4FF",
                                    "primary75": "#4C9AFF",
                                  },
                                  "spacing": Object {
                                    "baseUnit": 4,
                                    "controlHeight": 38,
                                    "menuGutter": 8,
                                  },
                                }
                              }
                            >
                              <A11yText
                                aria-atomic="false"
                                aria-live="polite"
                                aria-relevant="additions text"
                              >
                                <EmotionCssPropInternal
                                  __EMOTION_LABEL_PLEASE_DO_NOT_USE__="A11yText"
                                  __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                  aria-atomic="false"
                                  aria-live="polite"
                                  aria-relevant="additions text"
                                  css={
                                    Object {
                                      "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFJIiwiZmlsZSI6IkExMXlUZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgdHlwZSBFbGVtZW50Q29uZmlnIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vLyBBc3Npc3RpdmUgdGV4dCB0byBkZXNjcmliZSB2aXN1YWwgZWxlbWVudHMuIEhpZGRlbiBmb3Igc2lnaHRlZCB1c2Vycy5cbmNvbnN0IEExMXlUZXh0ID0gKHByb3BzOiBFbGVtZW50Q29uZmlnPCdzcGFuJz4pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0= */",
                                      "name": "1f43avz-a11yText-A11yText",
                                      "styles": "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;",
                                      "toString": [Function],
                                    }
                                  }
                                >
                                  <span
                                    aria-atomic="false"
                                    aria-live="polite"
                                    aria-relevant="additions text"
                                    className="css-1f43avz-a11yText-A11yText"
                                  />
                                </EmotionCssPropInternal>
                              </A11yText>
                            </LiveRegion>
                            <Control
                              clearValue={[Function]}
                              cx={[Function]}
                              getStyles={[Function]}
                              getValue={[Function]}
                              hasValue={true}
                              innerProps={
                                Object {
                                  "onMouseDown": [Function],
                                  "onTouchEnd": [Function],
                                }
                              }
                              innerRef={[Function]}
                              isDisabled={false}
                              isFocused={false}
                              isMulti={false}
                              isRtl={false}
                              menuIsOpen={false}
                              options={
                                Array [
                                  Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                  Object {
                                    "label": "20",
                                    "value": 20,
                                  },
                                  Object {
                                    "label": "50",
                                    "value": 50,
                                  },
                                ]
                              }
                              selectOption={[Function]}
                              selectProps={
                                Object {
                                  "aria-live": "polite",
                                  "backspaceRemovesValue": true,
                                  "blurInputOnSelect": true,
                                  "borderless": true,
                                  "captureMenuScroll": false,
                                  "closeMenuOnScroll": false,
                                  "closeMenuOnSelect": true,
                                  "components": Object {
                                    "DropdownIndicator": [Function],
                                    "Option": [Function],
                                    "ValueContainer": [Function],
                                  },
                                  "controlShouldRenderValue": true,
                                  "dropdownIcon": undefined,
                                  "escapeClearsValue": false,
                                  "filterOption": [Function],
                                  "formatGroupLabel": [Function],
                                  "getOptionLabel": [Function],
                                  "getOptionValue": [Function],
                                  "hideDropdownIcon": false,
                                  "inputIcon": undefined,
                                  "inputValue": "",
                                  "isDisabled": false,
                                  "isLoading": false,
                                  "isMulti": false,
                                  "isOptionDisabled": [Function],
                                  "isRtl": false,
                                  "isSearchable": true,
                                  "loadingMessage": [Function],
                                  "maxMenuHeight": 300,
                                  "menuIsOpen": false,
                                  "menuPlacement": "auto",
                                  "menuPosition": "absolute",
                                  "menuShouldBlockScroll": false,
                                  "menuShouldScrollIntoView": true,
                                  "minMenuHeight": 140,
                                  "noOptionsMessage": [Function],
                                  "onChange": [Function],
                                  "onInputChange": [Function],
                                  "onMenuClose": [Function],
                                  "onMenuOpen": [Function],
                                  "openMenuOnClick": true,
                                  "openMenuOnFocus": false,
                                  "options": Array [
                                    Object {
                                      "label": "5",
                                      "value": 5,
                                    },
                                    Object {
                                      "label": "20",
                                      "value": 20,
                                    },
                                    Object {
                                      "label": "50",
                                      "value": 50,
                                    },
                                  ],
                                  "pageSize": 5,
                                  "placeholder": "Select...",
                                  "screenReaderStatus": [Function],
                                  "styles": Object {
                                    "clearIndicator": [Function],
                                    "container": [Function],
                                    "control": [Function],
                                    "dropdownIndicator": [Function],
                                    "indicatorSeparator": [Function],
                                    "indicatorsContainer": [Function],
                                    "menu": [Function],
                                    "menuList": [Function],
                                    "menuPortal": [Function],
                                    "option": [Function],
                                    "singleValue": [Function],
                                    "valueContainer": [Function],
                                  },
                                  "tabIndex": "0",
                                  "tabSelectsValue": true,
                                  "theme": [Function],
                                  "value": Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                }
                              }
                              setValue={[Function]}
                              theme={
                                Object {
                                  "borderRadius": 4,
                                  "colors": Object {
                                    "danger": "#DE350B",
                                    "dangerLight": "#FFBDAD",
                                    "neutral0": "hsl(0, 0%, 100%)",
                                    "neutral10": "hsl(0, 0%, 90%)",
                                    "neutral20": "hsl(0, 0%, 80%)",
                                    "neutral30": "hsl(0, 0%, 70%)",
                                    "neutral40": "hsl(0, 0%, 60%)",
                                    "neutral5": "hsl(0, 0%, 95%)",
                                    "neutral50": "#56565a",
                                    "neutral60": "hsl(0, 0%, 40%)",
                                    "neutral70": "hsl(0, 0%, 30%)",
                                    "neutral80": "hsl(0, 0%, 20%)",
                                    "neutral90": "hsl(0, 0%, 10%)",
                                    "primary": "#2684FF",
                                    "primary25": "#DEEBFF",
                                    "primary50": "#B2D4FF",
                                    "primary75": "#4C9AFF",
                                  },
                                  "spacing": Object {
                                    "baseUnit": 4,
                                    "controlHeight": 38,
                                    "menuGutter": 8,
                                  },
                                }
                              }
                            >
                              <EmotionCssPropInternal
                                __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Control"
                                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                className=""
                                css={
                                  Object {
                                    "&:hover": Object {
                                      "borderColor": "hsl(0, 0%, 70%)",
                                    },
                                    ":hover": Object {
                                      "backgroundColor": "#dfdfe3",
                                      "border": "none",
                                    },
                                    "alignItems": "center",
                                    "backgroundColor": "transparent",
                                    "border": "none",
                                    "borderColor": "hsl(0, 0%, 80%)",
                                    "borderRadius": "3px",
                                    "borderStyle": "solid",
                                    "borderWidth": 1,
                                    "boxShadow": "none",
                                    "boxSizing": "border-box",
                                    "cursor": "default",
                                    "display": "flex",
                                    "flexWrap": "wrap",
                                    "fontSize": "14px",
                                    "justifyContent": "space-between",
                                    "label": "control",
                                    "lineHeight": 1.5,
                                    "minHeight": "40px",
                                    "outline": "0 !important",
                                    "pointerEvents": "auto",
                                    "position": "relative",
                                    "transition": "background-color 0.2s ease-out, border-color 0.2s ease-out",
                                  }
                                }
                                onMouseDown={[Function]}
                                onTouchEnd={[Function]}
                              >
                                <div
                                  className=" css-1cyemx2-control"
                                  onMouseDown={[Function]}
                                  onTouchEnd={[Function]}
                                >
                                  <ValueContainer
                                    clearValue={[Function]}
                                    cx={[Function]}
                                    getStyles={[Function]}
                                    getValue={[Function]}
                                    hasValue={true}
                                    inputIcon={null}
                                    isDisabled={false}
                                    isMulti={false}
                                    isRtl={false}
                                    options={
                                      Array [
                                        Object {
                                          "label": "5",
                                          "value": 5,
                                        },
                                        Object {
                                          "label": "20",
                                          "value": 20,
                                        },
                                        Object {
                                          "label": "50",
                                          "value": 50,
                                        },
                                      ]
                                    }
                                    selectOption={[Function]}
                                    selectProps={
                                      Object {
                                        "aria-live": "polite",
                                        "backspaceRemovesValue": true,
                                        "blurInputOnSelect": true,
                                        "borderless": true,
                                        "captureMenuScroll": false,
                                        "closeMenuOnScroll": false,
                                        "closeMenuOnSelect": true,
                                        "components": Object {
                                          "DropdownIndicator": [Function],
                                          "Option": [Function],
                                          "ValueContainer": [Function],
                                        },
                                        "controlShouldRenderValue": true,
                                        "dropdownIcon": undefined,
                                        "escapeClearsValue": false,
                                        "filterOption": [Function],
                                        "formatGroupLabel": [Function],
                                        "getOptionLabel": [Function],
                                        "getOptionValue": [Function],
                                        "hideDropdownIcon": false,
                                        "inputIcon": undefined,
                                        "inputValue": "",
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "isMulti": false,
                                        "isOptionDisabled": [Function],
                                        "isRtl": false,
                                        "isSearchable": true,
                                        "loadingMessage": [Function],
                                        "maxMenuHeight": 300,
                                        "menuIsOpen": false,
                                        "menuPlacement": "auto",
                                        "menuPosition": "absolute",
                                        "menuShouldBlockScroll": false,
                                        "menuShouldScrollIntoView": true,
                                        "minMenuHeight": 140,
                                        "noOptionsMessage": [Function],
                                        "onChange": [Function],
                                        "onInputChange": [Function],
                                        "onMenuClose": [Function],
                                        "onMenuOpen": [Function],
                                        "openMenuOnClick": true,
                                        "openMenuOnFocus": false,
                                        "options": Array [
                                          Object {
                                            "label": "5",
                                            "value": 5,
                                          },
                                          Object {
                                            "label": "20",
                                            "value": 20,
                                          },
                                          Object {
                                            "label": "50",
                                            "value": 50,
                                          },
                                        ],
                                        "pageSize": 5,
                                        "placeholder": "Select...",
                                        "screenReaderStatus": [Function],
                                        "styles": Object {
                                          "clearIndicator": [Function],
                                          "container": [Function],
                                          "control": [Function],
                                          "dropdownIndicator": [Function],
                                          "indicatorSeparator": [Function],
                                          "indicatorsContainer": [Function],
                                          "menu": [Function],
                                          "menuList": [Function],
                                          "menuPortal": [Function],
                                          "option": [Function],
                                          "singleValue": [Function],
                                          "valueContainer": [Function],
                                        },
                                        "tabIndex": "0",
                                        "tabSelectsValue": true,
                                        "theme": [Function],
                                        "value": Object {
                                          "label": "5",
                                          "value": 5,
                                        },
                                      }
                                    }
                                    setValue={[Function]}
                                    theme={
                                      Object {
                                        "borderRadius": 4,
                                        "colors": Object {
                                          "danger": "#DE350B",
                                          "dangerLight": "#FFBDAD",
                                          "neutral0": "hsl(0, 0%, 100%)",
                                          "neutral10": "hsl(0, 0%, 90%)",
                                          "neutral20": "hsl(0, 0%, 80%)",
                                          "neutral30": "hsl(0, 0%, 70%)",
                                          "neutral40": "hsl(0, 0%, 60%)",
                                          "neutral5": "hsl(0, 0%, 95%)",
                                          "neutral50": "#56565a",
                                          "neutral60": "hsl(0, 0%, 40%)",
                                          "neutral70": "hsl(0, 0%, 30%)",
                                          "neutral80": "hsl(0, 0%, 20%)",
                                          "neutral90": "hsl(0, 0%, 10%)",
                                          "primary": "#2684FF",
                                          "primary25": "#DEEBFF",
                                          "primary50": "#B2D4FF",
                                          "primary75": "#4C9AFF",
                                        },
                                        "spacing": Object {
                                          "baseUnit": 4,
                                          "controlHeight": 38,
                                          "menuGutter": 8,
                                        },
                                      }
                                    }
                                  >
                                    <ValueContainer
                                      clearValue={[Function]}
                                      cx={[Function]}
                                      getStyles={[Function]}
                                      getValue={[Function]}
                                      hasValue={true}
                                      inputIcon={null}
                                      isDisabled={false}
                                      isMulti={false}
                                      isRtl={false}
                                      options={
                                        Array [
                                          Object {
                                            "label": "5",
                                            "value": 5,
                                          },
                                          Object {
                                            "label": "20",
                                            "value": 20,
                                          },
                                          Object {
                                            "label": "50",
                                            "value": 50,
                                          },
                                        ]
                                      }
                                      selectOption={[Function]}
                                      selectProps={
                                        Object {
                                          "aria-live": "polite",
                                          "backspaceRemovesValue": true,
                                          "blurInputOnSelect": true,
                                          "borderless": true,
                                          "captureMenuScroll": false,
                                          "closeMenuOnScroll": false,
                                          "closeMenuOnSelect": true,
                                          "components": Object {
                                            "DropdownIndicator": [Function],
                                            "Option": [Function],
                                            "ValueContainer": [Function],
                                          },
                                          "controlShouldRenderValue": true,
                                          "dropdownIcon": undefined,
                                          "escapeClearsValue": false,
                                          "filterOption": [Function],
                                          "formatGroupLabel": [Function],
                                          "getOptionLabel": [Function],
                                          "getOptionValue": [Function],
                                          "hideDropdownIcon": false,
                                          "inputIcon": undefined,
                                          "inputValue": "",
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "isMulti": false,
                                          "isOptionDisabled": [Function],
                                          "isRtl": false,
                                          "isSearchable": true,
                                          "loadingMessage": [Function],
                                          "maxMenuHeight": 300,
                                          "menuIsOpen": false,
                                          "menuPlacement": "auto",
                                          "menuPosition": "absolute",
                                          "menuShouldBlockScroll": false,
                                          "menuShouldScrollIntoView": true,
                                          "minMenuHeight": 140,
                                          "noOptionsMessage": [Function],
                                          "onChange": [Function],
                                          "onInputChange": [Function],
                                          "onMenuClose": [Function],
                                          "onMenuOpen": [Function],
                                          "openMenuOnClick": true,
                                          "openMenuOnFocus": false,
                                          "options": Array [
                                            Object {
                                              "label": "5",
                                              "value": 5,
                                            },
                                            Object {
                                              "label": "20",
                                              "value": 20,
                                            },
                                            Object {
                                              "label": "50",
                                              "value": 50,
                                            },
                                          ],
                                          "pageSize": 5,
                                          "placeholder": "Select...",
                                          "screenReaderStatus": [Function],
                                          "styles": Object {
                                            "clearIndicator": [Function],
                                            "container": [Function],
                                            "control": [Function],
                                            "dropdownIndicator": [Function],
                                            "indicatorSeparator": [Function],
                                            "indicatorsContainer": [Function],
                                            "menu": [Function],
                                            "menuList": [Function],
                                            "menuPortal": [Function],
                                            "option": [Function],
                                            "singleValue": [Function],
                                            "valueContainer": [Function],
                                          },
                                          "tabIndex": "0",
                                          "tabSelectsValue": true,
                                          "theme": [Function],
                                          "value": Object {
                                            "label": "5",
                                            "value": 5,
                                          },
                                        }
                                      }
                                      setValue={[Function]}
                                      theme={
                                        Object {
                                          "borderRadius": 4,
                                          "colors": Object {
                                            "danger": "#DE350B",
                                            "dangerLight": "#FFBDAD",
                                            "neutral0": "hsl(0, 0%, 100%)",
                                            "neutral10": "hsl(0, 0%, 90%)",
                                            "neutral20": "hsl(0, 0%, 80%)",
                                            "neutral30": "hsl(0, 0%, 70%)",
                                            "neutral40": "hsl(0, 0%, 60%)",
                                            "neutral5": "hsl(0, 0%, 95%)",
                                            "neutral50": "#56565a",
                                            "neutral60": "hsl(0, 0%, 40%)",
                                            "neutral70": "hsl(0, 0%, 30%)",
                                            "neutral80": "hsl(0, 0%, 20%)",
                                            "neutral90": "hsl(0, 0%, 10%)",
                                            "primary": "#2684FF",
                                            "primary25": "#DEEBFF",
                                            "primary50": "#B2D4FF",
                                            "primary75": "#4C9AFF",
                                          },
                                          "spacing": Object {
                                            "baseUnit": 4,
                                            "controlHeight": 38,
                                            "menuGutter": 8,
                                          },
                                        }
                                      }
                                    >
                                      <EmotionCssPropInternal
                                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="ValueContainer"
                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                        className=""
                                        css={
                                          Object {
                                            "WebkitOverflowScrolling": "touch",
                                            "alignItems": "center",
                                            "boxSizing": "border-box",
                                            "display": "flex",
                                            "flex": 1,
                                            "flexWrap": "wrap",
                                            "overflow": "hidden",
                                            "padding": "0 10px",
                                            "position": "relative",
                                          }
                                        }
                                      >
                                        <div
                                          className=" css-1xmm524-ValueContainer"
                                        >
                                          <SingleValue
                                            clearValue={[Function]}
                                            cx={[Function]}
                                            data={
                                              Object {
                                                "label": "5",
                                                "value": 5,
                                              }
                                            }
                                            getStyles={[Function]}
                                            getValue={[Function]}
                                            hasValue={true}
                                            isDisabled={false}
                                            isMulti={false}
                                            isRtl={false}
                                            options={
                                              Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ]
                                            }
                                            selectOption={[Function]}
                                            selectProps={
                                              Object {
                                                "aria-live": "polite",
                                                "backspaceRemovesValue": true,
                                                "blurInputOnSelect": true,
                                                "borderless": true,
                                                "captureMenuScroll": false,
                                                "closeMenuOnScroll": false,
                                                "closeMenuOnSelect": true,
                                                "components": Object {
                                                  "DropdownIndicator": [Function],
                                                  "Option": [Function],
                                                  "ValueContainer": [Function],
                                                },
                                                "controlShouldRenderValue": true,
                                                "dropdownIcon": undefined,
                                                "escapeClearsValue": false,
                                                "filterOption": [Function],
                                                "formatGroupLabel": [Function],
                                                "getOptionLabel": [Function],
                                                "getOptionValue": [Function],
                                                "hideDropdownIcon": false,
                                                "inputIcon": undefined,
                                                "inputValue": "",
                                                "isDisabled": false,
                                                "isLoading": false,
                                                "isMulti": false,
                                                "isOptionDisabled": [Function],
                                                "isRtl": false,
                                                "isSearchable": true,
                                                "loadingMessage": [Function],
                                                "maxMenuHeight": 300,
                                                "menuIsOpen": false,
                                                "menuPlacement": "auto",
                                                "menuPosition": "absolute",
                                                "menuShouldBlockScroll": false,
                                                "menuShouldScrollIntoView": true,
                                                "minMenuHeight": 140,
                                                "noOptionsMessage": [Function],
                                                "onChange": [Function],
                                                "onInputChange": [Function],
                                                "onMenuClose": [Function],
                                                "onMenuOpen": [Function],
                                                "openMenuOnClick": true,
                                                "openMenuOnFocus": false,
                                                "options": Array [
                                                  Object {
                                                    "label": "5",
                                                    "value": 5,
                                                  },
                                                  Object {
                                                    "label": "20",
                                                    "value": 20,
                                                  },
                                                  Object {
                                                    "label": "50",
                                                    "value": 50,
                                                  },
                                                ],
                                                "pageSize": 5,
                                                "placeholder": "Select...",
                                                "screenReaderStatus": [Function],
                                                "styles": Object {
                                                  "clearIndicator": [Function],
                                                  "container": [Function],
                                                  "control": [Function],
                                                  "dropdownIndicator": [Function],
                                                  "indicatorSeparator": [Function],
                                                  "indicatorsContainer": [Function],
                                                  "menu": [Function],
                                                  "menuList": [Function],
                                                  "menuPortal": [Function],
                                                  "option": [Function],
                                                  "singleValue": [Function],
                                                  "valueContainer": [Function],
                                                },
                                                "tabIndex": "0",
                                                "tabSelectsValue": true,
                                                "theme": [Function],
                                                "value": Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                              }
                                            }
                                            setValue={[Function]}
                                            theme={
                                              Object {
                                                "borderRadius": 4,
                                                "colors": Object {
                                                  "danger": "#DE350B",
                                                  "dangerLight": "#FFBDAD",
                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                  "neutral50": "#56565a",
                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                  "primary": "#2684FF",
                                                  "primary25": "#DEEBFF",
                                                  "primary50": "#B2D4FF",
                                                  "primary75": "#4C9AFF",
                                                },
                                                "spacing": Object {
                                                  "baseUnit": 4,
                                                  "controlHeight": 38,
                                                  "menuGutter": 8,
                                                },
                                              }
                                            }
                                          >
                                            <EmotionCssPropInternal
                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="SingleValue"
                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                              className=""
                                              css={
                                                Object {
                                                  "boxSizing": "border-box",
                                                  "color": "inherit",
                                                  "label": "singleValue",
                                                  "marginLeft": 2,
                                                  "marginRight": 2,
                                                  "maxWidth": "calc(100% - 8px)",
                                                  "overflow": "hidden",
                                                  "position": "absolute",
                                                  "textOverflow": "ellipsis",
                                                  "top": "50%",
                                                  "transform": "translateY(-50%)",
                                                  "whiteSpace": "nowrap",
                                                }
                                              }
                                            >
                                              <div
                                                className=" css-1xqm9c7-singleValue"
                                              >
                                                5
                                              </div>
                                            </EmotionCssPropInternal>
                                          </SingleValue>
                                          <Input
                                            aria-autocomplete="list"
                                            autoCapitalize="none"
                                            autoComplete="off"
                                            autoCorrect="off"
                                            clearValue={[Function]}
                                            cx={[Function]}
                                            getStyles={[Function]}
                                            getValue={[Function]}
                                            hasValue={true}
                                            id="react-select-2-input"
                                            innerRef={[Function]}
                                            isDisabled={false}
                                            isHidden={false}
                                            isMulti={false}
                                            isRtl={false}
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            options={
                                              Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ]
                                            }
                                            selectOption={[Function]}
                                            selectProps={
                                              Object {
                                                "aria-live": "polite",
                                                "backspaceRemovesValue": true,
                                                "blurInputOnSelect": true,
                                                "borderless": true,
                                                "captureMenuScroll": false,
                                                "closeMenuOnScroll": false,
                                                "closeMenuOnSelect": true,
                                                "components": Object {
                                                  "DropdownIndicator": [Function],
                                                  "Option": [Function],
                                                  "ValueContainer": [Function],
                                                },
                                                "controlShouldRenderValue": true,
                                                "dropdownIcon": undefined,
                                                "escapeClearsValue": false,
                                                "filterOption": [Function],
                                                "formatGroupLabel": [Function],
                                                "getOptionLabel": [Function],
                                                "getOptionValue": [Function],
                                                "hideDropdownIcon": false,
                                                "inputIcon": undefined,
                                                "inputValue": "",
                                                "isDisabled": false,
                                                "isLoading": false,
                                                "isMulti": false,
                                                "isOptionDisabled": [Function],
                                                "isRtl": false,
                                                "isSearchable": true,
                                                "loadingMessage": [Function],
                                                "maxMenuHeight": 300,
                                                "menuIsOpen": false,
                                                "menuPlacement": "auto",
                                                "menuPosition": "absolute",
                                                "menuShouldBlockScroll": false,
                                                "menuShouldScrollIntoView": true,
                                                "minMenuHeight": 140,
                                                "noOptionsMessage": [Function],
                                                "onChange": [Function],
                                                "onInputChange": [Function],
                                                "onMenuClose": [Function],
                                                "onMenuOpen": [Function],
                                                "openMenuOnClick": true,
                                                "openMenuOnFocus": false,
                                                "options": Array [
                                                  Object {
                                                    "label": "5",
                                                    "value": 5,
                                                  },
                                                  Object {
                                                    "label": "20",
                                                    "value": 20,
                                                  },
                                                  Object {
                                                    "label": "50",
                                                    "value": 50,
                                                  },
                                                ],
                                                "pageSize": 5,
                                                "placeholder": "Select...",
                                                "screenReaderStatus": [Function],
                                                "styles": Object {
                                                  "clearIndicator": [Function],
                                                  "container": [Function],
                                                  "control": [Function],
                                                  "dropdownIndicator": [Function],
                                                  "indicatorSeparator": [Function],
                                                  "indicatorsContainer": [Function],
                                                  "menu": [Function],
                                                  "menuList": [Function],
                                                  "menuPortal": [Function],
                                                  "option": [Function],
                                                  "singleValue": [Function],
                                                  "valueContainer": [Function],
                                                },
                                                "tabIndex": "0",
                                                "tabSelectsValue": true,
                                                "theme": [Function],
                                                "value": Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                              }
                                            }
                                            setValue={[Function]}
                                            spellCheck="false"
                                            tabIndex="0"
                                            theme={
                                              Object {
                                                "borderRadius": 4,
                                                "colors": Object {
                                                  "danger": "#DE350B",
                                                  "dangerLight": "#FFBDAD",
                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                  "neutral50": "#56565a",
                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                  "primary": "#2684FF",
                                                  "primary25": "#DEEBFF",
                                                  "primary50": "#B2D4FF",
                                                  "primary75": "#4C9AFF",
                                                },
                                                "spacing": Object {
                                                  "baseUnit": 4,
                                                  "controlHeight": 38,
                                                  "menuGutter": 8,
                                                },
                                              }
                                            }
                                            type="text"
                                            value=""
                                          >
                                            <EmotionCssPropInternal
                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Input"
                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                              css={
                                                Object {
                                                  "boxSizing": "border-box",
                                                  "color": "hsl(0, 0%, 20%)",
                                                  "margin": 2,
                                                  "paddingBottom": 2,
                                                  "paddingTop": 2,
                                                  "visibility": "visible",
                                                }
                                              }
                                            >
                                              <div
                                                className="css-b8ldur-Input"
                                              >
                                                <AutosizeInput
                                                  aria-autocomplete="list"
                                                  autoCapitalize="none"
                                                  autoComplete="off"
                                                  autoCorrect="off"
                                                  className=""
                                                  disabled={false}
                                                  id="react-select-2-input"
                                                  injectStyles={true}
                                                  inputRef={[Function]}
                                                  inputStyle={
                                                    Object {
                                                      "background": 0,
                                                      "border": 0,
                                                      "color": "inherit",
                                                      "fontSize": "inherit",
                                                      "label": "input",
                                                      "opacity": 1,
                                                      "outline": 0,
                                                      "padding": 0,
                                                    }
                                                  }
                                                  minWidth={1}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  spellCheck="false"
                                                  tabIndex="0"
                                                  type="text"
                                                  value=""
                                                >
                                                  <div
                                                    className=""
                                                    style={
                                                      Object {
                                                        "display": "inline-block",
                                                      }
                                                    }
                                                  >
                                                    <input
                                                      aria-autocomplete="list"
                                                      autoCapitalize="none"
                                                      autoComplete="off"
                                                      autoCorrect="off"
                                                      disabled={false}
                                                      id="react-select-2-input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      spellCheck="false"
                                                      style={
                                                        Object {
                                                          "background": 0,
                                                          "border": 0,
                                                          "boxSizing": "content-box",
                                                          "color": "inherit",
                                                          "fontSize": "inherit",
                                                          "label": "input",
                                                          "opacity": 1,
                                                          "outline": 0,
                                                          "padding": 0,
                                                          "width": "2px",
                                                        }
                                                      }
                                                      tabIndex="0"
                                                      type="text"
                                                      value=""
                                                    />
                                                    <div
                                                      style={
                                                        Object {
                                                          "height": 0,
                                                          "left": 0,
                                                          "overflow": "scroll",
                                                          "position": "absolute",
                                                          "top": 0,
                                                          "visibility": "hidden",
                                                          "whiteSpace": "pre",
                                                        }
                                                      }
                                                    />
                                                  </div>
                                                </AutosizeInput>
                                              </div>
                                            </EmotionCssPropInternal>
                                          </Input>
                                        </div>
                                      </EmotionCssPropInternal>
                                    </ValueContainer>
                                  </ValueContainer>
                                  <IndicatorsContainer
                                    clearValue={[Function]}
                                    cx={[Function]}
                                    getStyles={[Function]}
                                    getValue={[Function]}
                                    hasValue={true}
                                    isDisabled={false}
                                    isMulti={false}
                                    isRtl={false}
                                    options={
                                      Array [
                                        Object {
                                          "label": "5",
                                          "value": 5,
                                        },
                                        Object {
                                          "label": "20",
                                          "value": 20,
                                        },
                                        Object {
                                          "label": "50",
                                          "value": 50,
                                        },
                                      ]
                                    }
                                    selectOption={[Function]}
                                    selectProps={
                                      Object {
                                        "aria-live": "polite",
                                        "backspaceRemovesValue": true,
                                        "blurInputOnSelect": true,
                                        "borderless": true,
                                        "captureMenuScroll": false,
                                        "closeMenuOnScroll": false,
                                        "closeMenuOnSelect": true,
                                        "components": Object {
                                          "DropdownIndicator": [Function],
                                          "Option": [Function],
                                          "ValueContainer": [Function],
                                        },
                                        "controlShouldRenderValue": true,
                                        "dropdownIcon": undefined,
                                        "escapeClearsValue": false,
                                        "filterOption": [Function],
                                        "formatGroupLabel": [Function],
                                        "getOptionLabel": [Function],
                                        "getOptionValue": [Function],
                                        "hideDropdownIcon": false,
                                        "inputIcon": undefined,
                                        "inputValue": "",
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "isMulti": false,
                                        "isOptionDisabled": [Function],
                                        "isRtl": false,
                                        "isSearchable": true,
                                        "loadingMessage": [Function],
                                        "maxMenuHeight": 300,
                                        "menuIsOpen": false,
                                        "menuPlacement": "auto",
                                        "menuPosition": "absolute",
                                        "menuShouldBlockScroll": false,
                                        "menuShouldScrollIntoView": true,
                                        "minMenuHeight": 140,
                                        "noOptionsMessage": [Function],
                                        "onChange": [Function],
                                        "onInputChange": [Function],
                                        "onMenuClose": [Function],
                                        "onMenuOpen": [Function],
                                        "openMenuOnClick": true,
                                        "openMenuOnFocus": false,
                                        "options": Array [
                                          Object {
                                            "label": "5",
                                            "value": 5,
                                          },
                                          Object {
                                            "label": "20",
                                            "value": 20,
                                          },
                                          Object {
                                            "label": "50",
                                            "value": 50,
                                          },
                                        ],
                                        "pageSize": 5,
                                        "placeholder": "Select...",
                                        "screenReaderStatus": [Function],
                                        "styles": Object {
                                          "clearIndicator": [Function],
                                          "container": [Function],
                                          "control": [Function],
                                          "dropdownIndicator": [Function],
                                          "indicatorSeparator": [Function],
                                          "indicatorsContainer": [Function],
                                          "menu": [Function],
                                          "menuList": [Function],
                                          "menuPortal": [Function],
                                          "option": [Function],
                                          "singleValue": [Function],
                                          "valueContainer": [Function],
                                        },
                                        "tabIndex": "0",
                                        "tabSelectsValue": true,
                                        "theme": [Function],
                                        "value": Object {
                                          "label": "5",
                                          "value": 5,
                                        },
                                      }
                                    }
                                    setValue={[Function]}
                                    theme={
                                      Object {
                                        "borderRadius": 4,
                                        "colors": Object {
                                          "danger": "#DE350B",
                                          "dangerLight": "#FFBDAD",
                                          "neutral0": "hsl(0, 0%, 100%)",
                                          "neutral10": "hsl(0, 0%, 90%)",
                                          "neutral20": "hsl(0, 0%, 80%)",
                                          "neutral30": "hsl(0, 0%, 70%)",
                                          "neutral40": "hsl(0, 0%, 60%)",
                                          "neutral5": "hsl(0, 0%, 95%)",
                                          "neutral50": "#56565a",
                                          "neutral60": "hsl(0, 0%, 40%)",
                                          "neutral70": "hsl(0, 0%, 30%)",
                                          "neutral80": "hsl(0, 0%, 20%)",
                                          "neutral90": "hsl(0, 0%, 10%)",
                                          "primary": "#2684FF",
                                          "primary25": "#DEEBFF",
                                          "primary50": "#B2D4FF",
                                          "primary75": "#4C9AFF",
                                        },
                                        "spacing": Object {
                                          "baseUnit": 4,
                                          "controlHeight": 38,
                                          "menuGutter": 8,
                                        },
                                      }
                                    }
                                  >
                                    <EmotionCssPropInternal
                                      __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorsContainer"
                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                      className=""
                                      css={
                                        Object {
                                          "alignItems": "center",
                                          "alignSelf": "stretch",
                                          "boxSizing": "border-box",
                                          "color": "#8b8b90",
                                          "display": "flex",
                                          "flexShrink": 0,
                                          "marginRight": "5px",
                                        }
                                      }
                                    >
                                      <div
                                        className=" css-78af7f-IndicatorsContainer"
                                      >
                                        <IndicatorSeparator
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={true}
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={false}
                                          isRtl={false}
                                          options={
                                            Array [
                                              Object {
                                                "label": "5",
                                                "value": 5,
                                              },
                                              Object {
                                                "label": "20",
                                                "value": 20,
                                              },
                                              Object {
                                                "label": "50",
                                                "value": 50,
                                              },
                                            ]
                                          }
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "aria-live": "polite",
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": true,
                                              "borderless": true,
                                              "captureMenuScroll": false,
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {
                                                "DropdownIndicator": [Function],
                                                "Option": [Function],
                                                "ValueContainer": [Function],
                                              },
                                              "controlShouldRenderValue": true,
                                              "dropdownIcon": undefined,
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatGroupLabel": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "hideDropdownIcon": false,
                                              "inputIcon": undefined,
                                              "inputValue": "",
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": false,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 300,
                                              "menuIsOpen": false,
                                              "menuPlacement": "auto",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "noOptionsMessage": [Function],
                                              "onChange": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ],
                                              "pageSize": 5,
                                              "placeholder": "Select...",
                                              "screenReaderStatus": [Function],
                                              "styles": Object {
                                                "clearIndicator": [Function],
                                                "container": [Function],
                                                "control": [Function],
                                                "dropdownIndicator": [Function],
                                                "indicatorSeparator": [Function],
                                                "indicatorsContainer": [Function],
                                                "menu": [Function],
                                                "menuList": [Function],
                                                "menuPortal": [Function],
                                                "option": [Function],
                                                "singleValue": [Function],
                                                "valueContainer": [Function],
                                              },
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "theme": [Function],
                                              "value": Object {
                                                "label": "5",
                                                "value": 5,
                                              },
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 4,
                                              "colors": Object {
                                                "danger": "#DE350B",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "#56565a",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#2684FF",
                                                "primary25": "#DEEBFF",
                                                "primary50": "#B2D4FF",
                                                "primary75": "#4C9AFF",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <EmotionCssPropInternal
                                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorSeparator"
                                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                            className=""
                                            css={
                                              Object {
                                                "display": "none",
                                              }
                                            }
                                          >
                                            <span
                                              className=" css-1xjgjl1-IndicatorSeparator"
                                            />
                                          </EmotionCssPropInternal>
                                        </IndicatorSeparator>
                                        <LUKDropdownIndicator
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={true}
                                          innerProps={
                                            Object {
                                              "aria-hidden": "true",
                                              "onMouseDown": [Function],
                                              "onTouchEnd": [Function],
                                            }
                                          }
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={false}
                                          isRtl={false}
                                          options={
                                            Array [
                                              Object {
                                                "label": "5",
                                                "value": 5,
                                              },
                                              Object {
                                                "label": "20",
                                                "value": 20,
                                              },
                                              Object {
                                                "label": "50",
                                                "value": 50,
                                              },
                                            ]
                                          }
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "aria-live": "polite",
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": true,
                                              "borderless": true,
                                              "captureMenuScroll": false,
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {
                                                "DropdownIndicator": [Function],
                                                "Option": [Function],
                                                "ValueContainer": [Function],
                                              },
                                              "controlShouldRenderValue": true,
                                              "dropdownIcon": undefined,
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatGroupLabel": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "hideDropdownIcon": false,
                                              "inputIcon": undefined,
                                              "inputValue": "",
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": false,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 300,
                                              "menuIsOpen": false,
                                              "menuPlacement": "auto",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "noOptionsMessage": [Function],
                                              "onChange": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ],
                                              "pageSize": 5,
                                              "placeholder": "Select...",
                                              "screenReaderStatus": [Function],
                                              "styles": Object {
                                                "clearIndicator": [Function],
                                                "container": [Function],
                                                "control": [Function],
                                                "dropdownIndicator": [Function],
                                                "indicatorSeparator": [Function],
                                                "indicatorsContainer": [Function],
                                                "menu": [Function],
                                                "menuList": [Function],
                                                "menuPortal": [Function],
                                                "option": [Function],
                                                "singleValue": [Function],
                                                "valueContainer": [Function],
                                              },
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "theme": [Function],
                                              "value": Object {
                                                "label": "5",
                                                "value": 5,
                                              },
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 4,
                                              "colors": Object {
                                                "danger": "#DE350B",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "#56565a",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#2684FF",
                                                "primary25": "#DEEBFF",
                                                "primary50": "#B2D4FF",
                                                "primary75": "#4C9AFF",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <DropdownIndicator
                                            clearValue={[Function]}
                                            cx={[Function]}
                                            getStyles={[Function]}
                                            getValue={[Function]}
                                            hasValue={true}
                                            innerProps={
                                              Object {
                                                "aria-hidden": "true",
                                                "onMouseDown": [Function],
                                                "onTouchEnd": [Function],
                                              }
                                            }
                                            isDisabled={false}
                                            isFocused={false}
                                            isMulti={false}
                                            isRtl={false}
                                            options={
                                              Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ]
                                            }
                                            selectOption={[Function]}
                                            selectProps={
                                              Object {
                                                "aria-live": "polite",
                                                "backspaceRemovesValue": true,
                                                "blurInputOnSelect": true,
                                                "borderless": true,
                                                "captureMenuScroll": false,
                                                "closeMenuOnScroll": false,
                                                "closeMenuOnSelect": true,
                                                "components": Object {
                                                  "DropdownIndicator": [Function],
                                                  "Option": [Function],
                                                  "ValueContainer": [Function],
                                                },
                                                "controlShouldRenderValue": true,
                                                "dropdownIcon": undefined,
                                                "escapeClearsValue": false,
                                                "filterOption": [Function],
                                                "formatGroupLabel": [Function],
                                                "getOptionLabel": [Function],
                                                "getOptionValue": [Function],
                                                "hideDropdownIcon": false,
                                                "inputIcon": undefined,
                                                "inputValue": "",
                                                "isDisabled": false,
                                                "isLoading": false,
                                                "isMulti": false,
                                                "isOptionDisabled": [Function],
                                                "isRtl": false,
                                                "isSearchable": true,
                                                "loadingMessage": [Function],
                                                "maxMenuHeight": 300,
                                                "menuIsOpen": false,
                                                "menuPlacement": "auto",
                                                "menuPosition": "absolute",
                                                "menuShouldBlockScroll": false,
                                                "menuShouldScrollIntoView": true,
                                                "minMenuHeight": 140,
                                                "noOptionsMessage": [Function],
                                                "onChange": [Function],
                                                "onInputChange": [Function],
                                                "onMenuClose": [Function],
                                                "onMenuOpen": [Function],
                                                "openMenuOnClick": true,
                                                "openMenuOnFocus": false,
                                                "options": Array [
                                                  Object {
                                                    "label": "5",
                                                    "value": 5,
                                                  },
                                                  Object {
                                                    "label": "20",
                                                    "value": 20,
                                                  },
                                                  Object {
                                                    "label": "50",
                                                    "value": 50,
                                                  },
                                                ],
                                                "pageSize": 5,
                                                "placeholder": "Select...",
                                                "screenReaderStatus": [Function],
                                                "styles": Object {
                                                  "clearIndicator": [Function],
                                                  "container": [Function],
                                                  "control": [Function],
                                                  "dropdownIndicator": [Function],
                                                  "indicatorSeparator": [Function],
                                                  "indicatorsContainer": [Function],
                                                  "menu": [Function],
                                                  "menuList": [Function],
                                                  "menuPortal": [Function],
                                                  "option": [Function],
                                                  "singleValue": [Function],
                                                  "valueContainer": [Function],
                                                },
                                                "tabIndex": "0",
                                                "tabSelectsValue": true,
                                                "theme": [Function],
                                                "value": Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                              }
                                            }
                                            setValue={[Function]}
                                            theme={
                                              Object {
                                                "borderRadius": 4,
                                                "colors": Object {
                                                  "danger": "#DE350B",
                                                  "dangerLight": "#FFBDAD",
                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                  "neutral50": "#56565a",
                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                  "primary": "#2684FF",
                                                  "primary25": "#DEEBFF",
                                                  "primary50": "#B2D4FF",
                                                  "primary75": "#4C9AFF",
                                                },
                                                "spacing": Object {
                                                  "baseUnit": 4,
                                                  "controlHeight": 38,
                                                  "menuGutter": 8,
                                                },
                                              }
                                            }
                                          >
                                            <EmotionCssPropInternal
                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="DropdownIndicator"
                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                              aria-hidden="true"
                                              className=""
                                              css={
                                                Object {
                                                  "color": "#8b8b90",
                                                  "display": "flex",
                                                  "margin": "5px",
                                                  "padding": "0",
                                                }
                                              }
                                              onMouseDown={[Function]}
                                              onTouchEnd={[Function]}
                                            >
                                              <div
                                                aria-hidden="true"
                                                className=" css-144p37m-DropdownIndicator"
                                                onMouseDown={[Function]}
                                                onTouchEnd={[Function]}
                                              >
                                                <DownChevron>
                                                  <Svg
                                                    size={20}
                                                  >
                                                    <EmotionCssPropInternal
                                                      __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Svg"
                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                      aria-hidden="true"
                                                      css={
                                                        Object {
                                                          "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                                          "name": "tj5bde-Svg",
                                                          "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;label:Svg;",
                                                          "toString": [Function],
                                                        }
                                                      }
                                                      focusable="false"
                                                      height={20}
                                                      viewBox="0 0 20 20"
                                                      width={20}
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className="css-tj5bde-Svg"
                                                        focusable="false"
                                                        height={20}
                                                        viewBox="0 0 20 20"
                                                        width={20}
                                                      >
                                                        <path
                                                          d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                                        />
                                                      </svg>
                                                    </EmotionCssPropInternal>
                                                  </Svg>
                                                </DownChevron>
                                              </div>
                                            </EmotionCssPropInternal>
                                          </DropdownIndicator>
                                        </LUKDropdownIndicator>
                                      </div>
                                    </EmotionCssPropInternal>
                                  </IndicatorsContainer>
                                </div>
                              </EmotionCssPropInternal>
                            </Control>
                          </div>
                        </EmotionCssPropInternal>
                      </SelectContainer>
                    </Select>
                  </StateManager>
                </SelectController>
              </Select>
            </div>
          </styled.div>
          <WithStyles(ForwardRef(Pagination))
            count={2}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={2}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to page 2"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to page 2"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to page 2"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to page 2"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to page 2"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              2
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="3"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
    <styled.table>
      <table
        className="c3"
      >
        <TableHeader
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          onSort={[Function]}
          order={false}
          sticky={true}
        >
          <thead>
            <styled.tr
              sticky={true}
            >
              <tr
                className="c4"
              >
                <HeadCell
                  cellStyle={
                    Object {
                      "width": "33%",
                    }
                  }
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="name"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={
                      Object {
                        "width": "33%",
                      }
                    }
                    onClick={[Function]}
                  >
                    <th
                      className="c5"
                      onClick={[Function]}
                    >
                      Subject Name
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="dob"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c6"
                      onClick={[Function]}
                    >
                      Date of Birth
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="manager"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c6"
                      onClick={[Function]}
                    >
                      Manager
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="lastUpdated"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c6"
                      onClick={[Function]}
                    >
                      Last Updated
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="id"
                  order={false}
                  sortable={false}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                  >
                    <th
                      className="c7"
                    >
                      ID
                    </th>
                  </Cell>
                </HeadCell>
              </tr>
            </styled.tr>
          </thead>
        </TableHeader>
        <TableBody
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          data={
            Array [
              Object {
                "dob": "1942-11-30",
                "id": "1",
                "lastUpdated": "2019-09-01",
                "manager": "Spongebob",
                "name": "Eugene Krabs",
              },
              Object {
                "dob": "",
                "id": "2",
                "lastUpdated": "2019-08-29",
                "manager": "Smitty",
                "name": "Squidward Tentacles",
              },
              Object {
                "dob": "1987-11-17",
                "id": "3",
                "lastUpdated": "2019-07-30",
                "manager": "Patrick",
                "name": "Sandy Cheeks",
              },
              Object {
                "dob": "1975-06-23",
                "id": "4",
                "lastUpdated": "2019-08-16",
                "manager": "Patchy",
                "name": "Larry the Lobster",
              },
              Object {
                "dob": "1942-11-30",
                "id": "5",
                "lastUpdated": "2019-08-20",
                "manager": "Spongebob",
                "name": "Sheldon Plankton",
              },
              Object {
                "dob": "",
                "id": "6",
                "lastUpdated": "2019-08-21",
                "manager": "Spongebob",
                "name": "Mrs. Puff",
              },
              Object {
                "dob": "1678-04-20",
                "id": "7",
                "lastUpdated": "2019-06-21",
                "manager": "Spongebob",
                "name": "Flying Dutchman",
              },
              Object {
                "dob": "1999-07-17",
                "id": "8",
                "lastUpdated": "2019-06-21",
                "manager": "Eugene Krabs",
                "name": "Spongebob Squarepants",
              },
              Object {
                "dob": "1984-03-17",
                "id": "9",
                "lastUpdated": "2019-06-21",
                "manager": "N/A",
                "name": "Patrick Star",
              },
            ]
          }
          exact={false}
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          page={1}
          rowsPerPage={5}
        >
          <tbody>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "1",
                  "lastUpdated": "2019-09-01",
                  "manager": "Spongebob",
                  "name": "Eugene Krabs",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="1"
            >
              <styled.tr>
                <tr
                  className="c8"
                >
                  <Cell
                    key="1_cell_name"
                  >
                    <td
                      className="c9"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_dob"
                  >
                    <td
                      className="c9"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_manager"
                  >
                    <td
                      className="c9"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_lastUpdated"
                  >
                    <td
                      className="c9"
                    >
                      2019-09-01
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_id"
                  >
                    <td
                      className="c9"
                    >
                      1
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "2",
                  "lastUpdated": "2019-08-29",
                  "manager": "Smitty",
                  "name": "Squidward Tentacles",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="2"
            >
              <styled.tr>
                <tr
                  className="c8"
                >
                  <Cell
                    key="2_cell_name"
                  >
                    <td
                      className="c9"
                    >
                      Squidward Tentacles
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_dob"
                  >
                    <td
                      className="c9"
                    />
                  </Cell>
                  <Cell
                    key="2_cell_manager"
                  >
                    <td
                      className="c9"
                    >
                      Smitty
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_lastUpdated"
                  >
                    <td
                      className="c9"
                    >
                      2019-08-29
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_id"
                  >
                    <td
                      className="c9"
                    >
                      2
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1987-11-17",
                  "id": "3",
                  "lastUpdated": "2019-07-30",
                  "manager": "Patrick",
                  "name": "Sandy Cheeks",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="3"
            >
              <styled.tr>
                <tr
                  className="c8"
                >
                  <Cell
                    key="3_cell_name"
                  >
                    <td
                      className="c9"
                    >
                      Sandy Cheeks
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_dob"
                  >
                    <td
                      className="c9"
                    >
                      1987-11-17
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_manager"
                  >
                    <td
                      className="c9"
                    >
                      Patrick
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_lastUpdated"
                  >
                    <td
                      className="c9"
                    >
                      2019-07-30
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_id"
                  >
                    <td
                      className="c9"
                    >
                      3
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1975-06-23",
                  "id": "4",
                  "lastUpdated": "2019-08-16",
                  "manager": "Patchy",
                  "name": "Larry the Lobster",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="4"
            >
              <styled.tr>
                <tr
                  className="c8"
                >
                  <Cell
                    key="4_cell_name"
                  >
                    <td
                      className="c9"
                    >
                      Larry the Lobster
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_dob"
                  >
                    <td
                      className="c9"
                    >
                      1975-06-23
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_manager"
                  >
                    <td
                      className="c9"
                    >
                      Patchy
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_lastUpdated"
                  >
                    <td
                      className="c9"
                    >
                      2019-08-16
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_id"
                  >
                    <td
                      className="c9"
                    >
                      4
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "5",
                  "lastUpdated": "2019-08-20",
                  "manager": "Spongebob",
                  "name": "Sheldon Plankton",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="5"
            >
              <styled.tr>
                <tr
                  className="c8"
                >
                  <Cell
                    key="5_cell_name"
                  >
                    <td
                      className="c9"
                    >
                      Sheldon Plankton
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_dob"
                  >
                    <td
                      className="c9"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_manager"
                  >
                    <td
                      className="c9"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_lastUpdated"
                  >
                    <td
                      className="c9"
                    >
                      2019-08-20
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_id"
                  >
                    <td
                      className="c9"
                    >
                      5
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
          </tbody>
        </TableBody>
      </table>
    </styled.table>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={5}
      rowsPerPageOptions={
        Array [
          5,
          20,
          50,
        ]
      }
    >
      <styled.div>
        <div
          className="c0"
        >
          <styled.label
            subtle={true}
          >
            <label
              className="c1"
            >
              Rows per page
            </label>
          </styled.label>
          <styled.div>
            <div
              className="c2"
            >
              <Select
                borderless={true}
                defaultValue={
                  Object {
                    "label": "5",
                    "value": 5,
                  }
                }
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "5",
                      "value": 5,
                    },
                    Object {
                      "label": "20",
                      "value": 20,
                    },
                    Object {
                      "label": "50",
                      "value": 50,
                    },
                  ]
                }
                useRawValues={true}
                value={5}
              >
                <SelectController
                  borderless={true}
                  defaultValue={
                    Object {
                      "label": "5",
                      "value": 5,
                    }
                  }
                  hideDropdownIcon={false}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "5",
                        "value": 5,
                      },
                      Object {
                        "label": "20",
                        "value": 20,
                      },
                      Object {
                        "label": "50",
                        "value": 50,
                      },
                    ]
                  }
                  render={[Function]}
                  useRawValues={true}
                  value={5}
                >
                  <StateManager
                    borderless={true}
                    components={
                      Object {
                        "DropdownIndicator": [Function],
                        "Option": [Function],
                        "ValueContainer": [Function],
                      }
                    }
                    defaultInputValue=""
                    defaultMenuIsOpen={false}
                    defaultValue={
                      Object {
                        "label": "5",
                        "value": 5,
                      }
                    }
                    filterOption={[Function]}
                    hideDropdownIcon={false}
                    menuPlacement="auto"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "5",
                          "value": 5,
                        },
                        Object {
                          "label": "20",
                          "value": 20,
                        },
                        Object {
                          "label": "50",
                          "value": 50,
                        },
                      ]
                    }
                    styles={
                      Object {
                        "clearIndicator": [Function],
                        "container": [Function],
                        "control": [Function],
                        "dropdownIndicator": [Function],
                        "indicatorSeparator": [Function],
                        "indicatorsContainer": [Function],
                        "menu": [Function],
                        "menuList": [Function],
                        "menuPortal": [Function],
                        "option": [Function],
                        "singleValue": [Function],
                        "valueContainer": [Function],
                      }
                    }
                    theme={[Function]}
                    value={
                      Object {
                        "label": "5",
                        "value": 5,
                      }
                    }
                  >
                    <Select
                      aria-live="polite"
                      backspaceRemovesValue={true}
                      blurInputOnSelect={true}
                      borderless={true}
                      captureMenuScroll={false}
                      closeMenuOnScroll={false}
                      closeMenuOnSelect={true}
                      components={
                        Object {
                          "DropdownIndicator": [Function],
                          "Option": [Function],
                          "ValueContainer": [Function],
                        }
                      }
                      controlShouldRenderValue={true}
                      escapeClearsValue={false}
                      filterOption={[Function]}
                      formatGroupLabel={[Function]}
                      getOptionLabel={[Function]}
                      getOptionValue={[Function]}
                      hideDropdownIcon={false}
                      inputValue=""
                      isDisabled={false}
                      isLoading={false}
                      isMulti={false}
                      isOptionDisabled={[Function]}
                      isRtl={false}
                      isSearchable={true}
                      loadingMessage={[Function]}
                      maxMenuHeight={300}
                      menuIsOpen={false}
                      menuPlacement="auto"
                      menuPosition="absolute"
                      menuShouldBlockScroll={false}
                      menuShouldScrollIntoView={true}
                      minMenuHeight={140}
                      noOptionsMessage={[Function]}
                      onChange={[Function]}
                      onInputChange={[Function]}
                      onMenuClose={[Function]}
                      onMenuOpen={[Function]}
                      openMenuOnClick={true}
                      openMenuOnFocus={false}
                      options={
                        Array [
                          Object {
                            "label": "5",
                            "value": 5,
                          },
                          Object {
                            "label": "20",
                            "value": 20,
                          },
                          Object {
                            "label": "50",
                            "value": 50,
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      screenReaderStatus={[Function]}
                      styles={
                        Object {
                          "clearIndicator": [Function],
                          "container": [Function],
                          "control": [Function],
                          "dropdownIndicator": [Function],
                          "indicatorSeparator": [Function],
                          "indicatorsContainer": [Function],
                          "menu": [Function],
                          "menuList": [Function],
                          "menuPortal": [Function],
                          "option": [Function],
                          "singleValue": [Function],
                          "valueContainer": [Function],
                        }
                      }
                      tabIndex="0"
                      tabSelectsValue={true}
                      theme={[Function]}
                      value={
                        Object {
                          "label": "5",
                          "value": 5,
                        }
                      }
                    >
                      <SelectContainer
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={true}
                        innerProps={
                          Object {
                            "id": undefined,
                            "onKeyDown": [Function],
                          }
                        }
                        isDisabled={false}
                        isFocused={false}
                        isMulti={false}
                        isRtl={false}
                        options={
                          Array [
                            Object {
                              "label": "5",
                              "value": 5,
                            },
                            Object {
                              "label": "20",
                              "value": 20,
                            },
                            Object {
                              "label": "50",
                              "value": 50,
                            },
                          ]
                        }
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "aria-live": "polite",
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "borderless": true,
                            "captureMenuScroll": false,
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {
                              "DropdownIndicator": [Function],
                              "Option": [Function],
                              "ValueContainer": [Function],
                            },
                            "controlShouldRenderValue": true,
                            "dropdownIcon": undefined,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "hideDropdownIcon": false,
                            "inputIcon": undefined,
                            "inputValue": "",
                            "isDisabled": false,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "auto",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [
                              Object {
                                "label": "5",
                                "value": 5,
                              },
                              Object {
                                "label": "20",
                                "value": 20,
                              },
                              Object {
                                "label": "50",
                                "value": 50,
                              },
                            ],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "styles": Object {
                              "clearIndicator": [Function],
                              "container": [Function],
                              "control": [Function],
                              "dropdownIndicator": [Function],
                              "indicatorSeparator": [Function],
                              "indicatorsContainer": [Function],
                              "menu": [Function],
                              "menuList": [Function],
                              "menuPortal": [Function],
                              "option": [Function],
                              "singleValue": [Function],
                              "valueContainer": [Function],
                            },
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "theme": [Function],
                            "value": Object {
                              "label": "5",
                              "value": 5,
                            },
                          }
                        }
                        setValue={[Function]}
                        theme={
                          Object {
                            "borderRadius": 4,
                            "colors": Object {
                              "danger": "#DE350B",
                              "dangerLight": "#FFBDAD",
                              "neutral0": "hsl(0, 0%, 100%)",
                              "neutral10": "hsl(0, 0%, 90%)",
                              "neutral20": "hsl(0, 0%, 80%)",
                              "neutral30": "hsl(0, 0%, 70%)",
                              "neutral40": "hsl(0, 0%, 60%)",
                              "neutral5": "hsl(0, 0%, 95%)",
                              "neutral50": "#56565a",
                              "neutral60": "hsl(0, 0%, 40%)",
                              "neutral70": "hsl(0, 0%, 30%)",
                              "neutral80": "hsl(0, 0%, 20%)",
                              "neutral90": "hsl(0, 0%, 10%)",
                              "primary": "#2684FF",
                              "primary25": "#DEEBFF",
                              "primary50": "#B2D4FF",
                              "primary75": "#4C9AFF",
                            },
                            "spacing": Object {
                              "baseUnit": 4,
                              "controlHeight": 38,
                              "menuGutter": 8,
                            },
                          }
                        }
                      >
                        <EmotionCssPropInternal
                          __EMOTION_LABEL_PLEASE_DO_NOT_USE__="SelectContainer"
                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                          className=""
                          css={
                            Object {
                              "boxSizing": "border-box",
                              "cursor": "default",
                              "direction": null,
                              "label": "container",
                              "pointerEvents": "auto",
                              "position": "relative",
                              "width": "100%",
                            }
                          }
                          onKeyDown={[Function]}
                        >
                          <div
                            className=" css-gprrux-container"
                            onKeyDown={[Function]}
                          >
                            <LiveRegion
                              ariaSelection={null}
                              clearValue={[Function]}
                              cx={[Function]}
                              focusableOptions={Array []}
                              focusedOption={null}
                              focusedValue={null}
                              getStyles={[Function]}
                              getValue={[Function]}
                              hasValue={true}
                              isFocused={false}
                              isMulti={false}
                              isRtl={false}
                              options={
                                Array [
                                  Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                  Object {
                                    "label": "20",
                                    "value": 20,
                                  },
                                  Object {
                                    "label": "50",
                                    "value": 50,
                                  },
                                ]
                              }
                              selectOption={[Function]}
                              selectProps={
                                Object {
                                  "aria-live": "polite",
                                  "backspaceRemovesValue": true,
                                  "blurInputOnSelect": true,
                                  "borderless": true,
                                  "captureMenuScroll": false,
                                  "closeMenuOnScroll": false,
                                  "closeMenuOnSelect": true,
                                  "components": Object {
                                    "DropdownIndicator": [Function],
                                    "Option": [Function],
                                    "ValueContainer": [Function],
                                  },
                                  "controlShouldRenderValue": true,
                                  "dropdownIcon": undefined,
                                  "escapeClearsValue": false,
                                  "filterOption": [Function],
                                  "formatGroupLabel": [Function],
                                  "getOptionLabel": [Function],
                                  "getOptionValue": [Function],
                                  "hideDropdownIcon": false,
                                  "inputIcon": undefined,
                                  "inputValue": "",
                                  "isDisabled": false,
                                  "isLoading": false,
                                  "isMulti": false,
                                  "isOptionDisabled": [Function],
                                  "isRtl": false,
                                  "isSearchable": true,
                                  "loadingMessage": [Function],
                                  "maxMenuHeight": 300,
                                  "menuIsOpen": false,
                                  "menuPlacement": "auto",
                                  "menuPosition": "absolute",
                                  "menuShouldBlockScroll": false,
                                  "menuShouldScrollIntoView": true,
                                  "minMenuHeight": 140,
                                  "noOptionsMessage": [Function],
                                  "onChange": [Function],
                                  "onInputChange": [Function],
                                  "onMenuClose": [Function],
                                  "onMenuOpen": [Function],
                                  "openMenuOnClick": true,
                                  "openMenuOnFocus": false,
                                  "options": Array [
                                    Object {
                                      "label": "5",
                                      "value": 5,
                                    },
                                    Object {
                                      "label": "20",
                                      "value": 20,
                                    },
                                    Object {
                                      "label": "50",
                                      "value": 50,
                                    },
                                  ],
                                  "pageSize": 5,
                                  "placeholder": "Select...",
                                  "screenReaderStatus": [Function],
                                  "styles": Object {
                                    "clearIndicator": [Function],
                                    "container": [Function],
                                    "control": [Function],
                                    "dropdownIndicator": [Function],
                                    "indicatorSeparator": [Function],
                                    "indicatorsContainer": [Function],
                                    "menu": [Function],
                                    "menuList": [Function],
                                    "menuPortal": [Function],
                                    "option": [Function],
                                    "singleValue": [Function],
                                    "valueContainer": [Function],
                                  },
                                  "tabIndex": "0",
                                  "tabSelectsValue": true,
                                  "theme": [Function],
                                  "value": Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                }
                              }
                              selectValue={
                                Array [
                                  Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                ]
                              }
                              setValue={[Function]}
                              theme={
                                Object {
                                  "borderRadius": 4,
                                  "colors": Object {
                                    "danger": "#DE350B",
                                    "dangerLight": "#FFBDAD",
                                    "neutral0": "hsl(0, 0%, 100%)",
                                    "neutral10": "hsl(0, 0%, 90%)",
                                    "neutral20": "hsl(0, 0%, 80%)",
                                    "neutral30": "hsl(0, 0%, 70%)",
                                    "neutral40": "hsl(0, 0%, 60%)",
                                    "neutral5": "hsl(0, 0%, 95%)",
                                    "neutral50": "#56565a",
                                    "neutral60": "hsl(0, 0%, 40%)",
                                    "neutral70": "hsl(0, 0%, 30%)",
                                    "neutral80": "hsl(0, 0%, 20%)",
                                    "neutral90": "hsl(0, 0%, 10%)",
                                    "primary": "#2684FF",
                                    "primary25": "#DEEBFF",
                                    "primary50": "#B2D4FF",
                                    "primary75": "#4C9AFF",
                                  },
                                  "spacing": Object {
                                    "baseUnit": 4,
                                    "controlHeight": 38,
                                    "menuGutter": 8,
                                  },
                                }
                              }
                            >
                              <A11yText
                                aria-atomic="false"
                                aria-live="polite"
                                aria-relevant="additions text"
                              >
                                <EmotionCssPropInternal
                                  __EMOTION_LABEL_PLEASE_DO_NOT_USE__="A11yText"
                                  __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                  aria-atomic="false"
                                  aria-live="polite"
                                  aria-relevant="additions text"
                                  css={
                                    Object {
                                      "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFJIiwiZmlsZSI6IkExMXlUZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgdHlwZSBFbGVtZW50Q29uZmlnIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vLyBBc3Npc3RpdmUgdGV4dCB0byBkZXNjcmliZSB2aXN1YWwgZWxlbWVudHMuIEhpZGRlbiBmb3Igc2lnaHRlZCB1c2Vycy5cbmNvbnN0IEExMXlUZXh0ID0gKHByb3BzOiBFbGVtZW50Q29uZmlnPCdzcGFuJz4pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0= */",
                                      "name": "1f43avz-a11yText-A11yText",
                                      "styles": "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;",
                                      "toString": [Function],
                                    }
                                  }
                                >
                                  <span
                                    aria-atomic="false"
                                    aria-live="polite"
                                    aria-relevant="additions text"
                                    className="css-1f43avz-a11yText-A11yText"
                                  />
                                </EmotionCssPropInternal>
                              </A11yText>
                            </LiveRegion>
                            <Control
                              clearValue={[Function]}
                              cx={[Function]}
                              getStyles={[Function]}
                              getValue={[Function]}
                              hasValue={true}
                              innerProps={
                                Object {
                                  "onMouseDown": [Function],
                                  "onTouchEnd": [Function],
                                }
                              }
                              innerRef={[Function]}
                              isDisabled={false}
                              isFocused={false}
                              isMulti={false}
                              isRtl={false}
                              menuIsOpen={false}
                              options={
                                Array [
                                  Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                  Object {
                                    "label": "20",
                                    "value": 20,
                                  },
                                  Object {
                                    "label": "50",
                                    "value": 50,
                                  },
                                ]
                              }
                              selectOption={[Function]}
                              selectProps={
                                Object {
                                  "aria-live": "polite",
                                  "backspaceRemovesValue": true,
                                  "blurInputOnSelect": true,
                                  "borderless": true,
                                  "captureMenuScroll": false,
                                  "closeMenuOnScroll": false,
                                  "closeMenuOnSelect": true,
                                  "components": Object {
                                    "DropdownIndicator": [Function],
                                    "Option": [Function],
                                    "ValueContainer": [Function],
                                  },
                                  "controlShouldRenderValue": true,
                                  "dropdownIcon": undefined,
                                  "escapeClearsValue": false,
                                  "filterOption": [Function],
                                  "formatGroupLabel": [Function],
                                  "getOptionLabel": [Function],
                                  "getOptionValue": [Function],
                                  "hideDropdownIcon": false,
                                  "inputIcon": undefined,
                                  "inputValue": "",
                                  "isDisabled": false,
                                  "isLoading": false,
                                  "isMulti": false,
                                  "isOptionDisabled": [Function],
                                  "isRtl": false,
                                  "isSearchable": true,
                                  "loadingMessage": [Function],
                                  "maxMenuHeight": 300,
                                  "menuIsOpen": false,
                                  "menuPlacement": "auto",
                                  "menuPosition": "absolute",
                                  "menuShouldBlockScroll": false,
                                  "menuShouldScrollIntoView": true,
                                  "minMenuHeight": 140,
                                  "noOptionsMessage": [Function],
                                  "onChange": [Function],
                                  "onInputChange": [Function],
                                  "onMenuClose": [Function],
                                  "onMenuOpen": [Function],
                                  "openMenuOnClick": true,
                                  "openMenuOnFocus": false,
                                  "options": Array [
                                    Object {
                                      "label": "5",
                                      "value": 5,
                                    },
                                    Object {
                                      "label": "20",
                                      "value": 20,
                                    },
                                    Object {
                                      "label": "50",
                                      "value": 50,
                                    },
                                  ],
                                  "pageSize": 5,
                                  "placeholder": "Select...",
                                  "screenReaderStatus": [Function],
                                  "styles": Object {
                                    "clearIndicator": [Function],
                                    "container": [Function],
                                    "control": [Function],
                                    "dropdownIndicator": [Function],
                                    "indicatorSeparator": [Function],
                                    "indicatorsContainer": [Function],
                                    "menu": [Function],
                                    "menuList": [Function],
                                    "menuPortal": [Function],
                                    "option": [Function],
                                    "singleValue": [Function],
                                    "valueContainer": [Function],
                                  },
                                  "tabIndex": "0",
                                  "tabSelectsValue": true,
                                  "theme": [Function],
                                  "value": Object {
                                    "label": "5",
                                    "value": 5,
                                  },
                                }
                              }
                              setValue={[Function]}
                              theme={
                                Object {
                                  "borderRadius": 4,
                                  "colors": Object {
                                    "danger": "#DE350B",
                                    "dangerLight": "#FFBDAD",
                                    "neutral0": "hsl(0, 0%, 100%)",
                                    "neutral10": "hsl(0, 0%, 90%)",
                                    "neutral20": "hsl(0, 0%, 80%)",
                                    "neutral30": "hsl(0, 0%, 70%)",
                                    "neutral40": "hsl(0, 0%, 60%)",
                                    "neutral5": "hsl(0, 0%, 95%)",
                                    "neutral50": "#56565a",
                                    "neutral60": "hsl(0, 0%, 40%)",
                                    "neutral70": "hsl(0, 0%, 30%)",
                                    "neutral80": "hsl(0, 0%, 20%)",
                                    "neutral90": "hsl(0, 0%, 10%)",
                                    "primary": "#2684FF",
                                    "primary25": "#DEEBFF",
                                    "primary50": "#B2D4FF",
                                    "primary75": "#4C9AFF",
                                  },
                                  "spacing": Object {
                                    "baseUnit": 4,
                                    "controlHeight": 38,
                                    "menuGutter": 8,
                                  },
                                }
                              }
                            >
                              <EmotionCssPropInternal
                                __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Control"
                                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                className=""
                                css={
                                  Object {
                                    "&:hover": Object {
                                      "borderColor": "hsl(0, 0%, 70%)",
                                    },
                                    ":hover": Object {
                                      "backgroundColor": "#dfdfe3",
                                      "border": "none",
                                    },
                                    "alignItems": "center",
                                    "backgroundColor": "transparent",
                                    "border": "none",
                                    "borderColor": "hsl(0, 0%, 80%)",
                                    "borderRadius": "3px",
                                    "borderStyle": "solid",
                                    "borderWidth": 1,
                                    "boxShadow": "none",
                                    "boxSizing": "border-box",
                                    "cursor": "default",
                                    "display": "flex",
                                    "flexWrap": "wrap",
                                    "fontSize": "14px",
                                    "justifyContent": "space-between",
                                    "label": "control",
                                    "lineHeight": 1.5,
                                    "minHeight": "40px",
                                    "outline": "0 !important",
                                    "pointerEvents": "auto",
                                    "position": "relative",
                                    "transition": "background-color 0.2s ease-out, border-color 0.2s ease-out",
                                  }
                                }
                                onMouseDown={[Function]}
                                onTouchEnd={[Function]}
                              >
                                <div
                                  className=" css-1cyemx2-control"
                                  onMouseDown={[Function]}
                                  onTouchEnd={[Function]}
                                >
                                  <ValueContainer
                                    clearValue={[Function]}
                                    cx={[Function]}
                                    getStyles={[Function]}
                                    getValue={[Function]}
                                    hasValue={true}
                                    inputIcon={null}
                                    isDisabled={false}
                                    isMulti={false}
                                    isRtl={false}
                                    options={
                                      Array [
                                        Object {
                                          "label": "5",
                                          "value": 5,
                                        },
                                        Object {
                                          "label": "20",
                                          "value": 20,
                                        },
                                        Object {
                                          "label": "50",
                                          "value": 50,
                                        },
                                      ]
                                    }
                                    selectOption={[Function]}
                                    selectProps={
                                      Object {
                                        "aria-live": "polite",
                                        "backspaceRemovesValue": true,
                                        "blurInputOnSelect": true,
                                        "borderless": true,
                                        "captureMenuScroll": false,
                                        "closeMenuOnScroll": false,
                                        "closeMenuOnSelect": true,
                                        "components": Object {
                                          "DropdownIndicator": [Function],
                                          "Option": [Function],
                                          "ValueContainer": [Function],
                                        },
                                        "controlShouldRenderValue": true,
                                        "dropdownIcon": undefined,
                                        "escapeClearsValue": false,
                                        "filterOption": [Function],
                                        "formatGroupLabel": [Function],
                                        "getOptionLabel": [Function],
                                        "getOptionValue": [Function],
                                        "hideDropdownIcon": false,
                                        "inputIcon": undefined,
                                        "inputValue": "",
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "isMulti": false,
                                        "isOptionDisabled": [Function],
                                        "isRtl": false,
                                        "isSearchable": true,
                                        "loadingMessage": [Function],
                                        "maxMenuHeight": 300,
                                        "menuIsOpen": false,
                                        "menuPlacement": "auto",
                                        "menuPosition": "absolute",
                                        "menuShouldBlockScroll": false,
                                        "menuShouldScrollIntoView": true,
                                        "minMenuHeight": 140,
                                        "noOptionsMessage": [Function],
                                        "onChange": [Function],
                                        "onInputChange": [Function],
                                        "onMenuClose": [Function],
                                        "onMenuOpen": [Function],
                                        "openMenuOnClick": true,
                                        "openMenuOnFocus": false,
                                        "options": Array [
                                          Object {
                                            "label": "5",
                                            "value": 5,
                                          },
                                          Object {
                                            "label": "20",
                                            "value": 20,
                                          },
                                          Object {
                                            "label": "50",
                                            "value": 50,
                                          },
                                        ],
                                        "pageSize": 5,
                                        "placeholder": "Select...",
                                        "screenReaderStatus": [Function],
                                        "styles": Object {
                                          "clearIndicator": [Function],
                                          "container": [Function],
                                          "control": [Function],
                                          "dropdownIndicator": [Function],
                                          "indicatorSeparator": [Function],
                                          "indicatorsContainer": [Function],
                                          "menu": [Function],
                                          "menuList": [Function],
                                          "menuPortal": [Function],
                                          "option": [Function],
                                          "singleValue": [Function],
                                          "valueContainer": [Function],
                                        },
                                        "tabIndex": "0",
                                        "tabSelectsValue": true,
                                        "theme": [Function],
                                        "value": Object {
                                          "label": "5",
                                          "value": 5,
                                        },
                                      }
                                    }
                                    setValue={[Function]}
                                    theme={
                                      Object {
                                        "borderRadius": 4,
                                        "colors": Object {
                                          "danger": "#DE350B",
                                          "dangerLight": "#FFBDAD",
                                          "neutral0": "hsl(0, 0%, 100%)",
                                          "neutral10": "hsl(0, 0%, 90%)",
                                          "neutral20": "hsl(0, 0%, 80%)",
                                          "neutral30": "hsl(0, 0%, 70%)",
                                          "neutral40": "hsl(0, 0%, 60%)",
                                          "neutral5": "hsl(0, 0%, 95%)",
                                          "neutral50": "#56565a",
                                          "neutral60": "hsl(0, 0%, 40%)",
                                          "neutral70": "hsl(0, 0%, 30%)",
                                          "neutral80": "hsl(0, 0%, 20%)",
                                          "neutral90": "hsl(0, 0%, 10%)",
                                          "primary": "#2684FF",
                                          "primary25": "#DEEBFF",
                                          "primary50": "#B2D4FF",
                                          "primary75": "#4C9AFF",
                                        },
                                        "spacing": Object {
                                          "baseUnit": 4,
                                          "controlHeight": 38,
                                          "menuGutter": 8,
                                        },
                                      }
                                    }
                                  >
                                    <ValueContainer
                                      clearValue={[Function]}
                                      cx={[Function]}
                                      getStyles={[Function]}
                                      getValue={[Function]}
                                      hasValue={true}
                                      inputIcon={null}
                                      isDisabled={false}
                                      isMulti={false}
                                      isRtl={false}
                                      options={
                                        Array [
                                          Object {
                                            "label": "5",
                                            "value": 5,
                                          },
                                          Object {
                                            "label": "20",
                                            "value": 20,
                                          },
                                          Object {
                                            "label": "50",
                                            "value": 50,
                                          },
                                        ]
                                      }
                                      selectOption={[Function]}
                                      selectProps={
                                        Object {
                                          "aria-live": "polite",
                                          "backspaceRemovesValue": true,
                                          "blurInputOnSelect": true,
                                          "borderless": true,
                                          "captureMenuScroll": false,
                                          "closeMenuOnScroll": false,
                                          "closeMenuOnSelect": true,
                                          "components": Object {
                                            "DropdownIndicator": [Function],
                                            "Option": [Function],
                                            "ValueContainer": [Function],
                                          },
                                          "controlShouldRenderValue": true,
                                          "dropdownIcon": undefined,
                                          "escapeClearsValue": false,
                                          "filterOption": [Function],
                                          "formatGroupLabel": [Function],
                                          "getOptionLabel": [Function],
                                          "getOptionValue": [Function],
                                          "hideDropdownIcon": false,
                                          "inputIcon": undefined,
                                          "inputValue": "",
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "isMulti": false,
                                          "isOptionDisabled": [Function],
                                          "isRtl": false,
                                          "isSearchable": true,
                                          "loadingMessage": [Function],
                                          "maxMenuHeight": 300,
                                          "menuIsOpen": false,
                                          "menuPlacement": "auto",
                                          "menuPosition": "absolute",
                                          "menuShouldBlockScroll": false,
                                          "menuShouldScrollIntoView": true,
                                          "minMenuHeight": 140,
                                          "noOptionsMessage": [Function],
                                          "onChange": [Function],
                                          "onInputChange": [Function],
                                          "onMenuClose": [Function],
                                          "onMenuOpen": [Function],
                                          "openMenuOnClick": true,
                                          "openMenuOnFocus": false,
                                          "options": Array [
                                            Object {
                                              "label": "5",
                                              "value": 5,
                                            },
                                            Object {
                                              "label": "20",
                                              "value": 20,
                                            },
                                            Object {
                                              "label": "50",
                                              "value": 50,
                                            },
                                          ],
                                          "pageSize": 5,
                                          "placeholder": "Select...",
                                          "screenReaderStatus": [Function],
                                          "styles": Object {
                                            "clearIndicator": [Function],
                                            "container": [Function],
                                            "control": [Function],
                                            "dropdownIndicator": [Function],
                                            "indicatorSeparator": [Function],
                                            "indicatorsContainer": [Function],
                                            "menu": [Function],
                                            "menuList": [Function],
                                            "menuPortal": [Function],
                                            "option": [Function],
                                            "singleValue": [Function],
                                            "valueContainer": [Function],
                                          },
                                          "tabIndex": "0",
                                          "tabSelectsValue": true,
                                          "theme": [Function],
                                          "value": Object {
                                            "label": "5",
                                            "value": 5,
                                          },
                                        }
                                      }
                                      setValue={[Function]}
                                      theme={
                                        Object {
                                          "borderRadius": 4,
                                          "colors": Object {
                                            "danger": "#DE350B",
                                            "dangerLight": "#FFBDAD",
                                            "neutral0": "hsl(0, 0%, 100%)",
                                            "neutral10": "hsl(0, 0%, 90%)",
                                            "neutral20": "hsl(0, 0%, 80%)",
                                            "neutral30": "hsl(0, 0%, 70%)",
                                            "neutral40": "hsl(0, 0%, 60%)",
                                            "neutral5": "hsl(0, 0%, 95%)",
                                            "neutral50": "#56565a",
                                            "neutral60": "hsl(0, 0%, 40%)",
                                            "neutral70": "hsl(0, 0%, 30%)",
                                            "neutral80": "hsl(0, 0%, 20%)",
                                            "neutral90": "hsl(0, 0%, 10%)",
                                            "primary": "#2684FF",
                                            "primary25": "#DEEBFF",
                                            "primary50": "#B2D4FF",
                                            "primary75": "#4C9AFF",
                                          },
                                          "spacing": Object {
                                            "baseUnit": 4,
                                            "controlHeight": 38,
                                            "menuGutter": 8,
                                          },
                                        }
                                      }
                                    >
                                      <EmotionCssPropInternal
                                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="ValueContainer"
                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                        className=""
                                        css={
                                          Object {
                                            "WebkitOverflowScrolling": "touch",
                                            "alignItems": "center",
                                            "boxSizing": "border-box",
                                            "display": "flex",
                                            "flex": 1,
                                            "flexWrap": "wrap",
                                            "overflow": "hidden",
                                            "padding": "0 10px",
                                            "position": "relative",
                                          }
                                        }
                                      >
                                        <div
                                          className=" css-1xmm524-ValueContainer"
                                        >
                                          <SingleValue
                                            clearValue={[Function]}
                                            cx={[Function]}
                                            data={
                                              Object {
                                                "label": "5",
                                                "value": 5,
                                              }
                                            }
                                            getStyles={[Function]}
                                            getValue={[Function]}
                                            hasValue={true}
                                            isDisabled={false}
                                            isMulti={false}
                                            isRtl={false}
                                            options={
                                              Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ]
                                            }
                                            selectOption={[Function]}
                                            selectProps={
                                              Object {
                                                "aria-live": "polite",
                                                "backspaceRemovesValue": true,
                                                "blurInputOnSelect": true,
                                                "borderless": true,
                                                "captureMenuScroll": false,
                                                "closeMenuOnScroll": false,
                                                "closeMenuOnSelect": true,
                                                "components": Object {
                                                  "DropdownIndicator": [Function],
                                                  "Option": [Function],
                                                  "ValueContainer": [Function],
                                                },
                                                "controlShouldRenderValue": true,
                                                "dropdownIcon": undefined,
                                                "escapeClearsValue": false,
                                                "filterOption": [Function],
                                                "formatGroupLabel": [Function],
                                                "getOptionLabel": [Function],
                                                "getOptionValue": [Function],
                                                "hideDropdownIcon": false,
                                                "inputIcon": undefined,
                                                "inputValue": "",
                                                "isDisabled": false,
                                                "isLoading": false,
                                                "isMulti": false,
                                                "isOptionDisabled": [Function],
                                                "isRtl": false,
                                                "isSearchable": true,
                                                "loadingMessage": [Function],
                                                "maxMenuHeight": 300,
                                                "menuIsOpen": false,
                                                "menuPlacement": "auto",
                                                "menuPosition": "absolute",
                                                "menuShouldBlockScroll": false,
                                                "menuShouldScrollIntoView": true,
                                                "minMenuHeight": 140,
                                                "noOptionsMessage": [Function],
                                                "onChange": [Function],
                                                "onInputChange": [Function],
                                                "onMenuClose": [Function],
                                                "onMenuOpen": [Function],
                                                "openMenuOnClick": true,
                                                "openMenuOnFocus": false,
                                                "options": Array [
                                                  Object {
                                                    "label": "5",
                                                    "value": 5,
                                                  },
                                                  Object {
                                                    "label": "20",
                                                    "value": 20,
                                                  },
                                                  Object {
                                                    "label": "50",
                                                    "value": 50,
                                                  },
                                                ],
                                                "pageSize": 5,
                                                "placeholder": "Select...",
                                                "screenReaderStatus": [Function],
                                                "styles": Object {
                                                  "clearIndicator": [Function],
                                                  "container": [Function],
                                                  "control": [Function],
                                                  "dropdownIndicator": [Function],
                                                  "indicatorSeparator": [Function],
                                                  "indicatorsContainer": [Function],
                                                  "menu": [Function],
                                                  "menuList": [Function],
                                                  "menuPortal": [Function],
                                                  "option": [Function],
                                                  "singleValue": [Function],
                                                  "valueContainer": [Function],
                                                },
                                                "tabIndex": "0",
                                                "tabSelectsValue": true,
                                                "theme": [Function],
                                                "value": Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                              }
                                            }
                                            setValue={[Function]}
                                            theme={
                                              Object {
                                                "borderRadius": 4,
                                                "colors": Object {
                                                  "danger": "#DE350B",
                                                  "dangerLight": "#FFBDAD",
                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                  "neutral50": "#56565a",
                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                  "primary": "#2684FF",
                                                  "primary25": "#DEEBFF",
                                                  "primary50": "#B2D4FF",
                                                  "primary75": "#4C9AFF",
                                                },
                                                "spacing": Object {
                                                  "baseUnit": 4,
                                                  "controlHeight": 38,
                                                  "menuGutter": 8,
                                                },
                                              }
                                            }
                                          >
                                            <EmotionCssPropInternal
                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="SingleValue"
                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                              className=""
                                              css={
                                                Object {
                                                  "boxSizing": "border-box",
                                                  "color": "inherit",
                                                  "label": "singleValue",
                                                  "marginLeft": 2,
                                                  "marginRight": 2,
                                                  "maxWidth": "calc(100% - 8px)",
                                                  "overflow": "hidden",
                                                  "position": "absolute",
                                                  "textOverflow": "ellipsis",
                                                  "top": "50%",
                                                  "transform": "translateY(-50%)",
                                                  "whiteSpace": "nowrap",
                                                }
                                              }
                                            >
                                              <div
                                                className=" css-1xqm9c7-singleValue"
                                              >
                                                5
                                              </div>
                                            </EmotionCssPropInternal>
                                          </SingleValue>
                                          <Input
                                            aria-autocomplete="list"
                                            autoCapitalize="none"
                                            autoComplete="off"
                                            autoCorrect="off"
                                            clearValue={[Function]}
                                            cx={[Function]}
                                            getStyles={[Function]}
                                            getValue={[Function]}
                                            hasValue={true}
                                            id="react-select-3-input"
                                            innerRef={[Function]}
                                            isDisabled={false}
                                            isHidden={false}
                                            isMulti={false}
                                            isRtl={false}
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            options={
                                              Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ]
                                            }
                                            selectOption={[Function]}
                                            selectProps={
                                              Object {
                                                "aria-live": "polite",
                                                "backspaceRemovesValue": true,
                                                "blurInputOnSelect": true,
                                                "borderless": true,
                                                "captureMenuScroll": false,
                                                "closeMenuOnScroll": false,
                                                "closeMenuOnSelect": true,
                                                "components": Object {
                                                  "DropdownIndicator": [Function],
                                                  "Option": [Function],
                                                  "ValueContainer": [Function],
                                                },
                                                "controlShouldRenderValue": true,
                                                "dropdownIcon": undefined,
                                                "escapeClearsValue": false,
                                                "filterOption": [Function],
                                                "formatGroupLabel": [Function],
                                                "getOptionLabel": [Function],
                                                "getOptionValue": [Function],
                                                "hideDropdownIcon": false,
                                                "inputIcon": undefined,
                                                "inputValue": "",
                                                "isDisabled": false,
                                                "isLoading": false,
                                                "isMulti": false,
                                                "isOptionDisabled": [Function],
                                                "isRtl": false,
                                                "isSearchable": true,
                                                "loadingMessage": [Function],
                                                "maxMenuHeight": 300,
                                                "menuIsOpen": false,
                                                "menuPlacement": "auto",
                                                "menuPosition": "absolute",
                                                "menuShouldBlockScroll": false,
                                                "menuShouldScrollIntoView": true,
                                                "minMenuHeight": 140,
                                                "noOptionsMessage": [Function],
                                                "onChange": [Function],
                                                "onInputChange": [Function],
                                                "onMenuClose": [Function],
                                                "onMenuOpen": [Function],
                                                "openMenuOnClick": true,
                                                "openMenuOnFocus": false,
                                                "options": Array [
                                                  Object {
                                                    "label": "5",
                                                    "value": 5,
                                                  },
                                                  Object {
                                                    "label": "20",
                                                    "value": 20,
                                                  },
                                                  Object {
                                                    "label": "50",
                                                    "value": 50,
                                                  },
                                                ],
                                                "pageSize": 5,
                                                "placeholder": "Select...",
                                                "screenReaderStatus": [Function],
                                                "styles": Object {
                                                  "clearIndicator": [Function],
                                                  "container": [Function],
                                                  "control": [Function],
                                                  "dropdownIndicator": [Function],
                                                  "indicatorSeparator": [Function],
                                                  "indicatorsContainer": [Function],
                                                  "menu": [Function],
                                                  "menuList": [Function],
                                                  "menuPortal": [Function],
                                                  "option": [Function],
                                                  "singleValue": [Function],
                                                  "valueContainer": [Function],
                                                },
                                                "tabIndex": "0",
                                                "tabSelectsValue": true,
                                                "theme": [Function],
                                                "value": Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                              }
                                            }
                                            setValue={[Function]}
                                            spellCheck="false"
                                            tabIndex="0"
                                            theme={
                                              Object {
                                                "borderRadius": 4,
                                                "colors": Object {
                                                  "danger": "#DE350B",
                                                  "dangerLight": "#FFBDAD",
                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                  "neutral50": "#56565a",
                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                  "primary": "#2684FF",
                                                  "primary25": "#DEEBFF",
                                                  "primary50": "#B2D4FF",
                                                  "primary75": "#4C9AFF",
                                                },
                                                "spacing": Object {
                                                  "baseUnit": 4,
                                                  "controlHeight": 38,
                                                  "menuGutter": 8,
                                                },
                                              }
                                            }
                                            type="text"
                                            value=""
                                          >
                                            <EmotionCssPropInternal
                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Input"
                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                              css={
                                                Object {
                                                  "boxSizing": "border-box",
                                                  "color": "hsl(0, 0%, 20%)",
                                                  "margin": 2,
                                                  "paddingBottom": 2,
                                                  "paddingTop": 2,
                                                  "visibility": "visible",
                                                }
                                              }
                                            >
                                              <div
                                                className="css-b8ldur-Input"
                                              >
                                                <AutosizeInput
                                                  aria-autocomplete="list"
                                                  autoCapitalize="none"
                                                  autoComplete="off"
                                                  autoCorrect="off"
                                                  className=""
                                                  disabled={false}
                                                  id="react-select-3-input"
                                                  injectStyles={true}
                                                  inputRef={[Function]}
                                                  inputStyle={
                                                    Object {
                                                      "background": 0,
                                                      "border": 0,
                                                      "color": "inherit",
                                                      "fontSize": "inherit",
                                                      "label": "input",
                                                      "opacity": 1,
                                                      "outline": 0,
                                                      "padding": 0,
                                                    }
                                                  }
                                                  minWidth={1}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  spellCheck="false"
                                                  tabIndex="0"
                                                  type="text"
                                                  value=""
                                                >
                                                  <div
                                                    className=""
                                                    style={
                                                      Object {
                                                        "display": "inline-block",
                                                      }
                                                    }
                                                  >
                                                    <input
                                                      aria-autocomplete="list"
                                                      autoCapitalize="none"
                                                      autoComplete="off"
                                                      autoCorrect="off"
                                                      disabled={false}
                                                      id="react-select-3-input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      spellCheck="false"
                                                      style={
                                                        Object {
                                                          "background": 0,
                                                          "border": 0,
                                                          "boxSizing": "content-box",
                                                          "color": "inherit",
                                                          "fontSize": "inherit",
                                                          "label": "input",
                                                          "opacity": 1,
                                                          "outline": 0,
                                                          "padding": 0,
                                                          "width": "2px",
                                                        }
                                                      }
                                                      tabIndex="0"
                                                      type="text"
                                                      value=""
                                                    />
                                                    <div
                                                      style={
                                                        Object {
                                                          "height": 0,
                                                          "left": 0,
                                                          "overflow": "scroll",
                                                          "position": "absolute",
                                                          "top": 0,
                                                          "visibility": "hidden",
                                                          "whiteSpace": "pre",
                                                        }
                                                      }
                                                    />
                                                  </div>
                                                </AutosizeInput>
                                              </div>
                                            </EmotionCssPropInternal>
                                          </Input>
                                        </div>
                                      </EmotionCssPropInternal>
                                    </ValueContainer>
                                  </ValueContainer>
                                  <IndicatorsContainer
                                    clearValue={[Function]}
                                    cx={[Function]}
                                    getStyles={[Function]}
                                    getValue={[Function]}
                                    hasValue={true}
                                    isDisabled={false}
                                    isMulti={false}
                                    isRtl={false}
                                    options={
                                      Array [
                                        Object {
                                          "label": "5",
                                          "value": 5,
                                        },
                                        Object {
                                          "label": "20",
                                          "value": 20,
                                        },
                                        Object {
                                          "label": "50",
                                          "value": 50,
                                        },
                                      ]
                                    }
                                    selectOption={[Function]}
                                    selectProps={
                                      Object {
                                        "aria-live": "polite",
                                        "backspaceRemovesValue": true,
                                        "blurInputOnSelect": true,
                                        "borderless": true,
                                        "captureMenuScroll": false,
                                        "closeMenuOnScroll": false,
                                        "closeMenuOnSelect": true,
                                        "components": Object {
                                          "DropdownIndicator": [Function],
                                          "Option": [Function],
                                          "ValueContainer": [Function],
                                        },
                                        "controlShouldRenderValue": true,
                                        "dropdownIcon": undefined,
                                        "escapeClearsValue": false,
                                        "filterOption": [Function],
                                        "formatGroupLabel": [Function],
                                        "getOptionLabel": [Function],
                                        "getOptionValue": [Function],
                                        "hideDropdownIcon": false,
                                        "inputIcon": undefined,
                                        "inputValue": "",
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "isMulti": false,
                                        "isOptionDisabled": [Function],
                                        "isRtl": false,
                                        "isSearchable": true,
                                        "loadingMessage": [Function],
                                        "maxMenuHeight": 300,
                                        "menuIsOpen": false,
                                        "menuPlacement": "auto",
                                        "menuPosition": "absolute",
                                        "menuShouldBlockScroll": false,
                                        "menuShouldScrollIntoView": true,
                                        "minMenuHeight": 140,
                                        "noOptionsMessage": [Function],
                                        "onChange": [Function],
                                        "onInputChange": [Function],
                                        "onMenuClose": [Function],
                                        "onMenuOpen": [Function],
                                        "openMenuOnClick": true,
                                        "openMenuOnFocus": false,
                                        "options": Array [
                                          Object {
                                            "label": "5",
                                            "value": 5,
                                          },
                                          Object {
                                            "label": "20",
                                            "value": 20,
                                          },
                                          Object {
                                            "label": "50",
                                            "value": 50,
                                          },
                                        ],
                                        "pageSize": 5,
                                        "placeholder": "Select...",
                                        "screenReaderStatus": [Function],
                                        "styles": Object {
                                          "clearIndicator": [Function],
                                          "container": [Function],
                                          "control": [Function],
                                          "dropdownIndicator": [Function],
                                          "indicatorSeparator": [Function],
                                          "indicatorsContainer": [Function],
                                          "menu": [Function],
                                          "menuList": [Function],
                                          "menuPortal": [Function],
                                          "option": [Function],
                                          "singleValue": [Function],
                                          "valueContainer": [Function],
                                        },
                                        "tabIndex": "0",
                                        "tabSelectsValue": true,
                                        "theme": [Function],
                                        "value": Object {
                                          "label": "5",
                                          "value": 5,
                                        },
                                      }
                                    }
                                    setValue={[Function]}
                                    theme={
                                      Object {
                                        "borderRadius": 4,
                                        "colors": Object {
                                          "danger": "#DE350B",
                                          "dangerLight": "#FFBDAD",
                                          "neutral0": "hsl(0, 0%, 100%)",
                                          "neutral10": "hsl(0, 0%, 90%)",
                                          "neutral20": "hsl(0, 0%, 80%)",
                                          "neutral30": "hsl(0, 0%, 70%)",
                                          "neutral40": "hsl(0, 0%, 60%)",
                                          "neutral5": "hsl(0, 0%, 95%)",
                                          "neutral50": "#56565a",
                                          "neutral60": "hsl(0, 0%, 40%)",
                                          "neutral70": "hsl(0, 0%, 30%)",
                                          "neutral80": "hsl(0, 0%, 20%)",
                                          "neutral90": "hsl(0, 0%, 10%)",
                                          "primary": "#2684FF",
                                          "primary25": "#DEEBFF",
                                          "primary50": "#B2D4FF",
                                          "primary75": "#4C9AFF",
                                        },
                                        "spacing": Object {
                                          "baseUnit": 4,
                                          "controlHeight": 38,
                                          "menuGutter": 8,
                                        },
                                      }
                                    }
                                  >
                                    <EmotionCssPropInternal
                                      __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorsContainer"
                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                      className=""
                                      css={
                                        Object {
                                          "alignItems": "center",
                                          "alignSelf": "stretch",
                                          "boxSizing": "border-box",
                                          "color": "#8b8b90",
                                          "display": "flex",
                                          "flexShrink": 0,
                                          "marginRight": "5px",
                                        }
                                      }
                                    >
                                      <div
                                        className=" css-78af7f-IndicatorsContainer"
                                      >
                                        <IndicatorSeparator
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={true}
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={false}
                                          isRtl={false}
                                          options={
                                            Array [
                                              Object {
                                                "label": "5",
                                                "value": 5,
                                              },
                                              Object {
                                                "label": "20",
                                                "value": 20,
                                              },
                                              Object {
                                                "label": "50",
                                                "value": 50,
                                              },
                                            ]
                                          }
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "aria-live": "polite",
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": true,
                                              "borderless": true,
                                              "captureMenuScroll": false,
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {
                                                "DropdownIndicator": [Function],
                                                "Option": [Function],
                                                "ValueContainer": [Function],
                                              },
                                              "controlShouldRenderValue": true,
                                              "dropdownIcon": undefined,
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatGroupLabel": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "hideDropdownIcon": false,
                                              "inputIcon": undefined,
                                              "inputValue": "",
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": false,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 300,
                                              "menuIsOpen": false,
                                              "menuPlacement": "auto",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "noOptionsMessage": [Function],
                                              "onChange": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ],
                                              "pageSize": 5,
                                              "placeholder": "Select...",
                                              "screenReaderStatus": [Function],
                                              "styles": Object {
                                                "clearIndicator": [Function],
                                                "container": [Function],
                                                "control": [Function],
                                                "dropdownIndicator": [Function],
                                                "indicatorSeparator": [Function],
                                                "indicatorsContainer": [Function],
                                                "menu": [Function],
                                                "menuList": [Function],
                                                "menuPortal": [Function],
                                                "option": [Function],
                                                "singleValue": [Function],
                                                "valueContainer": [Function],
                                              },
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "theme": [Function],
                                              "value": Object {
                                                "label": "5",
                                                "value": 5,
                                              },
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 4,
                                              "colors": Object {
                                                "danger": "#DE350B",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "#56565a",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#2684FF",
                                                "primary25": "#DEEBFF",
                                                "primary50": "#B2D4FF",
                                                "primary75": "#4C9AFF",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <EmotionCssPropInternal
                                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorSeparator"
                                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                            className=""
                                            css={
                                              Object {
                                                "display": "none",
                                              }
                                            }
                                          >
                                            <span
                                              className=" css-1xjgjl1-IndicatorSeparator"
                                            />
                                          </EmotionCssPropInternal>
                                        </IndicatorSeparator>
                                        <LUKDropdownIndicator
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={true}
                                          innerProps={
                                            Object {
                                              "aria-hidden": "true",
                                              "onMouseDown": [Function],
                                              "onTouchEnd": [Function],
                                            }
                                          }
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={false}
                                          isRtl={false}
                                          options={
                                            Array [
                                              Object {
                                                "label": "5",
                                                "value": 5,
                                              },
                                              Object {
                                                "label": "20",
                                                "value": 20,
                                              },
                                              Object {
                                                "label": "50",
                                                "value": 50,
                                              },
                                            ]
                                          }
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "aria-live": "polite",
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": true,
                                              "borderless": true,
                                              "captureMenuScroll": false,
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {
                                                "DropdownIndicator": [Function],
                                                "Option": [Function],
                                                "ValueContainer": [Function],
                                              },
                                              "controlShouldRenderValue": true,
                                              "dropdownIcon": undefined,
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatGroupLabel": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "hideDropdownIcon": false,
                                              "inputIcon": undefined,
                                              "inputValue": "",
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": false,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 300,
                                              "menuIsOpen": false,
                                              "menuPlacement": "auto",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "noOptionsMessage": [Function],
                                              "onChange": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ],
                                              "pageSize": 5,
                                              "placeholder": "Select...",
                                              "screenReaderStatus": [Function],
                                              "styles": Object {
                                                "clearIndicator": [Function],
                                                "container": [Function],
                                                "control": [Function],
                                                "dropdownIndicator": [Function],
                                                "indicatorSeparator": [Function],
                                                "indicatorsContainer": [Function],
                                                "menu": [Function],
                                                "menuList": [Function],
                                                "menuPortal": [Function],
                                                "option": [Function],
                                                "singleValue": [Function],
                                                "valueContainer": [Function],
                                              },
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "theme": [Function],
                                              "value": Object {
                                                "label": "5",
                                                "value": 5,
                                              },
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 4,
                                              "colors": Object {
                                                "danger": "#DE350B",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "#56565a",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#2684FF",
                                                "primary25": "#DEEBFF",
                                                "primary50": "#B2D4FF",
                                                "primary75": "#4C9AFF",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <DropdownIndicator
                                            clearValue={[Function]}
                                            cx={[Function]}
                                            getStyles={[Function]}
                                            getValue={[Function]}
                                            hasValue={true}
                                            innerProps={
                                              Object {
                                                "aria-hidden": "true",
                                                "onMouseDown": [Function],
                                                "onTouchEnd": [Function],
                                              }
                                            }
                                            isDisabled={false}
                                            isFocused={false}
                                            isMulti={false}
                                            isRtl={false}
                                            options={
                                              Array [
                                                Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                                Object {
                                                  "label": "20",
                                                  "value": 20,
                                                },
                                                Object {
                                                  "label": "50",
                                                  "value": 50,
                                                },
                                              ]
                                            }
                                            selectOption={[Function]}
                                            selectProps={
                                              Object {
                                                "aria-live": "polite",
                                                "backspaceRemovesValue": true,
                                                "blurInputOnSelect": true,
                                                "borderless": true,
                                                "captureMenuScroll": false,
                                                "closeMenuOnScroll": false,
                                                "closeMenuOnSelect": true,
                                                "components": Object {
                                                  "DropdownIndicator": [Function],
                                                  "Option": [Function],
                                                  "ValueContainer": [Function],
                                                },
                                                "controlShouldRenderValue": true,
                                                "dropdownIcon": undefined,
                                                "escapeClearsValue": false,
                                                "filterOption": [Function],
                                                "formatGroupLabel": [Function],
                                                "getOptionLabel": [Function],
                                                "getOptionValue": [Function],
                                                "hideDropdownIcon": false,
                                                "inputIcon": undefined,
                                                "inputValue": "",
                                                "isDisabled": false,
                                                "isLoading": false,
                                                "isMulti": false,
                                                "isOptionDisabled": [Function],
                                                "isRtl": false,
                                                "isSearchable": true,
                                                "loadingMessage": [Function],
                                                "maxMenuHeight": 300,
                                                "menuIsOpen": false,
                                                "menuPlacement": "auto",
                                                "menuPosition": "absolute",
                                                "menuShouldBlockScroll": false,
                                                "menuShouldScrollIntoView": true,
                                                "minMenuHeight": 140,
                                                "noOptionsMessage": [Function],
                                                "onChange": [Function],
                                                "onInputChange": [Function],
                                                "onMenuClose": [Function],
                                                "onMenuOpen": [Function],
                                                "openMenuOnClick": true,
                                                "openMenuOnFocus": false,
                                                "options": Array [
                                                  Object {
                                                    "label": "5",
                                                    "value": 5,
                                                  },
                                                  Object {
                                                    "label": "20",
                                                    "value": 20,
                                                  },
                                                  Object {
                                                    "label": "50",
                                                    "value": 50,
                                                  },
                                                ],
                                                "pageSize": 5,
                                                "placeholder": "Select...",
                                                "screenReaderStatus": [Function],
                                                "styles": Object {
                                                  "clearIndicator": [Function],
                                                  "container": [Function],
                                                  "control": [Function],
                                                  "dropdownIndicator": [Function],
                                                  "indicatorSeparator": [Function],
                                                  "indicatorsContainer": [Function],
                                                  "menu": [Function],
                                                  "menuList": [Function],
                                                  "menuPortal": [Function],
                                                  "option": [Function],
                                                  "singleValue": [Function],
                                                  "valueContainer": [Function],
                                                },
                                                "tabIndex": "0",
                                                "tabSelectsValue": true,
                                                "theme": [Function],
                                                "value": Object {
                                                  "label": "5",
                                                  "value": 5,
                                                },
                                              }
                                            }
                                            setValue={[Function]}
                                            theme={
                                              Object {
                                                "borderRadius": 4,
                                                "colors": Object {
                                                  "danger": "#DE350B",
                                                  "dangerLight": "#FFBDAD",
                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                  "neutral50": "#56565a",
                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                  "primary": "#2684FF",
                                                  "primary25": "#DEEBFF",
                                                  "primary50": "#B2D4FF",
                                                  "primary75": "#4C9AFF",
                                                },
                                                "spacing": Object {
                                                  "baseUnit": 4,
                                                  "controlHeight": 38,
                                                  "menuGutter": 8,
                                                },
                                              }
                                            }
                                          >
                                            <EmotionCssPropInternal
                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="DropdownIndicator"
                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                              aria-hidden="true"
                                              className=""
                                              css={
                                                Object {
                                                  "color": "#8b8b90",
                                                  "display": "flex",
                                                  "margin": "5px",
                                                  "padding": "0",
                                                }
                                              }
                                              onMouseDown={[Function]}
                                              onTouchEnd={[Function]}
                                            >
                                              <div
                                                aria-hidden="true"
                                                className=" css-144p37m-DropdownIndicator"
                                                onMouseDown={[Function]}
                                                onTouchEnd={[Function]}
                                              >
                                                <DownChevron>
                                                  <Svg
                                                    size={20}
                                                  >
                                                    <EmotionCssPropInternal
                                                      __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Svg"
                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                      aria-hidden="true"
                                                      css={
                                                        Object {
                                                          "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                                          "name": "tj5bde-Svg",
                                                          "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;label:Svg;",
                                                          "toString": [Function],
                                                        }
                                                      }
                                                      focusable="false"
                                                      height={20}
                                                      viewBox="0 0 20 20"
                                                      width={20}
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className="css-tj5bde-Svg"
                                                        focusable="false"
                                                        height={20}
                                                        viewBox="0 0 20 20"
                                                        width={20}
                                                      >
                                                        <path
                                                          d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                                        />
                                                      </svg>
                                                    </EmotionCssPropInternal>
                                                  </Svg>
                                                </DownChevron>
                                              </div>
                                            </EmotionCssPropInternal>
                                          </DropdownIndicator>
                                        </LUKDropdownIndicator>
                                      </div>
                                    </EmotionCssPropInternal>
                                  </IndicatorsContainer>
                                </div>
                              </EmotionCssPropInternal>
                            </Control>
                          </div>
                        </EmotionCssPropInternal>
                      </SelectContainer>
                    </Select>
                  </StateManager>
                </SelectController>
              </Select>
            </div>
          </styled.div>
          <WithStyles(ForwardRef(Pagination))
            count={2}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={2}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to page 2"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to page 2"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to page 2"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to page 2"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to page 2"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              2
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="3"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
  </div>
</Table>
`;

exports[`Table handlePageChange should set page and rowsPerPage when invoked 1`] = `
.c1 {
  background-color: white;
  border-collapse: collapse;
  border: none;
  table-layout: fixed;
  width: 100%;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  width: 100%;
  margin: 8px 0;
}

.c3 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
  width: 33%;
}

.c4 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c5 {
  background-color: #f9f9fc;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c7 {
  background-color: inherit;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c2 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

.c2 td,
.c2 th {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 200;
}

.c6 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

<Table
  data={
    Array [
      Object {
        "dob": "1942-11-30",
        "id": "1",
        "lastUpdated": "2019-09-01",
        "manager": "Spongebob",
        "name": "Eugene Krabs",
      },
      Object {
        "dob": "",
        "id": "2",
        "lastUpdated": "2019-08-29",
        "manager": "Smitty",
        "name": "Squidward Tentacles",
      },
      Object {
        "dob": "1987-11-17",
        "id": "3",
        "lastUpdated": "2019-07-30",
        "manager": "Patrick",
        "name": "Sandy Cheeks",
      },
      Object {
        "dob": "1975-06-23",
        "id": "4",
        "lastUpdated": "2019-08-16",
        "manager": "Patchy",
        "name": "Larry the Lobster",
      },
      Object {
        "dob": "1942-11-30",
        "id": "5",
        "lastUpdated": "2019-08-20",
        "manager": "Spongebob",
        "name": "Sheldon Plankton",
      },
      Object {
        "dob": "",
        "id": "6",
        "lastUpdated": "2019-08-21",
        "manager": "Spongebob",
        "name": "Mrs. Puff",
      },
      Object {
        "dob": "1678-04-20",
        "id": "7",
        "lastUpdated": "2019-06-21",
        "manager": "Spongebob",
        "name": "Flying Dutchman",
      },
      Object {
        "dob": "1999-07-17",
        "id": "8",
        "lastUpdated": "2019-06-21",
        "manager": "Eugene Krabs",
        "name": "Spongebob Squarepants",
      },
      Object {
        "dob": "1984-03-17",
        "id": "9",
        "lastUpdated": "2019-06-21",
        "manager": "N/A",
        "name": "Patrick Star",
      },
    ]
  }
  headers={
    Array [
      Object {
        "cellStyle": Object {
          "width": "33%",
        },
        "key": "name",
        "label": "Subject Name",
      },
      Object {
        "key": "dob",
        "label": "Date of Birth",
      },
      Object {
        "key": "manager",
        "label": "Manager",
      },
      Object {
        "key": "lastUpdated",
        "label": "Last Updated",
      },
      Object {
        "key": "id",
        "label": "ID",
        "sortable": false,
      },
    ]
  }
  paginated={true}
>
  <div>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={9}
      rowsPerPageOptions={Array []}
    >
      <styled.div>
        <div
          className="c0"
        >
          <WithStyles(ForwardRef(Pagination))
            count={1}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={1}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
    <styled.table>
      <table
        className="c1"
      >
        <TableHeader
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          onSort={[Function]}
          order={false}
          sticky={true}
        >
          <thead>
            <styled.tr
              sticky={true}
            >
              <tr
                className="c2"
              >
                <HeadCell
                  cellStyle={
                    Object {
                      "width": "33%",
                    }
                  }
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="name"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={
                      Object {
                        "width": "33%",
                      }
                    }
                    onClick={[Function]}
                  >
                    <th
                      className="c3"
                      onClick={[Function]}
                    >
                      Subject Name
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="dob"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Date of Birth
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="manager"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Manager
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="lastUpdated"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Last Updated
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="id"
                  order={false}
                  sortable={false}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                  >
                    <th
                      className="c5"
                    >
                      ID
                    </th>
                  </Cell>
                </HeadCell>
              </tr>
            </styled.tr>
          </thead>
        </TableHeader>
        <TableBody
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          data={
            Array [
              Object {
                "dob": "1942-11-30",
                "id": "1",
                "lastUpdated": "2019-09-01",
                "manager": "Spongebob",
                "name": "Eugene Krabs",
              },
              Object {
                "dob": "",
                "id": "2",
                "lastUpdated": "2019-08-29",
                "manager": "Smitty",
                "name": "Squidward Tentacles",
              },
              Object {
                "dob": "1987-11-17",
                "id": "3",
                "lastUpdated": "2019-07-30",
                "manager": "Patrick",
                "name": "Sandy Cheeks",
              },
              Object {
                "dob": "1975-06-23",
                "id": "4",
                "lastUpdated": "2019-08-16",
                "manager": "Patchy",
                "name": "Larry the Lobster",
              },
              Object {
                "dob": "1942-11-30",
                "id": "5",
                "lastUpdated": "2019-08-20",
                "manager": "Spongebob",
                "name": "Sheldon Plankton",
              },
              Object {
                "dob": "",
                "id": "6",
                "lastUpdated": "2019-08-21",
                "manager": "Spongebob",
                "name": "Mrs. Puff",
              },
              Object {
                "dob": "1678-04-20",
                "id": "7",
                "lastUpdated": "2019-06-21",
                "manager": "Spongebob",
                "name": "Flying Dutchman",
              },
              Object {
                "dob": "1999-07-17",
                "id": "8",
                "lastUpdated": "2019-06-21",
                "manager": "Eugene Krabs",
                "name": "Spongebob Squarepants",
              },
              Object {
                "dob": "1984-03-17",
                "id": "9",
                "lastUpdated": "2019-06-21",
                "manager": "N/A",
                "name": "Patrick Star",
              },
            ]
          }
          exact={false}
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          page={1}
          rowsPerPage={9}
        >
          <tbody>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "1",
                  "lastUpdated": "2019-09-01",
                  "manager": "Spongebob",
                  "name": "Eugene Krabs",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="1"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="1_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-09-01
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      1
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "2",
                  "lastUpdated": "2019-08-29",
                  "manager": "Smitty",
                  "name": "Squidward Tentacles",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="2"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="2_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Squidward Tentacles
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_dob"
                  >
                    <td
                      className="c7"
                    />
                  </Cell>
                  <Cell
                    key="2_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Smitty
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-29
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      2
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1987-11-17",
                  "id": "3",
                  "lastUpdated": "2019-07-30",
                  "manager": "Patrick",
                  "name": "Sandy Cheeks",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="3"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="3_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Sandy Cheeks
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1987-11-17
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Patrick
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-07-30
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      3
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1975-06-23",
                  "id": "4",
                  "lastUpdated": "2019-08-16",
                  "manager": "Patchy",
                  "name": "Larry the Lobster",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="4"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="4_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Larry the Lobster
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1975-06-23
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Patchy
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-16
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      4
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "5",
                  "lastUpdated": "2019-08-20",
                  "manager": "Spongebob",
                  "name": "Sheldon Plankton",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="5"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="5_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Sheldon Plankton
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-20
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      5
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "6",
                  "lastUpdated": "2019-08-21",
                  "manager": "Spongebob",
                  "name": "Mrs. Puff",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="6"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="6_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Mrs. Puff
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_dob"
                  >
                    <td
                      className="c7"
                    />
                  </Cell>
                  <Cell
                    key="6_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-21
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      6
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1678-04-20",
                  "id": "7",
                  "lastUpdated": "2019-06-21",
                  "manager": "Spongebob",
                  "name": "Flying Dutchman",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="7"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="7_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Flying Dutchman
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1678-04-20
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      7
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1999-07-17",
                  "id": "8",
                  "lastUpdated": "2019-06-21",
                  "manager": "Eugene Krabs",
                  "name": "Spongebob Squarepants",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="8"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="8_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob Squarepants
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1999-07-17
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      8
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1984-03-17",
                  "id": "9",
                  "lastUpdated": "2019-06-21",
                  "manager": "N/A",
                  "name": "Patrick Star",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="9"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="9_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Patrick Star
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1984-03-17
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      N/A
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      9
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
          </tbody>
        </TableBody>
      </table>
    </styled.table>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={9}
      rowsPerPageOptions={Array []}
    >
      <styled.div>
        <div
          className="c0"
        >
          <WithStyles(ForwardRef(Pagination))
            count={1}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={1}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
  </div>
</Table>
`;

exports[`Table handleSort should invoke onSort with property and isDesc 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "column": "name",
        "order": "desc",
        "page": 1,
        "rowsPerPage": 9,
        "start": 0,
      },
      Object {
        "target": "mock",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Table handleSort should invoke onSort with property and isDesc 2`] = `
.c1 {
  background-color: white;
  border-collapse: collapse;
  border: none;
  table-layout: fixed;
  width: 100%;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  width: 100%;
  margin: 8px 0;
}

.c3 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
  width: 33%;
}

.c4 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c5 {
  background-color: #f9f9fc;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c7 {
  background-color: inherit;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c2 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

.c2 td,
.c2 th {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 200;
}

.c6 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

<Table
  data={
    Array [
      Object {
        "dob": "1942-11-30",
        "id": "1",
        "lastUpdated": "2019-09-01",
        "manager": "Spongebob",
        "name": "Eugene Krabs",
      },
      Object {
        "dob": "",
        "id": "2",
        "lastUpdated": "2019-08-29",
        "manager": "Smitty",
        "name": "Squidward Tentacles",
      },
      Object {
        "dob": "1987-11-17",
        "id": "3",
        "lastUpdated": "2019-07-30",
        "manager": "Patrick",
        "name": "Sandy Cheeks",
      },
      Object {
        "dob": "1975-06-23",
        "id": "4",
        "lastUpdated": "2019-08-16",
        "manager": "Patchy",
        "name": "Larry the Lobster",
      },
      Object {
        "dob": "1942-11-30",
        "id": "5",
        "lastUpdated": "2019-08-20",
        "manager": "Spongebob",
        "name": "Sheldon Plankton",
      },
      Object {
        "dob": "",
        "id": "6",
        "lastUpdated": "2019-08-21",
        "manager": "Spongebob",
        "name": "Mrs. Puff",
      },
      Object {
        "dob": "1678-04-20",
        "id": "7",
        "lastUpdated": "2019-06-21",
        "manager": "Spongebob",
        "name": "Flying Dutchman",
      },
      Object {
        "dob": "1999-07-17",
        "id": "8",
        "lastUpdated": "2019-06-21",
        "manager": "Eugene Krabs",
        "name": "Spongebob Squarepants",
      },
      Object {
        "dob": "1984-03-17",
        "id": "9",
        "lastUpdated": "2019-06-21",
        "manager": "N/A",
        "name": "Patrick Star",
      },
    ]
  }
  headers={
    Array [
      Object {
        "cellStyle": Object {
          "width": "33%",
        },
        "key": "name",
        "label": "Subject Name",
      },
      Object {
        "key": "dob",
        "label": "Date of Birth",
      },
      Object {
        "key": "manager",
        "label": "Manager",
      },
      Object {
        "key": "lastUpdated",
        "label": "Last Updated",
      },
      Object {
        "key": "id",
        "label": "ID",
        "sortable": false,
      },
    ]
  }
  onSort={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "column": "name",
            "order": "desc",
            "page": 1,
            "rowsPerPage": 9,
            "start": 0,
          },
          Object {
            "target": "mock",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  paginated={true}
>
  <div>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={9}
      rowsPerPageOptions={Array []}
    >
      <styled.div>
        <div
          className="c0"
        >
          <WithStyles(ForwardRef(Pagination))
            count={1}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={1}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
    <styled.table>
      <table
        className="c1"
      >
        <TableHeader
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          onSort={[Function]}
          order={false}
          sticky={true}
        >
          <thead>
            <styled.tr
              sticky={true}
            >
              <tr
                className="c2"
              >
                <HeadCell
                  cellStyle={
                    Object {
                      "width": "33%",
                    }
                  }
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="name"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={
                      Object {
                        "width": "33%",
                      }
                    }
                    onClick={[Function]}
                  >
                    <th
                      className="c3"
                      onClick={[Function]}
                    >
                      Subject Name
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="dob"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Date of Birth
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="manager"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Manager
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="lastUpdated"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Last Updated
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="id"
                  order={false}
                  sortable={false}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                  >
                    <th
                      className="c5"
                    >
                      ID
                    </th>
                  </Cell>
                </HeadCell>
              </tr>
            </styled.tr>
          </thead>
        </TableHeader>
        <TableBody
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          data={
            Array [
              Object {
                "dob": "1942-11-30",
                "id": "1",
                "lastUpdated": "2019-09-01",
                "manager": "Spongebob",
                "name": "Eugene Krabs",
              },
              Object {
                "dob": "",
                "id": "2",
                "lastUpdated": "2019-08-29",
                "manager": "Smitty",
                "name": "Squidward Tentacles",
              },
              Object {
                "dob": "1987-11-17",
                "id": "3",
                "lastUpdated": "2019-07-30",
                "manager": "Patrick",
                "name": "Sandy Cheeks",
              },
              Object {
                "dob": "1975-06-23",
                "id": "4",
                "lastUpdated": "2019-08-16",
                "manager": "Patchy",
                "name": "Larry the Lobster",
              },
              Object {
                "dob": "1942-11-30",
                "id": "5",
                "lastUpdated": "2019-08-20",
                "manager": "Spongebob",
                "name": "Sheldon Plankton",
              },
              Object {
                "dob": "",
                "id": "6",
                "lastUpdated": "2019-08-21",
                "manager": "Spongebob",
                "name": "Mrs. Puff",
              },
              Object {
                "dob": "1678-04-20",
                "id": "7",
                "lastUpdated": "2019-06-21",
                "manager": "Spongebob",
                "name": "Flying Dutchman",
              },
              Object {
                "dob": "1999-07-17",
                "id": "8",
                "lastUpdated": "2019-06-21",
                "manager": "Eugene Krabs",
                "name": "Spongebob Squarepants",
              },
              Object {
                "dob": "1984-03-17",
                "id": "9",
                "lastUpdated": "2019-06-21",
                "manager": "N/A",
                "name": "Patrick Star",
              },
            ]
          }
          exact={false}
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          page={1}
          rowsPerPage={9}
        >
          <tbody>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "1",
                  "lastUpdated": "2019-09-01",
                  "manager": "Spongebob",
                  "name": "Eugene Krabs",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="1"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="1_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-09-01
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      1
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "2",
                  "lastUpdated": "2019-08-29",
                  "manager": "Smitty",
                  "name": "Squidward Tentacles",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="2"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="2_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Squidward Tentacles
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_dob"
                  >
                    <td
                      className="c7"
                    />
                  </Cell>
                  <Cell
                    key="2_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Smitty
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-29
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      2
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1987-11-17",
                  "id": "3",
                  "lastUpdated": "2019-07-30",
                  "manager": "Patrick",
                  "name": "Sandy Cheeks",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="3"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="3_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Sandy Cheeks
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1987-11-17
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Patrick
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-07-30
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      3
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1975-06-23",
                  "id": "4",
                  "lastUpdated": "2019-08-16",
                  "manager": "Patchy",
                  "name": "Larry the Lobster",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="4"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="4_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Larry the Lobster
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1975-06-23
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Patchy
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-16
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      4
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "5",
                  "lastUpdated": "2019-08-20",
                  "manager": "Spongebob",
                  "name": "Sheldon Plankton",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="5"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="5_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Sheldon Plankton
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-20
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      5
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "6",
                  "lastUpdated": "2019-08-21",
                  "manager": "Spongebob",
                  "name": "Mrs. Puff",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="6"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="6_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Mrs. Puff
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_dob"
                  >
                    <td
                      className="c7"
                    />
                  </Cell>
                  <Cell
                    key="6_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-21
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      6
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1678-04-20",
                  "id": "7",
                  "lastUpdated": "2019-06-21",
                  "manager": "Spongebob",
                  "name": "Flying Dutchman",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="7"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="7_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Flying Dutchman
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1678-04-20
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      7
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1999-07-17",
                  "id": "8",
                  "lastUpdated": "2019-06-21",
                  "manager": "Eugene Krabs",
                  "name": "Spongebob Squarepants",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="8"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="8_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob Squarepants
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1999-07-17
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      8
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1984-03-17",
                  "id": "9",
                  "lastUpdated": "2019-06-21",
                  "manager": "N/A",
                  "name": "Patrick Star",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="9"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="9_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Patrick Star
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1984-03-17
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      N/A
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      9
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
          </tbody>
        </TableBody>
      </table>
    </styled.table>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={9}
      rowsPerPageOptions={Array []}
    >
      <styled.div>
        <div
          className="c0"
        >
          <WithStyles(ForwardRef(Pagination))
            count={1}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={1}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
  </div>
</Table>
`;

exports[`Table handleSort should set order and orderBy when invoked 1`] = `
.c1 {
  background-color: white;
  border-collapse: collapse;
  border: none;
  table-layout: fixed;
  width: 100%;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  width: 100%;
  margin: 8px 0;
}

.c3 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
  width: 33%;
}

.c4 {
  background-color: #f9f9fc;
  cursor: pointer;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c5 {
  background-color: #f9f9fc;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c7 {
  background-color: inherit;
  cursor: auto;
  padding: 10px 10px;
  text-align: left;
  word-wrap: break-word;
}

.c2 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

.c2 td,
.c2 th {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 200;
}

.c6 {
  background-color: white;
  border-bottom: 1px solid #dfdfe3;
}

<Table
  data={
    Array [
      Object {
        "dob": "1942-11-30",
        "id": "1",
        "lastUpdated": "2019-09-01",
        "manager": "Spongebob",
        "name": "Eugene Krabs",
      },
      Object {
        "dob": "",
        "id": "2",
        "lastUpdated": "2019-08-29",
        "manager": "Smitty",
        "name": "Squidward Tentacles",
      },
      Object {
        "dob": "1987-11-17",
        "id": "3",
        "lastUpdated": "2019-07-30",
        "manager": "Patrick",
        "name": "Sandy Cheeks",
      },
      Object {
        "dob": "1975-06-23",
        "id": "4",
        "lastUpdated": "2019-08-16",
        "manager": "Patchy",
        "name": "Larry the Lobster",
      },
      Object {
        "dob": "1942-11-30",
        "id": "5",
        "lastUpdated": "2019-08-20",
        "manager": "Spongebob",
        "name": "Sheldon Plankton",
      },
      Object {
        "dob": "",
        "id": "6",
        "lastUpdated": "2019-08-21",
        "manager": "Spongebob",
        "name": "Mrs. Puff",
      },
      Object {
        "dob": "1678-04-20",
        "id": "7",
        "lastUpdated": "2019-06-21",
        "manager": "Spongebob",
        "name": "Flying Dutchman",
      },
      Object {
        "dob": "1999-07-17",
        "id": "8",
        "lastUpdated": "2019-06-21",
        "manager": "Eugene Krabs",
        "name": "Spongebob Squarepants",
      },
      Object {
        "dob": "1984-03-17",
        "id": "9",
        "lastUpdated": "2019-06-21",
        "manager": "N/A",
        "name": "Patrick Star",
      },
    ]
  }
  headers={
    Array [
      Object {
        "cellStyle": Object {
          "width": "33%",
        },
        "key": "name",
        "label": "Subject Name",
      },
      Object {
        "key": "dob",
        "label": "Date of Birth",
      },
      Object {
        "key": "manager",
        "label": "Manager",
      },
      Object {
        "key": "lastUpdated",
        "label": "Last Updated",
      },
      Object {
        "key": "id",
        "label": "ID",
        "sortable": false,
      },
    ]
  }
  paginated={true}
>
  <div>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={9}
      rowsPerPageOptions={Array []}
    >
      <styled.div>
        <div
          className="c0"
        >
          <WithStyles(ForwardRef(Pagination))
            count={1}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={1}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
    <styled.table>
      <table
        className="c1"
      >
        <TableHeader
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          onSort={[Function]}
          order={false}
          sticky={true}
        >
          <thead>
            <styled.tr
              sticky={true}
            >
              <tr
                className="c2"
              >
                <HeadCell
                  cellStyle={
                    Object {
                      "width": "33%",
                    }
                  }
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="name"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={
                      Object {
                        "width": "33%",
                      }
                    }
                    onClick={[Function]}
                  >
                    <th
                      className="c3"
                      onClick={[Function]}
                    >
                      Subject Name
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="dob"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Date of Birth
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="manager"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Manager
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="lastUpdated"
                  onClick={[Function]}
                  order={false}
                  sortable={true}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                    onClick={[Function]}
                  >
                    <th
                      className="c4"
                      onClick={[Function]}
                    >
                      Last Updated
                      <span
                        aria-label="Sort (Descending)"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={true}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                320,
                                512,
                                Array [],
                                "f0dc",
                                Array [
                                  "M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z",
                                  "",
                                ],
                              ],
                              "iconName": "sort",
                              "prefix": "fad",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          swapOpacity={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-sort fa-w-10 fa-fw "
                            data-icon="sort"
                            data-prefix="fad"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 320 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g
                              className="fa-group"
                              style={Object {}}
                            >
                              <path
                                className="fa-secondary"
                                d="M279.05 288.05h-238c-21.4 0-32.07 25.95-17 41l119.1 119 .1.1a23.9 23.9 0 0 0 33.8-.1l119-119c15.1-15.05 4.4-41-17-41zm-238-64h238c21.4 0 32.1-25.9 17-41l-119-119a.94.94 0 0 0-.1-.1 23.9 23.9 0 0 0-33.8.1l-119.1 119c-15.05 15.1-4.4 41 17 41z"
                                fill="currentColor"
                                style={Object {}}
                              />
                              <path
                                className="fa-primary"
                                d=""
                                fill="currentColor"
                                style={Object {}}
                              />
                            </g>
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </th>
                  </Cell>
                </HeadCell>
                <HeadCell
                  cellStyle={Object {}}
                  components={
                    Object {
                      "Body": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Cell": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": e {
                          "baseHash": 1403459420,
                          "baseStyle": undefined,
                          "componentId": "sc-dlnjwi",
                          "isStatic": false,
                          "rules": Array [
                            [Function],
                          ],
                          "staticRulesId": "",
                        },
                        "displayName": "Cell",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "shouldForwardProp": undefined,
                        "styledComponentId": "sc-dlnjwi",
                        "target": "td",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      },
                      "HeadCell": [Function],
                      "Header": [Function],
                      "Pagination": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "Row": [Function],
                    }
                  }
                  key="id"
                  order={false}
                  sortable={false}
                >
                  <Cell
                    as="th"
                    cellStyle={Object {}}
                  >
                    <th
                      className="c5"
                    >
                      ID
                    </th>
                  </Cell>
                </HeadCell>
              </tr>
            </styled.tr>
          </thead>
        </TableHeader>
        <TableBody
          components={
            Object {
              "Body": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Cell": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": e {
                  "baseHash": 1403459420,
                  "baseStyle": undefined,
                  "componentId": "sc-dlnjwi",
                  "isStatic": false,
                  "rules": Array [
                    [Function],
                  ],
                  "staticRulesId": "",
                },
                "displayName": "Cell",
                "foldedComponentIds": Array [],
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "sc-dlnjwi",
                "target": "td",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "HeadCell": [Function],
              "Header": [Function],
              "Pagination": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              },
              "Row": [Function],
            }
          }
          data={
            Array [
              Object {
                "dob": "1942-11-30",
                "id": "1",
                "lastUpdated": "2019-09-01",
                "manager": "Spongebob",
                "name": "Eugene Krabs",
              },
              Object {
                "dob": "",
                "id": "2",
                "lastUpdated": "2019-08-29",
                "manager": "Smitty",
                "name": "Squidward Tentacles",
              },
              Object {
                "dob": "1987-11-17",
                "id": "3",
                "lastUpdated": "2019-07-30",
                "manager": "Patrick",
                "name": "Sandy Cheeks",
              },
              Object {
                "dob": "1975-06-23",
                "id": "4",
                "lastUpdated": "2019-08-16",
                "manager": "Patchy",
                "name": "Larry the Lobster",
              },
              Object {
                "dob": "1942-11-30",
                "id": "5",
                "lastUpdated": "2019-08-20",
                "manager": "Spongebob",
                "name": "Sheldon Plankton",
              },
              Object {
                "dob": "",
                "id": "6",
                "lastUpdated": "2019-08-21",
                "manager": "Spongebob",
                "name": "Mrs. Puff",
              },
              Object {
                "dob": "1678-04-20",
                "id": "7",
                "lastUpdated": "2019-06-21",
                "manager": "Spongebob",
                "name": "Flying Dutchman",
              },
              Object {
                "dob": "1999-07-17",
                "id": "8",
                "lastUpdated": "2019-06-21",
                "manager": "Eugene Krabs",
                "name": "Spongebob Squarepants",
              },
              Object {
                "dob": "1984-03-17",
                "id": "9",
                "lastUpdated": "2019-06-21",
                "manager": "N/A",
                "name": "Patrick Star",
              },
            ]
          }
          exact={false}
          headers={
            Array [
              Object {
                "cellStyle": Object {
                  "width": "33%",
                },
                "key": "name",
                "label": "Subject Name",
              },
              Object {
                "key": "dob",
                "label": "Date of Birth",
              },
              Object {
                "key": "manager",
                "label": "Manager",
              },
              Object {
                "key": "lastUpdated",
                "label": "Last Updated",
              },
              Object {
                "key": "id",
                "label": "ID",
                "sortable": false,
              },
            ]
          }
          page={1}
          rowsPerPage={9}
        >
          <tbody>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "1",
                  "lastUpdated": "2019-09-01",
                  "manager": "Spongebob",
                  "name": "Eugene Krabs",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="1"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="1_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-09-01
                    </td>
                  </Cell>
                  <Cell
                    key="1_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      1
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "2",
                  "lastUpdated": "2019-08-29",
                  "manager": "Smitty",
                  "name": "Squidward Tentacles",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="2"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="2_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Squidward Tentacles
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_dob"
                  >
                    <td
                      className="c7"
                    />
                  </Cell>
                  <Cell
                    key="2_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Smitty
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-29
                    </td>
                  </Cell>
                  <Cell
                    key="2_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      2
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1987-11-17",
                  "id": "3",
                  "lastUpdated": "2019-07-30",
                  "manager": "Patrick",
                  "name": "Sandy Cheeks",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="3"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="3_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Sandy Cheeks
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1987-11-17
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Patrick
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-07-30
                    </td>
                  </Cell>
                  <Cell
                    key="3_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      3
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1975-06-23",
                  "id": "4",
                  "lastUpdated": "2019-08-16",
                  "manager": "Patchy",
                  "name": "Larry the Lobster",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="4"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="4_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Larry the Lobster
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1975-06-23
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Patchy
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-16
                    </td>
                  </Cell>
                  <Cell
                    key="4_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      4
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1942-11-30",
                  "id": "5",
                  "lastUpdated": "2019-08-20",
                  "manager": "Spongebob",
                  "name": "Sheldon Plankton",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="5"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="5_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Sheldon Plankton
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1942-11-30
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-20
                    </td>
                  </Cell>
                  <Cell
                    key="5_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      5
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "",
                  "id": "6",
                  "lastUpdated": "2019-08-21",
                  "manager": "Spongebob",
                  "name": "Mrs. Puff",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="6"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="6_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Mrs. Puff
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_dob"
                  >
                    <td
                      className="c7"
                    />
                  </Cell>
                  <Cell
                    key="6_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-08-21
                    </td>
                  </Cell>
                  <Cell
                    key="6_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      6
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1678-04-20",
                  "id": "7",
                  "lastUpdated": "2019-06-21",
                  "manager": "Spongebob",
                  "name": "Flying Dutchman",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="7"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="7_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Flying Dutchman
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1678-04-20
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="7_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      7
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1999-07-17",
                  "id": "8",
                  "lastUpdated": "2019-06-21",
                  "manager": "Eugene Krabs",
                  "name": "Spongebob Squarepants",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="8"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="8_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Spongebob Squarepants
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1999-07-17
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      Eugene Krabs
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="8_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      8
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
            <TableRow
              components={
                Object {
                  "Body": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Cell": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": e {
                      "baseHash": 1403459420,
                      "baseStyle": undefined,
                      "componentId": "sc-dlnjwi",
                      "isStatic": false,
                      "rules": Array [
                        [Function],
                      ],
                      "staticRulesId": "",
                    },
                    "displayName": "Cell",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "shouldForwardProp": undefined,
                    "styledComponentId": "sc-dlnjwi",
                    "target": "td",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "HeadCell": [Function],
                  "Header": [Function],
                  "Pagination": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  },
                  "Row": [Function],
                }
              }
              data={
                Object {
                  "dob": "1984-03-17",
                  "id": "9",
                  "lastUpdated": "2019-06-21",
                  "manager": "N/A",
                  "name": "Patrick Star",
                }
              }
              headers={
                Array [
                  Object {
                    "cellStyle": Object {
                      "width": "33%",
                    },
                    "key": "name",
                    "label": "Subject Name",
                  },
                  Object {
                    "key": "dob",
                    "label": "Date of Birth",
                  },
                  Object {
                    "key": "manager",
                    "label": "Manager",
                  },
                  Object {
                    "key": "lastUpdated",
                    "label": "Last Updated",
                  },
                  Object {
                    "key": "id",
                    "label": "ID",
                    "sortable": false,
                  },
                ]
              }
              key="9"
            >
              <styled.tr>
                <tr
                  className="c6"
                >
                  <Cell
                    key="9_cell_name"
                  >
                    <td
                      className="c7"
                    >
                      Patrick Star
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_dob"
                  >
                    <td
                      className="c7"
                    >
                      1984-03-17
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_manager"
                  >
                    <td
                      className="c7"
                    >
                      N/A
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_lastUpdated"
                  >
                    <td
                      className="c7"
                    >
                      2019-06-21
                    </td>
                  </Cell>
                  <Cell
                    key="9_cell_id"
                  >
                    <td
                      className="c7"
                    >
                      9
                    </td>
                  </Cell>
                </tr>
              </styled.tr>
            </TableRow>
          </tbody>
        </TableBody>
      </table>
    </styled.table>
    <PaginationToolbar
      count={9}
      onPageChange={[Function]}
      page={1}
      rowsPerPage={9}
      rowsPerPageOptions={Array []}
    >
      <styled.div>
        <div
          className="c0"
        >
          <WithStyles(ForwardRef(Pagination))
            count={1}
            onChange={[Function]}
            page={1}
            shape="rounded"
          >
            <ForwardRef(Pagination)
              classes={
                Object {
                  "root": "MuiPagination-root",
                  "ul": "MuiPagination-ul",
                }
              }
              count={1}
              onChange={[Function]}
              page={1}
              shape="rounded"
            >
              <nav
                aria-label="pagination navigation"
                className="MuiPagination-root"
              >
                <ul
                  className="MuiPagination-ul"
                >
                  <li
                    key="0"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to previous page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={0}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="previous"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to previous page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={0}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="previous"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to previous page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to previous page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to previous page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateBeforeIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateBeforeIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="1"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-current="true"
                      aria-label="page 1"
                      color="standard"
                      disabled={false}
                      onClick={[Function]}
                      page={1}
                      selected={true}
                      shape="rounded"
                      size="medium"
                      type="page"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-current="true"
                        aria-label="page 1"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={false}
                        onClick={[Function]}
                        page={1}
                        selected={true}
                        shape="rounded"
                        size="medium"
                        type="page"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-current="true"
                          aria-label="page 1"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                          disabled={false}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-current="true"
                            aria-label="page 1"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={false}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-current="true"
                              aria-label="page 1"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-selected"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="button"
                            >
                              1
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                  <li
                    key="2"
                  >
                    <WithStyles(ForwardRef(PaginationItem))
                      aria-label="Go to next page"
                      color="standard"
                      disabled={true}
                      onClick={[Function]}
                      page={2}
                      selected={false}
                      shape="rounded"
                      size="medium"
                      type="next"
                      variant="text"
                    >
                      <ForwardRef(PaginationItem)
                        aria-label="Go to next page"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "ellipsis": "MuiPaginationItem-ellipsis",
                            "focusVisible": "Mui-focusVisible",
                            "icon": "MuiPaginationItem-icon",
                            "outlined": "MuiPaginationItem-outlined",
                            "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
                            "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
                            "page": "MuiPaginationItem-page",
                            "root": "MuiPaginationItem-root",
                            "rounded": "MuiPaginationItem-rounded",
                            "selected": "Mui-selected",
                            "sizeLarge": "MuiPaginationItem-sizeLarge",
                            "sizeSmall": "MuiPaginationItem-sizeSmall",
                            "textPrimary": "MuiPaginationItem-textPrimary",
                            "textSecondary": "MuiPaginationItem-textSecondary",
                          }
                        }
                        color="standard"
                        disabled={true}
                        onClick={[Function]}
                        page={2}
                        selected={false}
                        shape="rounded"
                        size="medium"
                        type="next"
                        variant="text"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          aria-label="Go to next page"
                          className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                          disabled={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                        >
                          <ForwardRef(ButtonBase)
                            aria-label="Go to next page"
                            className="MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            disabled={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                          >
                            <button
                              aria-label="Go to next page"
                              className="MuiButtonBase-root MuiPaginationItem-root MuiPaginationItem-page MuiPaginationItem-rounded Mui-disabled Mui-disabled"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <ForwardRef(NavigateNextIcon)
                                className="MuiPaginationItem-icon"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="MuiPaginationItem-icon"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="MuiPaginationItem-icon"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root MuiPaginationItem-icon"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(NavigateNextIcon)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(PaginationItem)>
                    </WithStyles(ForwardRef(PaginationItem))>
                  </li>
                </ul>
              </nav>
            </ForwardRef(Pagination)>
          </WithStyles(ForwardRef(Pagination))>
        </div>
      </styled.div>
    </PaginationToolbar>
  </div>
</Table>
`;

exports[`Table props paginated Table should set rowsPerPage to data.length when data is provided 1`] = `
<div>
  <styled.table>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
          Object {
            "dob": "1999-07-17",
            "id": "8",
            "lastUpdated": "2019-06-21",
            "manager": "Eugene Krabs",
            "name": "Spongebob Squarepants",
          },
          Object {
            "dob": "1984-03-17",
            "id": "9",
            "lastUpdated": "2019-06-21",
            "manager": "N/A",
            "name": "Patrick Star",
          },
        ]
      }
      exact={false}
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      page={1}
      rowsPerPage={9}
    />
  </styled.table>
</div>
`;

exports[`Table props paginated paginated Table should set rowsPerPage to 5 by default 1`] = `
<div>
  <Memo(PaginationToolbar)
    count={0}
    onPageChange={[Function]}
    page={1}
    rowsPerPage={5}
    rowsPerPageOptions={Array []}
  />
  <styled.table>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={Array []}
      exact={false}
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      page={1}
      rowsPerPage={5}
    />
  </styled.table>
  <Memo(PaginationToolbar)
    count={0}
    onPageChange={[Function]}
    page={1}
    rowsPerPage={5}
    rowsPerPageOptions={Array []}
  />
</div>
`;

exports[`Table props paginated paginated Table should set rowsPerPage to data.length when data is provided 1`] = `
<div>
  <Memo(PaginationToolbar)
    count={9}
    onPageChange={[Function]}
    page={1}
    rowsPerPage={9}
    rowsPerPageOptions={Array []}
  />
  <styled.table>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
          Object {
            "dob": "1999-07-17",
            "id": "8",
            "lastUpdated": "2019-06-21",
            "manager": "Eugene Krabs",
            "name": "Spongebob Squarepants",
          },
          Object {
            "dob": "1984-03-17",
            "id": "9",
            "lastUpdated": "2019-06-21",
            "manager": "N/A",
            "name": "Patrick Star",
          },
        ]
      }
      exact={false}
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      page={1}
      rowsPerPage={9}
    />
  </styled.table>
  <Memo(PaginationToolbar)
    count={9}
    onPageChange={[Function]}
    page={1}
    rowsPerPage={9}
    rowsPerPageOptions={Array []}
  />
</div>
`;

exports[`Table props paginated paginated Table should set rowsPerPage to first element of rowsPerPageOptions when provided 1`] = `
<div>
  <Memo(PaginationToolbar)
    count={9}
    onPageChange={[Function]}
    page={1}
    rowsPerPage={10}
    rowsPerPageOptions={
      Array [
        10,
        20,
        100,
      ]
    }
  />
  <styled.table>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
          Object {
            "dob": "1999-07-17",
            "id": "8",
            "lastUpdated": "2019-06-21",
            "manager": "Eugene Krabs",
            "name": "Spongebob Squarepants",
          },
          Object {
            "dob": "1984-03-17",
            "id": "9",
            "lastUpdated": "2019-06-21",
            "manager": "N/A",
            "name": "Patrick Star",
          },
        ]
      }
      exact={false}
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      page={1}
      rowsPerPage={10}
    />
  </styled.table>
  <Memo(PaginationToolbar)
    count={9}
    onPageChange={[Function]}
    page={1}
    rowsPerPage={10}
    rowsPerPageOptions={
      Array [
        10,
        20,
        100,
      ]
    }
  />
</div>
`;

exports[`Table props paginated paginated=true should render PaginationToolbar 1`] = `
<div>
  <Memo(PaginationToolbar)
    count={9}
    onPageChange={[Function]}
    page={1}
    rowsPerPage={9}
    rowsPerPageOptions={Array []}
  />
  <styled.table>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
          Object {
            "dob": "1999-07-17",
            "id": "8",
            "lastUpdated": "2019-06-21",
            "manager": "Eugene Krabs",
            "name": "Spongebob Squarepants",
          },
          Object {
            "dob": "1984-03-17",
            "id": "9",
            "lastUpdated": "2019-06-21",
            "manager": "N/A",
            "name": "Patrick Star",
          },
        ]
      }
      exact={false}
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      page={1}
      rowsPerPage={9}
    />
  </styled.table>
  <Memo(PaginationToolbar)
    count={9}
    onPageChange={[Function]}
    page={1}
    rowsPerPage={9}
    rowsPerPageOptions={Array []}
  />
</div>
`;

exports[`Table render should render table first child 1`] = `
<div>
  <styled.table>
    <TableHeader
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      onSort={[Function]}
      order={false}
      sticky={true}
    />
    <Memo(TableBody)
      components={
        Object {
          "Body": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Cell": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": e {
              "baseHash": 1403459420,
              "baseStyle": undefined,
              "componentId": "sc-dlnjwi",
              "isStatic": false,
              "rules": Array [
                [Function],
              ],
              "staticRulesId": "",
            },
            "displayName": "Cell",
            "foldedComponentIds": Array [],
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "sc-dlnjwi",
            "target": "td",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
          "HeadCell": [Function],
          "Header": [Function],
          "Pagination": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "Row": [Function],
        }
      }
      data={
        Array [
          Object {
            "dob": "1942-11-30",
            "id": "1",
            "lastUpdated": "2019-09-01",
            "manager": "Spongebob",
            "name": "Eugene Krabs",
          },
          Object {
            "dob": "",
            "id": "2",
            "lastUpdated": "2019-08-29",
            "manager": "Smitty",
            "name": "Squidward Tentacles",
          },
          Object {
            "dob": "1987-11-17",
            "id": "3",
            "lastUpdated": "2019-07-30",
            "manager": "Patrick",
            "name": "Sandy Cheeks",
          },
          Object {
            "dob": "1975-06-23",
            "id": "4",
            "lastUpdated": "2019-08-16",
            "manager": "Patchy",
            "name": "Larry the Lobster",
          },
          Object {
            "dob": "1942-11-30",
            "id": "5",
            "lastUpdated": "2019-08-20",
            "manager": "Spongebob",
            "name": "Sheldon Plankton",
          },
          Object {
            "dob": "",
            "id": "6",
            "lastUpdated": "2019-08-21",
            "manager": "Spongebob",
            "name": "Mrs. Puff",
          },
          Object {
            "dob": "1678-04-20",
            "id": "7",
            "lastUpdated": "2019-06-21",
            "manager": "Spongebob",
            "name": "Flying Dutchman",
          },
          Object {
            "dob": "1999-07-17",
            "id": "8",
            "lastUpdated": "2019-06-21",
            "manager": "Eugene Krabs",
            "name": "Spongebob Squarepants",
          },
          Object {
            "dob": "1984-03-17",
            "id": "9",
            "lastUpdated": "2019-06-21",
            "manager": "N/A",
            "name": "Patrick Star",
          },
        ]
      }
      exact={false}
      headers={
        Array [
          Object {
            "cellStyle": Object {
              "width": "33%",
            },
            "key": "name",
            "label": "Subject Name",
          },
          Object {
            "key": "dob",
            "label": "Date of Birth",
          },
          Object {
            "key": "manager",
            "label": "Manager",
          },
          Object {
            "key": "lastUpdated",
            "label": "Last Updated",
          },
          Object {
            "key": "id",
            "label": "ID",
            "sortable": false,
          },
        ]
      }
      page={1}
      rowsPerPage={9}
    />
  </styled.table>
</div>
`;
