// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`button variants & colors should each render with size 1`] = `
<ForwardRef
  variant="contained"
>
  <Button
    forwardRef={null}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="contained"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 2`] = `
<ForwardRef
  size="small"
  variant="contained"
>
  <Button
    forwardRef={null}
    size="small"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="contained"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained MuiButton-containedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained MuiButton-containedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 3`] = `
<ForwardRef
  size="large"
  variant="contained"
>
  <Button
    forwardRef={null}
    size="large"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="contained"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained MuiButton-containedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained MuiButton-containedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 4`] = `
<ForwardRef
  color="primary"
  variant="contained"
>
  <Button
    color="primary"
    forwardRef={null}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedPrimary-139"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedPrimary-139"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-139"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-139"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-139"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 5`] = `
<ForwardRef
  color="primary"
  size="small"
  variant="contained"
>
  <Button
    color="primary"
    forwardRef={null}
    size="small"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedPrimary-157"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedPrimary-157"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-157 MuiButton-containedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-157 MuiButton-containedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-157 MuiButton-containedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 6`] = `
<ForwardRef
  color="primary"
  size="large"
  variant="contained"
>
  <Button
    color="primary"
    forwardRef={null}
    size="large"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedPrimary-175"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedPrimary-175"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-175 MuiButton-containedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-175 MuiButton-containedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-175 MuiButton-containedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 7`] = `
<ForwardRef
  color="secondary"
  variant="contained"
>
  <Button
    color="secondary"
    forwardRef={null}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedSecondary-194"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedSecondary-194"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedSecondary-194"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedSecondary-194"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedSecondary-194"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 8`] = `
<ForwardRef
  color="secondary"
  size="small"
  variant="contained"
>
  <Button
    color="secondary"
    forwardRef={null}
    size="small"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedSecondary-212"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedSecondary-212"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedSecondary-212 MuiButton-containedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedSecondary-212 MuiButton-containedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedSecondary-212 MuiButton-containedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 9`] = `
<ForwardRef
  color="secondary"
  size="large"
  variant="contained"
>
  <Button
    color="secondary"
    forwardRef={null}
    size="large"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedSecondary-230"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedSecondary-230"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedSecondary-230 MuiButton-containedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedSecondary-230 MuiButton-containedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedSecondary-230 MuiButton-containedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 10`] = `
<ForwardRef
  color="error"
  variant="contained"
>
  <Button
    color="error"
    forwardRef={null}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedError-249"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedError-249"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedError-249"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedError-249"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedError-249"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 11`] = `
<ForwardRef
  color="error"
  size="small"
  variant="contained"
>
  <Button
    color="error"
    forwardRef={null}
    size="small"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedError-267"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedError-267"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedError-267 MuiButton-containedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedError-267 MuiButton-containedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedError-267 MuiButton-containedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 12`] = `
<ForwardRef
  color="error"
  size="large"
  variant="contained"
>
  <Button
    color="error"
    forwardRef={null}
    size="large"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedError-285"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedError-285"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedError-285 MuiButton-containedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedError-285 MuiButton-containedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedError-285 MuiButton-containedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 13`] = `
<ForwardRef
  color="info"
  variant="contained"
>
  <Button
    color="info"
    forwardRef={null}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedInfo-305"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedInfo-305"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedInfo-305"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedInfo-305"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedInfo-305"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 14`] = `
<ForwardRef
  color="info"
  size="small"
  variant="contained"
>
  <Button
    color="info"
    forwardRef={null}
    size="small"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedInfo-323"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedInfo-323"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedInfo-323 MuiButton-containedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedInfo-323 MuiButton-containedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedInfo-323 MuiButton-containedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 15`] = `
<ForwardRef
  color="info"
  size="large"
  variant="contained"
>
  <Button
    color="info"
    forwardRef={null}
    size="large"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedInfo-341"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedInfo-341"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedInfo-341 MuiButton-containedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedInfo-341 MuiButton-containedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedInfo-341 MuiButton-containedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 16`] = `
<ForwardRef
  color="success"
  variant="contained"
>
  <Button
    color="success"
    forwardRef={null}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedSuccess-360"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedSuccess-360"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedSuccess-360"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedSuccess-360"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedSuccess-360"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 17`] = `
<ForwardRef
  color="success"
  size="small"
  variant="contained"
>
  <Button
    color="success"
    forwardRef={null}
    size="small"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedSuccess-378"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedSuccess-378"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedSuccess-378 MuiButton-containedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedSuccess-378 MuiButton-containedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedSuccess-378 MuiButton-containedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 18`] = `
<ForwardRef
  color="success"
  size="large"
  variant="contained"
>
  <Button
    color="success"
    forwardRef={null}
    size="large"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedSuccess-396"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedSuccess-396"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedSuccess-396 MuiButton-containedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedSuccess-396 MuiButton-containedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedSuccess-396 MuiButton-containedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 19`] = `
<ForwardRef
  color="warning"
  variant="contained"
>
  <Button
    color="warning"
    forwardRef={null}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedWarning-412"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedWarning-412"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedWarning-412"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedWarning-412"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedWarning-412"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 20`] = `
<ForwardRef
  color="warning"
  size="small"
  variant="contained"
>
  <Button
    color="warning"
    forwardRef={null}
    size="small"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedWarning-430"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedWarning-430"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedWarning-430 MuiButton-containedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedWarning-430 MuiButton-containedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedWarning-430 MuiButton-containedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 21`] = `
<ForwardRef
  color="warning"
  size="large"
  variant="contained"
>
  <Button
    color="warning"
    forwardRef={null}
    size="large"
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-containedWarning-448"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="contained"
    >
      <ForwardRef(Button)
        className="makeStyles-containedWarning-448"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-contained makeStyles-containedWarning-448 MuiButton-containedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-contained makeStyles-containedWarning-448 MuiButton-containedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedWarning-448 MuiButton-containedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 22`] = `
<ForwardRef
  variant="outlined"
>
  <Button
    forwardRef={null}
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="outlined"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 23`] = `
<ForwardRef
  size="small"
  variant="outlined"
>
  <Button
    forwardRef={null}
    size="small"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="outlined"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 24`] = `
<ForwardRef
  size="large"
  variant="outlined"
>
  <Button
    forwardRef={null}
    size="large"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="outlined"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 25`] = `
<ForwardRef
  color="primary"
  variant="outlined"
>
  <Button
    color="primary"
    forwardRef={null}
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedPrimary-511"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedPrimary-511"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-511"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-511"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-511"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 26`] = `
<ForwardRef
  color="primary"
  size="small"
  variant="outlined"
>
  <Button
    color="primary"
    forwardRef={null}
    size="small"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedPrimary-529"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedPrimary-529"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-529 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-529 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-529 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 27`] = `
<ForwardRef
  color="primary"
  size="large"
  variant="outlined"
>
  <Button
    color="primary"
    forwardRef={null}
    size="large"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedPrimary-547"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedPrimary-547"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-547 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-547 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedPrimary-547 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 28`] = `
<ForwardRef
  color="secondary"
  variant="outlined"
>
  <Button
    color="secondary"
    forwardRef={null}
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedSecondary-566"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedSecondary-566"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-566"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-566"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-566"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 29`] = `
<ForwardRef
  color="secondary"
  size="small"
  variant="outlined"
>
  <Button
    color="secondary"
    forwardRef={null}
    size="small"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedSecondary-584"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedSecondary-584"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-584 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-584 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-584 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 30`] = `
<ForwardRef
  color="secondary"
  size="large"
  variant="outlined"
>
  <Button
    color="secondary"
    forwardRef={null}
    size="large"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedSecondary-602"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedSecondary-602"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-602 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-602 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedSecondary-602 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 31`] = `
<ForwardRef
  color="error"
  variant="outlined"
>
  <Button
    color="error"
    forwardRef={null}
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedError-621"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedError-621"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedError-621"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedError-621"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedError-621"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 32`] = `
<ForwardRef
  color="error"
  size="small"
  variant="outlined"
>
  <Button
    color="error"
    forwardRef={null}
    size="small"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedError-639"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedError-639"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedError-639 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedError-639 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedError-639 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 33`] = `
<ForwardRef
  color="error"
  size="large"
  variant="outlined"
>
  <Button
    color="error"
    forwardRef={null}
    size="large"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedError-657"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedError-657"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedError-657 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedError-657 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedError-657 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 34`] = `
<ForwardRef
  color="info"
  variant="outlined"
>
  <Button
    color="info"
    forwardRef={null}
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedInfo-677"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedInfo-677"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-677"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-677"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-677"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 35`] = `
<ForwardRef
  color="info"
  size="small"
  variant="outlined"
>
  <Button
    color="info"
    forwardRef={null}
    size="small"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedInfo-695"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedInfo-695"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-695 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-695 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-695 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 36`] = `
<ForwardRef
  color="info"
  size="large"
  variant="outlined"
>
  <Button
    color="info"
    forwardRef={null}
    size="large"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedInfo-713"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedInfo-713"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-713 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-713 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedInfo-713 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 37`] = `
<ForwardRef
  color="success"
  variant="outlined"
>
  <Button
    color="success"
    forwardRef={null}
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedSuccess-732"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedSuccess-732"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-732"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-732"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-732"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 38`] = `
<ForwardRef
  color="success"
  size="small"
  variant="outlined"
>
  <Button
    color="success"
    forwardRef={null}
    size="small"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedSuccess-750"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedSuccess-750"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-750 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-750 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-750 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 39`] = `
<ForwardRef
  color="success"
  size="large"
  variant="outlined"
>
  <Button
    color="success"
    forwardRef={null}
    size="large"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedSuccess-768"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedSuccess-768"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-768 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-768 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedSuccess-768 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 40`] = `
<ForwardRef
  color="warning"
  variant="outlined"
>
  <Button
    color="warning"
    forwardRef={null}
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedWarning-784"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedWarning-784"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-784"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-784"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-784"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 41`] = `
<ForwardRef
  color="warning"
  size="small"
  variant="outlined"
>
  <Button
    color="warning"
    forwardRef={null}
    size="small"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedWarning-802"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedWarning-802"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-802 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-802 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-802 MuiButton-outlinedSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 42`] = `
<ForwardRef
  color="warning"
  size="large"
  variant="outlined"
>
  <Button
    color="warning"
    forwardRef={null}
    size="large"
    variant="outlined"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-outlinedWarning-820"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="outlined"
    >
      <ForwardRef(Button)
        className="makeStyles-outlinedWarning-820"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="outlined"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-820 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-820 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined makeStyles-outlinedWarning-820 MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 43`] = `
<ForwardRef
  variant="text"
>
  <Button
    forwardRef={null}
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="text"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 44`] = `
<ForwardRef
  size="small"
  variant="text"
>
  <Button
    forwardRef={null}
    size="small"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="text"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 45`] = `
<ForwardRef
  size="large"
  variant="text"
>
  <Button
    forwardRef={null}
    size="large"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className=""
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="text"
    >
      <ForwardRef(Button)
        className=""
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text MuiButton-textSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text MuiButton-textSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 46`] = `
<ForwardRef
  color="primary"
  variant="text"
>
  <Button
    color="primary"
    forwardRef={null}
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textPrimary-883"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textPrimary-883"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textPrimary-883"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textPrimary-883"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textPrimary-883"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 47`] = `
<ForwardRef
  color="primary"
  size="small"
  variant="text"
>
  <Button
    color="primary"
    forwardRef={null}
    size="small"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textPrimary-901"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textPrimary-901"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textPrimary-901 MuiButton-textSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textPrimary-901 MuiButton-textSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textPrimary-901 MuiButton-textSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 48`] = `
<ForwardRef
  color="primary"
  size="large"
  variant="text"
>
  <Button
    color="primary"
    forwardRef={null}
    size="large"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textPrimary-919"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textPrimary-919"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textPrimary-919 MuiButton-textSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textPrimary-919 MuiButton-textSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textPrimary-919 MuiButton-textSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 49`] = `
<ForwardRef
  color="secondary"
  variant="text"
>
  <Button
    color="secondary"
    forwardRef={null}
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textSecondary-938"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textSecondary-938"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textSecondary-938"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textSecondary-938"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textSecondary-938"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 50`] = `
<ForwardRef
  color="secondary"
  size="small"
  variant="text"
>
  <Button
    color="secondary"
    forwardRef={null}
    size="small"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textSecondary-956"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textSecondary-956"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textSecondary-956 MuiButton-textSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textSecondary-956 MuiButton-textSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textSecondary-956 MuiButton-textSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 51`] = `
<ForwardRef
  color="secondary"
  size="large"
  variant="text"
>
  <Button
    color="secondary"
    forwardRef={null}
    size="large"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textSecondary-974"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textSecondary-974"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textSecondary-974 MuiButton-textSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textSecondary-974 MuiButton-textSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textSecondary-974 MuiButton-textSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 52`] = `
<ForwardRef
  color="error"
  variant="text"
>
  <Button
    color="error"
    forwardRef={null}
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textError-993"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textError-993"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textError-993"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textError-993"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textError-993"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 53`] = `
<ForwardRef
  color="error"
  size="small"
  variant="text"
>
  <Button
    color="error"
    forwardRef={null}
    size="small"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textError-1011"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textError-1011"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textError-1011 MuiButton-textSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textError-1011 MuiButton-textSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textError-1011 MuiButton-textSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 54`] = `
<ForwardRef
  color="error"
  size="large"
  variant="text"
>
  <Button
    color="error"
    forwardRef={null}
    size="large"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textError-1029"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textError-1029"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textError-1029 MuiButton-textSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textError-1029 MuiButton-textSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textError-1029 MuiButton-textSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 55`] = `
<ForwardRef
  color="info"
  variant="text"
>
  <Button
    color="info"
    forwardRef={null}
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textInfo-1049"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textInfo-1049"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textInfo-1049"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textInfo-1049"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textInfo-1049"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 56`] = `
<ForwardRef
  color="info"
  size="small"
  variant="text"
>
  <Button
    color="info"
    forwardRef={null}
    size="small"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textInfo-1067"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textInfo-1067"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textInfo-1067 MuiButton-textSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textInfo-1067 MuiButton-textSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textInfo-1067 MuiButton-textSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 57`] = `
<ForwardRef
  color="info"
  size="large"
  variant="text"
>
  <Button
    color="info"
    forwardRef={null}
    size="large"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textInfo-1085"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textInfo-1085"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textInfo-1085 MuiButton-textSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textInfo-1085 MuiButton-textSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textInfo-1085 MuiButton-textSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 58`] = `
<ForwardRef
  color="success"
  variant="text"
>
  <Button
    color="success"
    forwardRef={null}
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textSuccess-1104"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textSuccess-1104"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textSuccess-1104"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textSuccess-1104"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textSuccess-1104"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 59`] = `
<ForwardRef
  color="success"
  size="small"
  variant="text"
>
  <Button
    color="success"
    forwardRef={null}
    size="small"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textSuccess-1122"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textSuccess-1122"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textSuccess-1122 MuiButton-textSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textSuccess-1122 MuiButton-textSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textSuccess-1122 MuiButton-textSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 60`] = `
<ForwardRef
  color="success"
  size="large"
  variant="text"
>
  <Button
    color="success"
    forwardRef={null}
    size="large"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textSuccess-1140"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textSuccess-1140"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textSuccess-1140 MuiButton-textSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textSuccess-1140 MuiButton-textSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textSuccess-1140 MuiButton-textSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 61`] = `
<ForwardRef
  color="warning"
  variant="text"
>
  <Button
    color="warning"
    forwardRef={null}
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textWarning-1156"
      color="default"
      disableElevation={false}
      disableRipple={true}
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textWarning-1156"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textWarning-1156"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textWarning-1156"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textWarning-1156"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 62`] = `
<ForwardRef
  color="warning"
  size="small"
  variant="text"
>
  <Button
    color="warning"
    forwardRef={null}
    size="small"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textWarning-1174"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="small"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textWarning-1174"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="small"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textWarning-1174 MuiButton-textSizeSmall MuiButton-sizeSmall"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textWarning-1174 MuiButton-textSizeSmall MuiButton-sizeSmall"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textWarning-1174 MuiButton-textSizeSmall MuiButton-sizeSmall"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;

exports[`button variants & colors should each render with size 63`] = `
<ForwardRef
  color="warning"
  size="large"
  variant="text"
>
  <Button
    color="warning"
    forwardRef={null}
    size="large"
    variant="text"
  >
    <WithStyles(ForwardRef(Button))
      className="makeStyles-textWarning-1192"
      color="default"
      disableElevation={false}
      disableRipple={true}
      size="large"
      variant="text"
    >
      <ForwardRef(Button)
        className="makeStyles-textWarning-1192"
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit",
            "contained": "MuiButton-contained",
            "containedPrimary": "MuiButton-containedPrimary",
            "containedSecondary": "MuiButton-containedSecondary",
            "containedSizeLarge": "MuiButton-containedSizeLarge",
            "containedSizeSmall": "MuiButton-containedSizeSmall",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled",
            "endIcon": "MuiButton-endIcon",
            "focusVisible": "Mui-focusVisible",
            "fullWidth": "MuiButton-fullWidth",
            "iconSizeLarge": "MuiButton-iconSizeLarge",
            "iconSizeMedium": "MuiButton-iconSizeMedium",
            "iconSizeSmall": "MuiButton-iconSizeSmall",
            "label": "MuiButton-label",
            "outlined": "MuiButton-outlined",
            "outlinedPrimary": "MuiButton-outlinedPrimary",
            "outlinedSecondary": "MuiButton-outlinedSecondary",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
            "root": "MuiButton-root",
            "sizeLarge": "MuiButton-sizeLarge",
            "sizeSmall": "MuiButton-sizeSmall",
            "startIcon": "MuiButton-startIcon",
            "text": "MuiButton-text",
            "textPrimary": "MuiButton-textPrimary",
            "textSecondary": "MuiButton-textSecondary",
            "textSizeLarge": "MuiButton-textSizeLarge",
            "textSizeSmall": "MuiButton-textSizeSmall",
          }
        }
        color="default"
        disableElevation={false}
        disableRipple={true}
        size="large"
        variant="text"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root MuiButton-text makeStyles-textWarning-1192 MuiButton-textSizeLarge MuiButton-sizeLarge"
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root MuiButton-text makeStyles-textWarning-1192 MuiButton-textSizeLarge MuiButton-sizeLarge"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disableRipple={true}
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-textWarning-1192 MuiButton-textSizeLarge MuiButton-sizeLarge"
              disabled={false}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                DEFAULT_BUTTON
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </Button>
</ForwardRef>
`;
