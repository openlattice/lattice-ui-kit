// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`button mode="default" should match snapshot 1`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #8e929b;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dcdce7;
  border-color: #dcdce7;
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #b6bbc7;
  border-color: #b6bbc7;
  color: #ffffff;
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c0:focus-visible {
  box-shadow: #b6bbc7 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor=""
  isLoading={false}
  mode="default"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor=""
    mode="default"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor=""
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "gJMnAo",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="default"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="default"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    DEFAULT_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;

exports[`button mode="default" should match snapshot 2`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #8e929b;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dcdce7;
  border-color: #dcdce7;
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #b6bbc7;
  border-color: #b6bbc7;
  color: #ffffff;
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c0:focus-visible {
  box-shadow: #b6bbc7 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor=""
  isLoading={false}
  mode="default"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor=""
    mode="default"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor=""
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "gJMnAo",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="default"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="default"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    DEFAULT_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;

exports[`button mode="negative" should match snapshot 1`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: #ffd0cb;
  border-color: #ffd0cb;
  color: #e43424;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #ffbeb7;
  border-color: #ffbeb7;
  color: #d02010;
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #fb9f95;
  border-color: #fb9f95;
  color: #bd0000;
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c0:focus-visible {
  box-shadow: #fb9f95 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor=""
  isLoading={false}
  mode="negative"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor=""
    mode="negative"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor=""
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "gWbiYQ",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="negative"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="negative"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    NEGATIVE_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;

exports[`button mode="neutral" should match snapshot 1`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: transparent;
  border-color: transparent;
  font-weight: 600;
  color: dark;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgba(255,255,255,0.2);
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgba(255,255,255,0.5);
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: transparent;
  border-color: transparent;
  color: dark;
}

.c0:focus-visible {
  box-shadow: #b6bbc7 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor="dark"
  isLoading={false}
  mode="neutral"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor="dark"
    mode="neutral"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor="dark"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "iAGHHV",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="neutral"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="neutral"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    NEUTRAL_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;

exports[`button mode="neutral" should match snapshot 2`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: transparent;
  border-color: transparent;
  font-weight: 600;
  color: light;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgba(255,255,255,0.2);
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgba(255,255,255,0.5);
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: transparent;
  border-color: transparent;
  color: light;
}

.c0:focus-visible {
  box-shadow: #b6bbc7 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor="light"
  isLoading={false}
  mode="neutral"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor="light"
    mode="neutral"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor="light"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "iAGHHV",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="neutral"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="neutral"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    NEUTRAL_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;

exports[`button mode="positive" should match snapshot 1`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: #d3f0e6;
  border-color: #d3f0e6;
  color: #0aaf77;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #ace5d1;
  border-color: #ace5d1;
  color: #089c6a;
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #7cd6b6;
  border-color: #7cd6b6;
  color: #047750;
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c0:focus-visible {
  box-shadow: #7cd6b6 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor=""
  isLoading={false}
  mode="positive"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor=""
    mode="positive"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor=""
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "cKBKAN",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="positive"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="positive"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    POSITIVE_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;

exports[`button mode="primary" should match snapshot 1`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: #8045ff;
  border-color: #8045ff;
  color: #ffffff;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #6124e2;
  border-color: #6124e2;
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #410ab5;
  border-color: #410ab5;
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c0:focus-visible {
  box-shadow: #410ab5 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor=""
  isLoading={false}
  mode="primary"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor=""
    mode="primary"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor=""
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "frOVBL",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="primary"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="primary"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "iDvfiU",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    PRIMARY_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;

exports[`button mode="secondary" should match snapshot 1`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: #e4d8ff;
  border-color: #e4d8ff;
  color: #6124e2;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d0bbff;
  border-color: #d0bbff;
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #b898ff;
  border-color: #b898ff;
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c0:focus-visible {
  box-shadow: #b898ff 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor=""
  isLoading={false}
  mode="secondary"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor=""
    mode="secondary"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor=""
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "kBGuWN",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="secondary"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="secondary"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    SECONDARY_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;

exports[`button mode="subtle" should match snapshot 1`] = `
.c1 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c0 {
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  transition: background-color 100ms ease-in-out,border-color 100ms ease-in-out,box-shadow 100ms ease-in-out;
  white-space: nowrap;
  background-color: transparent;
  border-color: transparent;
  color: #6124e2;
}

.c0:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgba(0,0,0,0.1);
}

.c0:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: rgba(0,0,0,0.15);
}

.c0:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: transparent;
  border-color: transparent;
  color: #b6bbc7;
}

.c0:focus-visible {
  box-shadow: rgba(0,0,0,0.15) 0 0 0 2px;
}

<Button
  disabled={false}
  fontColor=""
  isLoading={false}
  mode="subtle"
  onClick={[Function]}
  type="button"
>
  <StyledButton
    disabled={false}
    fontColor=""
    mode="subtle"
    onClick={[Function]}
    type="button"
  >
    <StyledComponent
      disabled={false}
      fontColor=""
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledButton-sc-1etazn9-0",
            "isStatic": false,
            "lastClassName": "kkCaIZ",
            "rules": Array [
              "border-radius:3px;border-style:solid;border-width:2px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
              "100ms",
              " ease-in-out,border-color ",
              "100ms",
              " ease-in-out,box-shadow ",
              "100ms",
              " ease-in-out;white-space:nowrap;",
              [Function],
              ";:hover{cursor:pointer;text-decoration:none;",
              [Function],
              "};:active{text-decoration:none;",
              [Function],
              "};:disabled{cursor:not-allowed;text-decoration:none;",
              [Function],
              "};:focus-visible{",
              [Function],
              "}",
            ],
          },
          "displayName": "StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "StyledButton-sc-1etazn9-0",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      mode="subtle"
      onClick={[Function]}
      type="button"
    >
      <button
        className="c0"
        disabled={false}
        mode="subtle"
        onClick={[Function]}
        type="button"
      >
        <ContentWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ContentWrapper-sc-36hfub-0",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                  ],
                },
                "displayName": "ContentWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ContentWrapper-sc-36hfub-0",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c1"
            >
              <Content
                isLoading={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Content-sc-18psqsj-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "flex:1 1 auto;opacity:",
                          [Function],
                          ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                        ],
                      },
                      "displayName": "Content",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Content-sc-18psqsj-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLoading={false}
                >
                  <span
                    className="c2"
                  >
                    SUBTLE_BUTTON
                  </span>
                </StyledComponent>
              </Content>
            </span>
          </StyledComponent>
        </ContentWrapper>
      </button>
    </StyledComponent>
  </StyledButton>
</Button>
`;
