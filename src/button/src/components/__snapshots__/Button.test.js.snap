// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`button mode="default" should match snapshot 1`] = `
<Button
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                DEFAULT_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;

exports[`button mode="default" should match snapshot 2`] = `
<Button
  mode="default"
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    mode="default"
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      mode="default"
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        mode="default"
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          mode="default"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            mode="default"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              mode="default"
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                DEFAULT_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;

exports[`button mode="negative" should match snapshot 1`] = `
<Button
  mode="negative"
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    mode="negative"
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      mode="negative"
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        mode="negative"
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          mode="negative"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            mode="negative"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              mode="negative"
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                NEGATIVE_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;

exports[`button mode="neutral" should match snapshot 1`] = `
<Button
  fontColor="dark"
  mode="neutral"
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    fontColor="dark"
    mode="neutral"
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      fontColor="dark"
      mode="neutral"
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        fontColor="dark"
        mode="neutral"
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          fontColor="dark"
          mode="neutral"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            fontColor="dark"
            mode="neutral"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              fontColor="dark"
              mode="neutral"
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                NEUTRAL_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;

exports[`button mode="neutral" should match snapshot 2`] = `
<Button
  fontColor="light"
  mode="neutral"
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    fontColor="light"
    mode="neutral"
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      fontColor="light"
      mode="neutral"
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        fontColor="light"
        mode="neutral"
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          fontColor="light"
          mode="neutral"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            fontColor="light"
            mode="neutral"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              fontColor="light"
              mode="neutral"
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                NEUTRAL_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;

exports[`button mode="positive" should match snapshot 1`] = `
<Button
  mode="positive"
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    mode="positive"
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      mode="positive"
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        mode="positive"
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          mode="positive"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            mode="positive"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              mode="positive"
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                POSITIVE_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;

exports[`button mode="primary" should match snapshot 1`] = `
<Button
  mode="primary"
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    mode="primary"
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      mode="primary"
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        mode="primary"
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          mode="primary"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            mode="primary"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              mode="primary"
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                PRIMARY_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;

exports[`button mode="secondary" should match snapshot 1`] = `
<Button
  mode="secondary"
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    mode="secondary"
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      mode="secondary"
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        mode="secondary"
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          mode="secondary"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            mode="secondary"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              mode="secondary"
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                SECONDARY_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;

exports[`button mode="subtle" should match snapshot 1`] = `
<Button
  mode="subtle"
  onClick={[Function]}
>
  <WithStyles(WithStyles(ForwardRef(Button)))
    mode="subtle"
    onClick={[Function]}
    variant="contained"
  >
    <WithStyles(ForwardRef(Button))
      classes={
        Object {
          "colorInherit": "Button-colorInherit-23",
          "contained": "Button-contained-15",
          "containedNegative": "Button-containedNegative-19",
          "containedPositive": "Button-containedPositive-18",
          "containedPrimary": "Button-containedPrimary-16",
          "containedSecondary": "Button-containedSecondary-17",
          "containedSizeLarge": "Button-containedSizeLarge-29",
          "containedSizeSmall": "Button-containedSizeSmall-28",
          "containedWarning": "Button-containedWarning-20",
          "disabled": "Button-disabled-22",
          "endIcon": "Button-endIcon-34",
          "focusVisible": "Button-focusVisible-21",
          "fullWidth": "Button-fullWidth-32",
          "iconSizeLarge": "Button-iconSizeLarge-37",
          "iconSizeMedium": "Button-iconSizeMedium-36",
          "iconSizeSmall": "Button-iconSizeSmall-35",
          "label": "Button-label-2",
          "outlined": "Button-outlined-9",
          "outlinedNegative": "Button-outlinedNegative-13",
          "outlinedPositive": "Button-outlinedPositive-12",
          "outlinedPrimary": "Button-outlinedPrimary-10",
          "outlinedSecondary": "Button-outlinedSecondary-11",
          "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
          "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
          "outlinedWarning": "Button-outlinedWarning-14",
          "root": "Button-root-1",
          "sizeLarge": "Button-sizeLarge-31",
          "sizeSmall": "Button-sizeSmall-30",
          "startIcon": "Button-startIcon-33",
          "text": "Button-text-3",
          "textNegative": "Button-textNegative-7",
          "textPositive": "Button-textPositive-6",
          "textPrimary": "Button-textPrimary-4",
          "textSecondary": "Button-textSecondary-5",
          "textSizeLarge": "Button-textSizeLarge-25",
          "textSizeSmall": "Button-textSizeSmall-24",
          "textWarning": "Button-textWarning-8",
        }
      }
      mode="subtle"
      onClick={[Function]}
      variant="contained"
    >
      <ForwardRef(Button)
        classes={
          Object {
            "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
            "contained": "MuiButton-contained Button-contained-15",
            "containedNegative": "undefined Button-containedNegative-19",
            "containedPositive": "undefined Button-containedPositive-18",
            "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
            "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
            "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
            "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
            "containedWarning": "undefined Button-containedWarning-20",
            "disableElevation": "MuiButton-disableElevation",
            "disabled": "Mui-disabled Button-disabled-22",
            "endIcon": "MuiButton-endIcon Button-endIcon-34",
            "focusVisible": "Mui-focusVisible Button-focusVisible-21",
            "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
            "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
            "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
            "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
            "label": "MuiButton-label Button-label-2",
            "outlined": "MuiButton-outlined Button-outlined-9",
            "outlinedNegative": "undefined Button-outlinedNegative-13",
            "outlinedPositive": "undefined Button-outlinedPositive-12",
            "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
            "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
            "outlinedWarning": "undefined Button-outlinedWarning-14",
            "root": "MuiButton-root Button-root-1",
            "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
            "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
            "startIcon": "MuiButton-startIcon Button-startIcon-33",
            "text": "MuiButton-text Button-text-3",
            "textNegative": "undefined Button-textNegative-7",
            "textPositive": "undefined Button-textPositive-6",
            "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
            "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
            "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
            "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
            "textWarning": "undefined Button-textWarning-8",
          }
        }
        mode="subtle"
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
          mode="subtle"
          onClick={[Function]}
          type="button"
        >
          <ForwardRef(ButtonBase)
            className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
            mode="subtle"
            onClick={[Function]}
            type="button"
          >
            <button
              className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              disabled={false}
              mode="subtle"
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label Button-label-2"
              >
                SUBTLE_BUTTON
              </span>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </button>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(Button)>
    </WithStyles(ForwardRef(Button))>
  </WithStyles(WithStyles(ForwardRef(Button)))>
</Button>
`;
