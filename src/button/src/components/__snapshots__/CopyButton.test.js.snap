// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CopyButton icon with text should match snapshot 1`] = `
.c0 {
  margin: 0 8px 0 0;
}

<CopyButton>
  <IconButton
    icon={
      <FontAwesomeIcon
        border={false}
        className=""
        fixedWidth={false}
        flip={null}
        icon={
          Object {
            "icon": Array [
              448,
              512,
              Array [],
              "f0c5",
              "M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z",
            ],
            "iconName": "copy",
            "prefix": "far",
          }
        }
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        swapOpacity={false}
        symbol={false}
        title=""
        transform={null}
      />
    }
  >
    <Button>
      <WithStyles(WithStyles(ForwardRef(Button)))
        variant="contained"
      >
        <WithStyles(ForwardRef(Button))
          classes={
            Object {
              "colorInherit": "Button-colorInherit-23",
              "contained": "Button-contained-15",
              "containedNegative": "Button-containedNegative-19",
              "containedPositive": "Button-containedPositive-18",
              "containedPrimary": "Button-containedPrimary-16",
              "containedSecondary": "Button-containedSecondary-17",
              "containedSizeLarge": "Button-containedSizeLarge-29",
              "containedSizeSmall": "Button-containedSizeSmall-28",
              "containedWarning": "Button-containedWarning-20",
              "disabled": "Button-disabled-22",
              "endIcon": "Button-endIcon-34",
              "focusVisible": "Button-focusVisible-21",
              "fullWidth": "Button-fullWidth-32",
              "iconSizeLarge": "Button-iconSizeLarge-37",
              "iconSizeMedium": "Button-iconSizeMedium-36",
              "iconSizeSmall": "Button-iconSizeSmall-35",
              "label": "Button-label-2",
              "outlined": "Button-outlined-9",
              "outlinedNegative": "Button-outlinedNegative-13",
              "outlinedPositive": "Button-outlinedPositive-12",
              "outlinedPrimary": "Button-outlinedPrimary-10",
              "outlinedSecondary": "Button-outlinedSecondary-11",
              "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
              "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
              "outlinedWarning": "Button-outlinedWarning-14",
              "root": "Button-root-1",
              "sizeLarge": "Button-sizeLarge-31",
              "sizeSmall": "Button-sizeSmall-30",
              "startIcon": "Button-startIcon-33",
              "text": "Button-text-3",
              "textNegative": "Button-textNegative-7",
              "textPositive": "Button-textPositive-6",
              "textPrimary": "Button-textPrimary-4",
              "textSecondary": "Button-textSecondary-5",
              "textSizeLarge": "Button-textSizeLarge-25",
              "textSizeSmall": "Button-textSizeSmall-24",
              "textWarning": "Button-textWarning-8",
            }
          }
          variant="contained"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
                "contained": "MuiButton-contained Button-contained-15",
                "containedNegative": "undefined Button-containedNegative-19",
                "containedPositive": "undefined Button-containedPositive-18",
                "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
                "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
                "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
                "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
                "containedWarning": "undefined Button-containedWarning-20",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled Button-disabled-22",
                "endIcon": "MuiButton-endIcon Button-endIcon-34",
                "focusVisible": "Mui-focusVisible Button-focusVisible-21",
                "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
                "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
                "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
                "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
                "label": "MuiButton-label Button-label-2",
                "outlined": "MuiButton-outlined Button-outlined-9",
                "outlinedNegative": "undefined Button-outlinedNegative-13",
                "outlinedPositive": "undefined Button-outlinedPositive-12",
                "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
                "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
                "outlinedWarning": "undefined Button-outlinedWarning-14",
                "root": "MuiButton-root Button-root-1",
                "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
                "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
                "startIcon": "MuiButton-startIcon Button-startIcon-33",
                "text": "MuiButton-text Button-text-3",
                "textNegative": "undefined Button-textNegative-7",
                "textPositive": "undefined Button-textPositive-6",
                "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
                "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
                "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
                "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
                "textWarning": "undefined Button-textWarning-8",
              }
            }
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
                  disabled={false}
                  onBlur={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label Button-label-2"
                  >
                    <IconButton__IconMarginRight>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "IconButton__IconMarginRight-g9q5gl-0",
                              "isStatic": false,
                              "lastClassName": "c0",
                              "rules": Array [
                                "margin:0 8px 0 0;",
                              ],
                            },
                            "displayName": "IconButton__IconMarginRight",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "IconButton__IconMarginRight-g9q5gl-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c0"
                        >
                          <FontAwesomeIcon
                            border={false}
                            className=""
                            fixedWidth={false}
                            flip={null}
                            icon={
                              Object {
                                "icon": Array [
                                  448,
                                  512,
                                  Array [],
                                  "f0c5",
                                  "M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z",
                                ],
                                "iconName": "copy",
                                "prefix": "far",
                              }
                            }
                            inverse={false}
                            listItem={false}
                            mask={null}
                            pull={null}
                            pulse={false}
                            rotation={null}
                            size={null}
                            spin={false}
                            swapOpacity={false}
                            symbol={false}
                            title=""
                            transform={null}
                          >
                            <svg
                              aria-hidden="true"
                              className="svg-inline--fa fa-copy fa-w-14 "
                              data-icon="copy"
                              data-prefix="far"
                              focusable="false"
                              role="img"
                              style={Object {}}
                              viewBox="0 0 448 512"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"
                                fill="currentColor"
                                style={Object {}}
                              />
                            </svg>
                          </FontAwesomeIcon>
                        </span>
                      </StyledComponent>
                    </IconButton__IconMarginRight>
                    Copy
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </WithStyles(WithStyles(ForwardRef(Button)))>
    </Button>
  </IconButton>
</CopyButton>
`;

exports[`CopyButton icon without text should match snapshot 1`] = `
<CopyButton>
  <IconButton
    icon={
      <FontAwesomeIcon
        border={false}
        className=""
        fixedWidth={false}
        flip={null}
        icon={
          Object {
            "icon": Array [
              448,
              512,
              Array [],
              "f0c5",
              "M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z",
            ],
            "iconName": "copy",
            "prefix": "far",
          }
        }
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        swapOpacity={false}
        symbol={false}
        title=""
        transform={null}
      />
    }
  >
    <Button>
      <WithStyles(WithStyles(ForwardRef(Button)))
        variant="contained"
      >
        <WithStyles(ForwardRef(Button))
          classes={
            Object {
              "colorInherit": "Button-colorInherit-23",
              "contained": "Button-contained-15",
              "containedNegative": "Button-containedNegative-19",
              "containedPositive": "Button-containedPositive-18",
              "containedPrimary": "Button-containedPrimary-16",
              "containedSecondary": "Button-containedSecondary-17",
              "containedSizeLarge": "Button-containedSizeLarge-29",
              "containedSizeSmall": "Button-containedSizeSmall-28",
              "containedWarning": "Button-containedWarning-20",
              "disabled": "Button-disabled-22",
              "endIcon": "Button-endIcon-34",
              "focusVisible": "Button-focusVisible-21",
              "fullWidth": "Button-fullWidth-32",
              "iconSizeLarge": "Button-iconSizeLarge-37",
              "iconSizeMedium": "Button-iconSizeMedium-36",
              "iconSizeSmall": "Button-iconSizeSmall-35",
              "label": "Button-label-2",
              "outlined": "Button-outlined-9",
              "outlinedNegative": "Button-outlinedNegative-13",
              "outlinedPositive": "Button-outlinedPositive-12",
              "outlinedPrimary": "Button-outlinedPrimary-10",
              "outlinedSecondary": "Button-outlinedSecondary-11",
              "outlinedSizeLarge": "Button-outlinedSizeLarge-27",
              "outlinedSizeSmall": "Button-outlinedSizeSmall-26",
              "outlinedWarning": "Button-outlinedWarning-14",
              "root": "Button-root-1",
              "sizeLarge": "Button-sizeLarge-31",
              "sizeSmall": "Button-sizeSmall-30",
              "startIcon": "Button-startIcon-33",
              "text": "Button-text-3",
              "textNegative": "Button-textNegative-7",
              "textPositive": "Button-textPositive-6",
              "textPrimary": "Button-textPrimary-4",
              "textSecondary": "Button-textSecondary-5",
              "textSizeLarge": "Button-textSizeLarge-25",
              "textSizeSmall": "Button-textSizeSmall-24",
              "textWarning": "Button-textWarning-8",
            }
          }
          variant="contained"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit Button-colorInherit-23",
                "contained": "MuiButton-contained Button-contained-15",
                "containedNegative": "undefined Button-containedNegative-19",
                "containedPositive": "undefined Button-containedPositive-18",
                "containedPrimary": "MuiButton-containedPrimary Button-containedPrimary-16",
                "containedSecondary": "MuiButton-containedSecondary Button-containedSecondary-17",
                "containedSizeLarge": "MuiButton-containedSizeLarge Button-containedSizeLarge-29",
                "containedSizeSmall": "MuiButton-containedSizeSmall Button-containedSizeSmall-28",
                "containedWarning": "undefined Button-containedWarning-20",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled Button-disabled-22",
                "endIcon": "MuiButton-endIcon Button-endIcon-34",
                "focusVisible": "Mui-focusVisible Button-focusVisible-21",
                "fullWidth": "MuiButton-fullWidth Button-fullWidth-32",
                "iconSizeLarge": "MuiButton-iconSizeLarge Button-iconSizeLarge-37",
                "iconSizeMedium": "MuiButton-iconSizeMedium Button-iconSizeMedium-36",
                "iconSizeSmall": "MuiButton-iconSizeSmall Button-iconSizeSmall-35",
                "label": "MuiButton-label Button-label-2",
                "outlined": "MuiButton-outlined Button-outlined-9",
                "outlinedNegative": "undefined Button-outlinedNegative-13",
                "outlinedPositive": "undefined Button-outlinedPositive-12",
                "outlinedPrimary": "MuiButton-outlinedPrimary Button-outlinedPrimary-10",
                "outlinedSecondary": "MuiButton-outlinedSecondary Button-outlinedSecondary-11",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge Button-outlinedSizeLarge-27",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall Button-outlinedSizeSmall-26",
                "outlinedWarning": "undefined Button-outlinedWarning-14",
                "root": "MuiButton-root Button-root-1",
                "sizeLarge": "MuiButton-sizeLarge Button-sizeLarge-31",
                "sizeSmall": "MuiButton-sizeSmall Button-sizeSmall-30",
                "startIcon": "MuiButton-startIcon Button-startIcon-33",
                "text": "MuiButton-text Button-text-3",
                "textNegative": "undefined Button-textNegative-7",
                "textPositive": "undefined Button-textPositive-6",
                "textPrimary": "MuiButton-textPrimary Button-textPrimary-4",
                "textSecondary": "MuiButton-textSecondary Button-textSecondary-5",
                "textSizeLarge": "MuiButton-textSizeLarge Button-textSizeLarge-25",
                "textSizeSmall": "MuiButton-textSizeSmall Button-textSizeSmall-24",
                "textWarning": "undefined Button-textWarning-8",
              }
            }
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible Button-focusVisible-21"
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root Button-root-1 MuiButton-contained Button-contained-15"
                  disabled={false}
                  onBlur={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label Button-label-2"
                  >
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      fixedWidth={false}
                      flip={null}
                      icon={
                        Object {
                          "icon": Array [
                            448,
                            512,
                            Array [],
                            "f0c5",
                            "M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z",
                          ],
                          "iconName": "copy",
                          "prefix": "far",
                        }
                      }
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size={null}
                      spin={false}
                      swapOpacity={false}
                      symbol={false}
                      title=""
                      transform={null}
                    >
                      <svg
                        aria-hidden="true"
                        className="svg-inline--fa fa-copy fa-w-14 "
                        data-icon="copy"
                        data-prefix="far"
                        focusable="false"
                        role="img"
                        style={Object {}}
                        viewBox="0 0 448 512"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"
                          fill="currentColor"
                          style={Object {}}
                        />
                      </svg>
                    </FontAwesomeIcon>
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </WithStyles(WithStyles(ForwardRef(Button)))>
    </Button>
  </IconButton>
</CopyButton>
`;
