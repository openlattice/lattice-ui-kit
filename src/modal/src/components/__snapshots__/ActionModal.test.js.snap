// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ActionModal snapshots should match snapshot when isVisible="false" 1`] = `
<ActionModal
  isVisible={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="STANDBY"
  requestStateComponents={Object {}}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={false}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="STANDBY"
    requestStateComponents={Object {}}
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={true}
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={false}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={false}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={false}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        />
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;

exports[`ActionModal snapshots should match snapshot when requestState="FAILURE" 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<ActionModal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="FAILURE"
  requestStateComponents={Object {}}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={true}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="FAILURE"
    requestStateComponents={Object {}}
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={
      <ModalFooter
        isDisabledPrimary={false}
        isDisabledSecondary={false}
        isPendingPrimary={false}
        isPendingSecondary={false}
        onClickPrimary={[Function]}
        shouldStretchButtons={false}
        textPrimary="Close"
        textSecondary=""
        withFooter={true}
      />
    }
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={true}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <Portal>
            <Portal
              containerInfo={
                .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                  lattice-portal-inner-container=""
                >
                  <div
                    class="c0"
                  >
                    <div
                      class="c1"
                    >
                      <div
                        class="c2"
                      >
                        <div
                          class="c3"
                        >
                          <div
                            class="c4"
                          >
                            <h1
                              class="c5"
                            >
                              Action Action Action
                            </h1>
                            <button
                              class="c6"
                            >
                              <svg
                                aria-hidden="true"
                                class="svg-inline--fa fa-times fa-w-10 fa-lg "
                                data-icon="times"
                                data-prefix="fal"
                                focusable="false"
                                role="img"
                                viewBox="0 0 320 512"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                  fill="currentColor"
                                />
                              </svg>
                            </button>
                          </div>
                          <div
                            class="c7"
                          >
                            <span>
                              Failure. Please try again.
                            </span>
                          </div>
                          <div
                            class="c8"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                              mode="primary"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Close
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <LockToggle
                accountForScrollbars={true}
                isActive={true}
              >
                <SheetProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchProvider
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <ScrollLock
                      accountForScrollbars={true}
                      isActive={true}
                    >
                      <TouchScrollable>
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:white;border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#56565a",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Action Action Action"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#56565a",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Action Action Action
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          Failure. Please try again.
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={false}
                                                  isPendingPrimary={false}
                                                  isPendingSecondary={false}
                                                  onClickPrimary={[Function]}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Close"
                                                  textSecondary=""
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          isLonely={true}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            isLonely={true}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={false}
                                                              isLoading={false}
                                                              isLonely={true}
                                                              mode="primary"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c9"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={false}
                                                                isLonely={true}
                                                                mode="primary"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c9"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={false}
                                                                  isLonely={true}
                                                                  mode="primary"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                    component="button"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    isLonely={true}
                                                                    mode="primary"
                                                                    onClick={[Function]}
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      isLonely={true}
                                                                      mode="primary"
                                                                      onClick={[Function]}
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                        disabled={false}
                                                                        isLonely={true}
                                                                        mode="primary"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={0}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          Close
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </TouchScrollable>
                    </ScrollLock>
                  </TouchProvider>
                </SheetProvider>
              </LockToggle>
            </Portal>
          </Portal>
        </Transition>
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;

exports[`ActionModal snapshots should match snapshot when requestState="FAILURE" with requestStateComponents 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<ActionModal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="FAILURE"
  requestStateComponents={
    Object {
      "FAILURE": <span>
        Action failed. Please try again.
      </span>,
      "STANDBY": <span>
        Are you absolutely sure you want to take this action?
      </span>,
      "SUCCESS": <span>
        Success! The action has been taken.
      </span>,
    }
  }
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={true}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="FAILURE"
    requestStateComponents={
      Object {
        "FAILURE": <span>
          Action failed. Please try again.
        </span>,
        "STANDBY": <span>
          Are you absolutely sure you want to take this action?
        </span>,
        "SUCCESS": <span>
          Success! The action has been taken.
        </span>,
      }
    }
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={
      <ModalFooter
        isDisabledPrimary={false}
        isDisabledSecondary={false}
        isPendingPrimary={false}
        isPendingSecondary={false}
        onClickPrimary={[Function]}
        shouldStretchButtons={false}
        textPrimary="Close"
        textSecondary=""
        withFooter={true}
      />
    }
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={true}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <Portal>
            <Portal
              containerInfo={
                .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                  lattice-portal-inner-container=""
                >
                  <div
                    class="c0"
                  >
                    <div
                      class="c1"
                    >
                      <div
                        class="c2"
                      >
                        <div
                          class="c3"
                        >
                          <div
                            class="c4"
                          >
                            <h1
                              class="c5"
                            >
                              Action Action Action
                            </h1>
                            <button
                              class="c6"
                            >
                              <svg
                                aria-hidden="true"
                                class="svg-inline--fa fa-times fa-w-10 fa-lg "
                                data-icon="times"
                                data-prefix="fal"
                                focusable="false"
                                role="img"
                                viewBox="0 0 320 512"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                  fill="currentColor"
                                />
                              </svg>
                            </button>
                          </div>
                          <div
                            class="c7"
                          >
                            <span>
                              Action failed. Please try again.
                            </span>
                          </div>
                          <div
                            class="c8"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                              mode="primary"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Close
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <LockToggle
                accountForScrollbars={true}
                isActive={true}
              >
                <SheetProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchProvider
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <ScrollLock
                      accountForScrollbars={true}
                      isActive={true}
                    >
                      <TouchScrollable>
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:white;border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#56565a",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Action Action Action"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#56565a",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Action Action Action
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          Action failed. Please try again.
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={false}
                                                  isPendingPrimary={false}
                                                  isPendingSecondary={false}
                                                  onClickPrimary={[Function]}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Close"
                                                  textSecondary=""
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          isLonely={true}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            isLonely={true}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={false}
                                                              isLoading={false}
                                                              isLonely={true}
                                                              mode="primary"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c9"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={false}
                                                                isLonely={true}
                                                                mode="primary"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c9"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={false}
                                                                  isLonely={true}
                                                                  mode="primary"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                    component="button"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    isLonely={true}
                                                                    mode="primary"
                                                                    onClick={[Function]}
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      isLonely={true}
                                                                      mode="primary"
                                                                      onClick={[Function]}
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                        disabled={false}
                                                                        isLonely={true}
                                                                        mode="primary"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={0}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          Close
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </TouchScrollable>
                    </ScrollLock>
                  </TouchProvider>
                </SheetProvider>
              </LockToggle>
            </Portal>
          </Portal>
        </Transition>
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;

exports[`ActionModal snapshots should match snapshot when requestState="PENDING" 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c10 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c11 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<ActionModal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="PENDING"
  requestStateComponents={Object {}}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={true}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="PENDING"
    requestStateComponents={Object {}}
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={
      <ModalFooter
        isDisabledPrimary={false}
        isDisabledSecondary={true}
        isPendingPrimary={true}
        isPendingSecondary={false}
        shouldStretchButtons={false}
        textPrimary="Yes, confirm"
        textSecondary="No, cancel"
        withFooter={true}
      />
    }
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={true}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <Portal>
            <Portal
              containerInfo={
                .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c10 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c11 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                  lattice-portal-inner-container=""
                >
                  <div
                    class="c0"
                  >
                    <div
                      class="c1"
                    >
                      <div
                        class="c2"
                      >
                        <div
                          class="c3"
                        >
                          <div
                            class="c4"
                          >
                            <h1
                              class="c5"
                            >
                              Action Action Action
                            </h1>
                            <button
                              class="c6"
                            >
                              <svg
                                aria-hidden="true"
                                class="svg-inline--fa fa-times fa-w-10 fa-lg "
                                data-icon="times"
                                data-prefix="fal"
                                focusable="false"
                                role="img"
                                viewBox="0 0 320 512"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                  fill="currentColor"
                                />
                              </svg>
                            </button>
                          </div>
                          <div
                            class="c7"
                          >
                            <span>
                              Are you sure?
                            </span>
                          </div>
                          <div
                            class="c8"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation Mui-disabled Mui-disabled"
                              disabled=""
                              mode="primary"
                              tabindex="-1"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                <span
                                  class="MuiButton-startIcon MuiButton-iconSizeMedium"
                                >
                                  <span
                                    class="c10 fa-layers fa-fw fa-1x"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      class="svg-inline--fa fa-circle fa-w-16 "
                                      color="#c3c3c8"
                                      data-icon="circle"
                                      data-prefix="fal"
                                      focusable="false"
                                      id="spinner-circle"
                                      role="img"
                                      viewBox="0 0 512 512"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                        fill="currentColor"
                                      />
                                    </svg>
                                    <svg
                                      aria-hidden="true"
                                      class="svg-inline--fa fa-spinner-third fa-w-16 "
                                      color="#56565a"
                                      data-icon="spinner-third"
                                      data-prefix="fal"
                                      focusable="false"
                                      id="spinner-third"
                                      role="img"
                                      viewBox="0 0 512 512"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                        fill="currentColor"
                                      />
                                    </svg>
                                  </span>
                                </span>
                                Yes, confirm
                              </span>
                            </button>
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c11 MuiButton-disableElevation Mui-disabled Mui-disabled"
                              disabled=""
                              mode="default"
                              tabindex="-1"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                No, cancel
                              </span>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <LockToggle
                accountForScrollbars={true}
                isActive={true}
              >
                <SheetProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchProvider
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <ScrollLock
                      accountForScrollbars={true}
                      isActive={true}
                    >
                      <TouchScrollable>
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:white;border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#56565a",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Action Action Action"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#56565a",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Action Action Action
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          Are you sure?
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={true}
                                                  isPendingPrimary={true}
                                                  isPendingSecondary={false}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Yes, confirm"
                                                  textSecondary="No, cancel"
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={true}
                                                          isLoading={true}
                                                          isLonely={false}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={true}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={true}
                                                            isLonely={false}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={true}
                                                              isLoading={true}
                                                              isLonely={false}
                                                              mode="primary"
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c9"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={true}
                                                                isLonely={false}
                                                                mode="primary"
                                                                startIcon={
                                                                  <Spinner
                                                                    bottomColor="#c3c3c8"
                                                                    centered={true}
                                                                    size="1x"
                                                                    topColor="#56565a"
                                                                  />
                                                                }
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c9"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={true}
                                                                  isLonely={false}
                                                                  mode="primary"
                                                                  startIcon={
                                                                    <Spinner
                                                                      bottomColor="#c3c3c8"
                                                                      centered={true}
                                                                      size="1x"
                                                                      topColor="#56565a"
                                                                    />
                                                                  }
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation Mui-disabled"
                                                                    component="button"
                                                                    disabled={true}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    isLonely={false}
                                                                    mode="primary"
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation Mui-disabled"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={true}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      isLonely={false}
                                                                      mode="primary"
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation Mui-disabled Mui-disabled"
                                                                        disabled={true}
                                                                        isLonely={false}
                                                                        mode="primary"
                                                                        onBlur={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={-1}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          <span
                                                                            className="MuiButton-startIcon MuiButton-iconSizeMedium"
                                                                          >
                                                                            <Spinner
                                                                              bottomColor="#c3c3c8"
                                                                              centered={true}
                                                                              size="1x"
                                                                              topColor="#56565a"
                                                                            >
                                                                              <Rotate
                                                                                centered={true}
                                                                                className="fa-layers fa-fw fa-1x"
                                                                              >
                                                                                <StyledComponent
                                                                                  centered={true}
                                                                                  className="fa-layers fa-fw fa-1x"
                                                                                  forwardedComponent={
                                                                                    Object {
                                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                                      "attrs": Array [],
                                                                                      "componentStyle": ComponentStyle {
                                                                                        "componentId": "Rotate-sc-1o7nhkd-0",
                                                                                        "isStatic": false,
                                                                                        "lastClassName": "c10",
                                                                                        "rules": Array [
                                                                                          "animation:fa-spin ",
                                                                                          [Function],
                                                                                          " infinite linear;align-self:",
                                                                                          [Function],
                                                                                          ";",
                                                                                        ],
                                                                                      },
                                                                                      "displayName": "Rotate",
                                                                                      "foldedComponentIds": Array [],
                                                                                      "render": [Function],
                                                                                      "styledComponentId": "Rotate-sc-1o7nhkd-0",
                                                                                      "target": "span",
                                                                                      "toString": [Function],
                                                                                      "warnTooManyClasses": [Function],
                                                                                      "withComponent": [Function],
                                                                                    }
                                                                                  }
                                                                                  forwardedRef={null}
                                                                                >
                                                                                  <span
                                                                                    className="c10 fa-layers fa-fw fa-1x"
                                                                                  >
                                                                                    <FontAwesomeIcon
                                                                                      border={false}
                                                                                      className=""
                                                                                      color="#c3c3c8"
                                                                                      fixedWidth={false}
                                                                                      flip={null}
                                                                                      icon={
                                                                                        Object {
                                                                                          "icon": Array [
                                                                                            512,
                                                                                            512,
                                                                                            Array [],
                                                                                            "f111",
                                                                                            "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z",
                                                                                          ],
                                                                                          "iconName": "circle",
                                                                                          "prefix": "fal",
                                                                                        }
                                                                                      }
                                                                                      id="spinner-circle"
                                                                                      inverse={false}
                                                                                      listItem={false}
                                                                                      mask={null}
                                                                                      pull={null}
                                                                                      pulse={false}
                                                                                      rotation={null}
                                                                                      size={null}
                                                                                      spin={false}
                                                                                      swapOpacity={false}
                                                                                      symbol={false}
                                                                                      title=""
                                                                                      transform={null}
                                                                                    >
                                                                                      <svg
                                                                                        aria-hidden="true"
                                                                                        className="svg-inline--fa fa-circle fa-w-16 "
                                                                                        color="#c3c3c8"
                                                                                        data-icon="circle"
                                                                                        data-prefix="fal"
                                                                                        focusable="false"
                                                                                        id="spinner-circle"
                                                                                        role="img"
                                                                                        style={Object {}}
                                                                                        viewBox="0 0 512 512"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                      >
                                                                                        <path
                                                                                          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                                                                          fill="currentColor"
                                                                                          style={Object {}}
                                                                                        />
                                                                                      </svg>
                                                                                    </FontAwesomeIcon>
                                                                                    <FontAwesomeIcon
                                                                                      border={false}
                                                                                      className=""
                                                                                      color="#56565a"
                                                                                      fixedWidth={false}
                                                                                      flip={null}
                                                                                      icon={
                                                                                        Object {
                                                                                          "icon": Array [
                                                                                            512,
                                                                                            512,
                                                                                            Array [],
                                                                                            "f3f4",
                                                                                            "M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z",
                                                                                          ],
                                                                                          "iconName": "spinner-third",
                                                                                          "prefix": "fal",
                                                                                        }
                                                                                      }
                                                                                      id="spinner-third"
                                                                                      inverse={false}
                                                                                      listItem={false}
                                                                                      mask={null}
                                                                                      pull={null}
                                                                                      pulse={false}
                                                                                      rotation={null}
                                                                                      size={null}
                                                                                      spin={false}
                                                                                      swapOpacity={false}
                                                                                      symbol={false}
                                                                                      title=""
                                                                                      transform={null}
                                                                                    >
                                                                                      <svg
                                                                                        aria-hidden="true"
                                                                                        className="svg-inline--fa fa-spinner-third fa-w-16 "
                                                                                        color="#56565a"
                                                                                        data-icon="spinner-third"
                                                                                        data-prefix="fal"
                                                                                        focusable="false"
                                                                                        id="spinner-third"
                                                                                        role="img"
                                                                                        style={Object {}}
                                                                                        viewBox="0 0 512 512"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                      >
                                                                                        <path
                                                                                          d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                                                                          fill="currentColor"
                                                                                          style={Object {}}
                                                                                        />
                                                                                      </svg>
                                                                                    </FontAwesomeIcon>
                                                                                  </span>
                                                                                </StyledComponent>
                                                                              </Rotate>
                                                                            </Spinner>
                                                                          </span>
                                                                          Yes, confirm
                                                                        </span>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                        <ModalFooter__SecondaryButton
                                                          disabled={true}
                                                          isLoading={false}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={true}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c11",
                                                                  "rules": Array [
                                                                    "flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__SecondaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c11"
                                                              disabled={true}
                                                              isLoading={false}
                                                              mode="default"
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c11"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={true}
                                                                mode="default"
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c11"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={true}
                                                                  mode="default"
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c11 MuiButton-disableElevation Mui-disabled"
                                                                    component="button"
                                                                    disabled={true}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    mode="default"
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c11 MuiButton-disableElevation Mui-disabled"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={true}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      mode="default"
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c11 MuiButton-disableElevation Mui-disabled Mui-disabled"
                                                                        disabled={true}
                                                                        mode="default"
                                                                        onBlur={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={-1}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          No, cancel
                                                                        </span>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__SecondaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </TouchScrollable>
                    </ScrollLock>
                  </TouchProvider>
                </SheetProvider>
              </LockToggle>
            </Portal>
          </Portal>
        </Transition>
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;

exports[`ActionModal snapshots should match snapshot when requestState="PENDING" with requestStateComponents 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c10 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c11 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<ActionModal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="PENDING"
  requestStateComponents={
    Object {
      "FAILURE": <span>
        Action failed. Please try again.
      </span>,
      "STANDBY": <span>
        Are you absolutely sure you want to take this action?
      </span>,
      "SUCCESS": <span>
        Success! The action has been taken.
      </span>,
    }
  }
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={true}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="PENDING"
    requestStateComponents={
      Object {
        "FAILURE": <span>
          Action failed. Please try again.
        </span>,
        "STANDBY": <span>
          Are you absolutely sure you want to take this action?
        </span>,
        "SUCCESS": <span>
          Success! The action has been taken.
        </span>,
      }
    }
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={
      <ModalFooter
        isDisabledPrimary={false}
        isDisabledSecondary={true}
        isPendingPrimary={true}
        isPendingSecondary={false}
        shouldStretchButtons={false}
        textPrimary="Yes, confirm"
        textSecondary="No, cancel"
        withFooter={true}
      />
    }
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={true}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <Portal>
            <Portal
              containerInfo={
                .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c10 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c11 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                  lattice-portal-inner-container=""
                >
                  <div
                    class="c0"
                  >
                    <div
                      class="c1"
                    >
                      <div
                        class="c2"
                      >
                        <div
                          class="c3"
                        >
                          <div
                            class="c4"
                          >
                            <h1
                              class="c5"
                            >
                              Action Action Action
                            </h1>
                            <button
                              class="c6"
                            >
                              <svg
                                aria-hidden="true"
                                class="svg-inline--fa fa-times fa-w-10 fa-lg "
                                data-icon="times"
                                data-prefix="fal"
                                focusable="false"
                                role="img"
                                viewBox="0 0 320 512"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                  fill="currentColor"
                                />
                              </svg>
                            </button>
                          </div>
                          <div
                            class="c7"
                          >
                            <span>
                              Are you absolutely sure you want to take this action?
                            </span>
                          </div>
                          <div
                            class="c8"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation Mui-disabled Mui-disabled"
                              disabled=""
                              mode="primary"
                              tabindex="-1"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                <span
                                  class="MuiButton-startIcon MuiButton-iconSizeMedium"
                                >
                                  <span
                                    class="c10 fa-layers fa-fw fa-1x"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      class="svg-inline--fa fa-circle fa-w-16 "
                                      color="#c3c3c8"
                                      data-icon="circle"
                                      data-prefix="fal"
                                      focusable="false"
                                      id="spinner-circle"
                                      role="img"
                                      viewBox="0 0 512 512"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                        fill="currentColor"
                                      />
                                    </svg>
                                    <svg
                                      aria-hidden="true"
                                      class="svg-inline--fa fa-spinner-third fa-w-16 "
                                      color="#56565a"
                                      data-icon="spinner-third"
                                      data-prefix="fal"
                                      focusable="false"
                                      id="spinner-third"
                                      role="img"
                                      viewBox="0 0 512 512"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                        fill="currentColor"
                                      />
                                    </svg>
                                  </span>
                                </span>
                                Yes, confirm
                              </span>
                            </button>
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c11 MuiButton-disableElevation Mui-disabled Mui-disabled"
                              disabled=""
                              mode="default"
                              tabindex="-1"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                No, cancel
                              </span>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <LockToggle
                accountForScrollbars={true}
                isActive={true}
              >
                <SheetProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchProvider
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <ScrollLock
                      accountForScrollbars={true}
                      isActive={true}
                    >
                      <TouchScrollable>
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:white;border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#56565a",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Action Action Action"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#56565a",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Action Action Action
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          Are you absolutely sure you want to take this action?
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={true}
                                                  isPendingPrimary={true}
                                                  isPendingSecondary={false}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Yes, confirm"
                                                  textSecondary="No, cancel"
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={true}
                                                          isLoading={true}
                                                          isLonely={false}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={true}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={true}
                                                            isLonely={false}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={true}
                                                              isLoading={true}
                                                              isLonely={false}
                                                              mode="primary"
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c9"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={true}
                                                                isLonely={false}
                                                                mode="primary"
                                                                startIcon={
                                                                  <Spinner
                                                                    bottomColor="#c3c3c8"
                                                                    centered={true}
                                                                    size="1x"
                                                                    topColor="#56565a"
                                                                  />
                                                                }
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c9"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={true}
                                                                  isLonely={false}
                                                                  mode="primary"
                                                                  startIcon={
                                                                    <Spinner
                                                                      bottomColor="#c3c3c8"
                                                                      centered={true}
                                                                      size="1x"
                                                                      topColor="#56565a"
                                                                    />
                                                                  }
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation Mui-disabled"
                                                                    component="button"
                                                                    disabled={true}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    isLonely={false}
                                                                    mode="primary"
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation Mui-disabled"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={true}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      isLonely={false}
                                                                      mode="primary"
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation Mui-disabled Mui-disabled"
                                                                        disabled={true}
                                                                        isLonely={false}
                                                                        mode="primary"
                                                                        onBlur={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={-1}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          <span
                                                                            className="MuiButton-startIcon MuiButton-iconSizeMedium"
                                                                          >
                                                                            <Spinner
                                                                              bottomColor="#c3c3c8"
                                                                              centered={true}
                                                                              size="1x"
                                                                              topColor="#56565a"
                                                                            >
                                                                              <Rotate
                                                                                centered={true}
                                                                                className="fa-layers fa-fw fa-1x"
                                                                              >
                                                                                <StyledComponent
                                                                                  centered={true}
                                                                                  className="fa-layers fa-fw fa-1x"
                                                                                  forwardedComponent={
                                                                                    Object {
                                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                                      "attrs": Array [],
                                                                                      "componentStyle": ComponentStyle {
                                                                                        "componentId": "Rotate-sc-1o7nhkd-0",
                                                                                        "isStatic": false,
                                                                                        "lastClassName": "c10",
                                                                                        "rules": Array [
                                                                                          "animation:fa-spin ",
                                                                                          [Function],
                                                                                          " infinite linear;align-self:",
                                                                                          [Function],
                                                                                          ";",
                                                                                        ],
                                                                                      },
                                                                                      "displayName": "Rotate",
                                                                                      "foldedComponentIds": Array [],
                                                                                      "render": [Function],
                                                                                      "styledComponentId": "Rotate-sc-1o7nhkd-0",
                                                                                      "target": "span",
                                                                                      "toString": [Function],
                                                                                      "warnTooManyClasses": [Function],
                                                                                      "withComponent": [Function],
                                                                                    }
                                                                                  }
                                                                                  forwardedRef={null}
                                                                                >
                                                                                  <span
                                                                                    className="c10 fa-layers fa-fw fa-1x"
                                                                                  >
                                                                                    <FontAwesomeIcon
                                                                                      border={false}
                                                                                      className=""
                                                                                      color="#c3c3c8"
                                                                                      fixedWidth={false}
                                                                                      flip={null}
                                                                                      icon={
                                                                                        Object {
                                                                                          "icon": Array [
                                                                                            512,
                                                                                            512,
                                                                                            Array [],
                                                                                            "f111",
                                                                                            "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z",
                                                                                          ],
                                                                                          "iconName": "circle",
                                                                                          "prefix": "fal",
                                                                                        }
                                                                                      }
                                                                                      id="spinner-circle"
                                                                                      inverse={false}
                                                                                      listItem={false}
                                                                                      mask={null}
                                                                                      pull={null}
                                                                                      pulse={false}
                                                                                      rotation={null}
                                                                                      size={null}
                                                                                      spin={false}
                                                                                      swapOpacity={false}
                                                                                      symbol={false}
                                                                                      title=""
                                                                                      transform={null}
                                                                                    >
                                                                                      <svg
                                                                                        aria-hidden="true"
                                                                                        className="svg-inline--fa fa-circle fa-w-16 "
                                                                                        color="#c3c3c8"
                                                                                        data-icon="circle"
                                                                                        data-prefix="fal"
                                                                                        focusable="false"
                                                                                        id="spinner-circle"
                                                                                        role="img"
                                                                                        style={Object {}}
                                                                                        viewBox="0 0 512 512"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                      >
                                                                                        <path
                                                                                          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                                                                          fill="currentColor"
                                                                                          style={Object {}}
                                                                                        />
                                                                                      </svg>
                                                                                    </FontAwesomeIcon>
                                                                                    <FontAwesomeIcon
                                                                                      border={false}
                                                                                      className=""
                                                                                      color="#56565a"
                                                                                      fixedWidth={false}
                                                                                      flip={null}
                                                                                      icon={
                                                                                        Object {
                                                                                          "icon": Array [
                                                                                            512,
                                                                                            512,
                                                                                            Array [],
                                                                                            "f3f4",
                                                                                            "M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z",
                                                                                          ],
                                                                                          "iconName": "spinner-third",
                                                                                          "prefix": "fal",
                                                                                        }
                                                                                      }
                                                                                      id="spinner-third"
                                                                                      inverse={false}
                                                                                      listItem={false}
                                                                                      mask={null}
                                                                                      pull={null}
                                                                                      pulse={false}
                                                                                      rotation={null}
                                                                                      size={null}
                                                                                      spin={false}
                                                                                      swapOpacity={false}
                                                                                      symbol={false}
                                                                                      title=""
                                                                                      transform={null}
                                                                                    >
                                                                                      <svg
                                                                                        aria-hidden="true"
                                                                                        className="svg-inline--fa fa-spinner-third fa-w-16 "
                                                                                        color="#56565a"
                                                                                        data-icon="spinner-third"
                                                                                        data-prefix="fal"
                                                                                        focusable="false"
                                                                                        id="spinner-third"
                                                                                        role="img"
                                                                                        style={Object {}}
                                                                                        viewBox="0 0 512 512"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                      >
                                                                                        <path
                                                                                          d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                                                                          fill="currentColor"
                                                                                          style={Object {}}
                                                                                        />
                                                                                      </svg>
                                                                                    </FontAwesomeIcon>
                                                                                  </span>
                                                                                </StyledComponent>
                                                                              </Rotate>
                                                                            </Spinner>
                                                                          </span>
                                                                          Yes, confirm
                                                                        </span>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                        <ModalFooter__SecondaryButton
                                                          disabled={true}
                                                          isLoading={false}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={true}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c11",
                                                                  "rules": Array [
                                                                    "flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__SecondaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c11"
                                                              disabled={true}
                                                              isLoading={false}
                                                              mode="default"
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c11"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={true}
                                                                mode="default"
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c11"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={true}
                                                                  mode="default"
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c11 MuiButton-disableElevation Mui-disabled"
                                                                    component="button"
                                                                    disabled={true}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    mode="default"
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c11 MuiButton-disableElevation Mui-disabled"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={true}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      mode="default"
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c11 MuiButton-disableElevation Mui-disabled Mui-disabled"
                                                                        disabled={true}
                                                                        mode="default"
                                                                        onBlur={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={-1}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          No, cancel
                                                                        </span>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__SecondaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </TouchScrollable>
                    </ScrollLock>
                  </TouchProvider>
                </SheetProvider>
              </LockToggle>
            </Portal>
          </Portal>
        </Transition>
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;

exports[`ActionModal snapshots should match snapshot when requestState="STANDBY" 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c10 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<ActionModal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="STANDBY"
  requestStateComponents={Object {}}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={true}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="STANDBY"
    requestStateComponents={Object {}}
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={true}
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={true}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <Portal>
            <Portal
              containerInfo={
                .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c10 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                  lattice-portal-inner-container=""
                >
                  <div
                    class="c0"
                  >
                    <div
                      class="c1"
                    >
                      <div
                        class="c2"
                      >
                        <div
                          class="c3"
                        >
                          <div
                            class="c4"
                          >
                            <h1
                              class="c5"
                            >
                              Action Action Action
                            </h1>
                            <button
                              class="c6"
                            >
                              <svg
                                aria-hidden="true"
                                class="svg-inline--fa fa-times fa-w-10 fa-lg "
                                data-icon="times"
                                data-prefix="fal"
                                focusable="false"
                                role="img"
                                viewBox="0 0 320 512"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                  fill="currentColor"
                                />
                              </svg>
                            </button>
                          </div>
                          <div
                            class="c7"
                          >
                            <span>
                              Are you sure?
                            </span>
                          </div>
                          <div
                            class="c8"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                              mode="primary"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Yes, confirm
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c10 MuiButton-disableElevation"
                              mode="default"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                No, cancel
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <LockToggle
                accountForScrollbars={true}
                isActive={true}
              >
                <SheetProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchProvider
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <ScrollLock
                      accountForScrollbars={true}
                      isActive={true}
                    >
                      <TouchScrollable>
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:white;border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#56565a",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Action Action Action"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#56565a",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Action Action Action
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          Are you sure?
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={false}
                                                  isPendingPrimary={false}
                                                  isPendingSecondary={false}
                                                  onClickPrimary={[Function]}
                                                  onClickSecondary={[Function]}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Yes, confirm"
                                                  textSecondary="No, cancel"
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          isLonely={false}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            isLonely={false}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={false}
                                                              isLoading={false}
                                                              isLonely={false}
                                                              mode="primary"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c9"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={false}
                                                                isLonely={false}
                                                                mode="primary"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c9"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={false}
                                                                  isLonely={false}
                                                                  mode="primary"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                    component="button"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    isLonely={false}
                                                                    mode="primary"
                                                                    onClick={[Function]}
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      isLonely={false}
                                                                      mode="primary"
                                                                      onClick={[Function]}
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                        disabled={false}
                                                                        isLonely={false}
                                                                        mode="primary"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={0}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          Yes, confirm
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                        <ModalFooter__SecondaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__SecondaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c10"
                                                              disabled={false}
                                                              isLoading={false}
                                                              mode="default"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c10"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={false}
                                                                mode="default"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c10"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={false}
                                                                  mode="default"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c10 MuiButton-disableElevation"
                                                                    component="button"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    mode="default"
                                                                    onClick={[Function]}
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c10 MuiButton-disableElevation"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      mode="default"
                                                                      onClick={[Function]}
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c10 MuiButton-disableElevation"
                                                                        disabled={false}
                                                                        mode="default"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={0}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          No, cancel
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__SecondaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </TouchScrollable>
                    </ScrollLock>
                  </TouchProvider>
                </SheetProvider>
              </LockToggle>
            </Portal>
          </Portal>
        </Transition>
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;

exports[`ActionModal snapshots should match snapshot when requestState="STANDBY" with requestStateComponents 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c10 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<ActionModal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="STANDBY"
  requestStateComponents={
    Object {
      "FAILURE": <span>
        Action failed. Please try again.
      </span>,
      "STANDBY": <span>
        Are you absolutely sure you want to take this action?
      </span>,
      "SUCCESS": <span>
        Success! The action has been taken.
      </span>,
    }
  }
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={true}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="STANDBY"
    requestStateComponents={
      Object {
        "FAILURE": <span>
          Action failed. Please try again.
        </span>,
        "STANDBY": <span>
          Are you absolutely sure you want to take this action?
        </span>,
        "SUCCESS": <span>
          Success! The action has been taken.
        </span>,
      }
    }
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={true}
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={true}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <Portal>
            <Portal
              containerInfo={
                .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c10 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                  lattice-portal-inner-container=""
                >
                  <div
                    class="c0"
                  >
                    <div
                      class="c1"
                    >
                      <div
                        class="c2"
                      >
                        <div
                          class="c3"
                        >
                          <div
                            class="c4"
                          >
                            <h1
                              class="c5"
                            >
                              Action Action Action
                            </h1>
                            <button
                              class="c6"
                            >
                              <svg
                                aria-hidden="true"
                                class="svg-inline--fa fa-times fa-w-10 fa-lg "
                                data-icon="times"
                                data-prefix="fal"
                                focusable="false"
                                role="img"
                                viewBox="0 0 320 512"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                  fill="currentColor"
                                />
                              </svg>
                            </button>
                          </div>
                          <div
                            class="c7"
                          >
                            <span>
                              Are you absolutely sure you want to take this action?
                            </span>
                          </div>
                          <div
                            class="c8"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                              mode="primary"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Yes, confirm
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c10 MuiButton-disableElevation"
                              mode="default"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                No, cancel
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <LockToggle
                accountForScrollbars={true}
                isActive={true}
              >
                <SheetProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchProvider
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <ScrollLock
                      accountForScrollbars={true}
                      isActive={true}
                    >
                      <TouchScrollable>
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:white;border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#56565a",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Action Action Action"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#56565a",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Action Action Action
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          Are you absolutely sure you want to take this action?
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={false}
                                                  isPendingPrimary={false}
                                                  isPendingSecondary={false}
                                                  onClickPrimary={[Function]}
                                                  onClickSecondary={[Function]}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Yes, confirm"
                                                  textSecondary="No, cancel"
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          isLonely={false}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            isLonely={false}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={false}
                                                              isLoading={false}
                                                              isLonely={false}
                                                              mode="primary"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c9"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={false}
                                                                isLonely={false}
                                                                mode="primary"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c9"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={false}
                                                                  isLonely={false}
                                                                  mode="primary"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                    component="button"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    isLonely={false}
                                                                    mode="primary"
                                                                    onClick={[Function]}
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      isLonely={false}
                                                                      mode="primary"
                                                                      onClick={[Function]}
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                        disabled={false}
                                                                        isLonely={false}
                                                                        mode="primary"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={0}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          Yes, confirm
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                        <ModalFooter__SecondaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__SecondaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c10"
                                                              disabled={false}
                                                              isLoading={false}
                                                              mode="default"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c10"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={false}
                                                                mode="default"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c10"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={false}
                                                                  mode="default"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c10 MuiButton-disableElevation"
                                                                    component="button"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    mode="default"
                                                                    onClick={[Function]}
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c10 MuiButton-disableElevation"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      mode="default"
                                                                      onClick={[Function]}
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c10 MuiButton-disableElevation"
                                                                        disabled={false}
                                                                        mode="default"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={0}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          No, cancel
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__SecondaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </TouchScrollable>
                    </ScrollLock>
                  </TouchProvider>
                </SheetProvider>
              </LockToggle>
            </Portal>
          </Portal>
        </Transition>
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;

exports[`ActionModal snapshots should match snapshot when requestState="SUCCESS" 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<ActionModal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="SUCCESS"
  requestStateComponents={Object {}}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={true}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="SUCCESS"
    requestStateComponents={Object {}}
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={
      <ModalFooter
        isDisabledPrimary={false}
        isDisabledSecondary={false}
        isPendingPrimary={false}
        isPendingSecondary={false}
        onClickPrimary={[Function]}
        shouldStretchButtons={false}
        textPrimary="Close"
        textSecondary=""
        withFooter={true}
      />
    }
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={true}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <Portal>
            <Portal
              containerInfo={
                .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                  lattice-portal-inner-container=""
                >
                  <div
                    class="c0"
                  >
                    <div
                      class="c1"
                    >
                      <div
                        class="c2"
                      >
                        <div
                          class="c3"
                        >
                          <div
                            class="c4"
                          >
                            <h1
                              class="c5"
                            >
                              Action Action Action
                            </h1>
                            <button
                              class="c6"
                            >
                              <svg
                                aria-hidden="true"
                                class="svg-inline--fa fa-times fa-w-10 fa-lg "
                                data-icon="times"
                                data-prefix="fal"
                                focusable="false"
                                role="img"
                                viewBox="0 0 320 512"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                  fill="currentColor"
                                />
                              </svg>
                            </button>
                          </div>
                          <div
                            class="c7"
                          >
                            <span>
                              Success!
                            </span>
                          </div>
                          <div
                            class="c8"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                              mode="primary"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Close
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <LockToggle
                accountForScrollbars={true}
                isActive={true}
              >
                <SheetProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchProvider
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <ScrollLock
                      accountForScrollbars={true}
                      isActive={true}
                    >
                      <TouchScrollable>
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:white;border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#56565a",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Action Action Action"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#56565a",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Action Action Action
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          Success!
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={false}
                                                  isPendingPrimary={false}
                                                  isPendingSecondary={false}
                                                  onClickPrimary={[Function]}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Close"
                                                  textSecondary=""
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          isLonely={true}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            isLonely={true}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={false}
                                                              isLoading={false}
                                                              isLonely={true}
                                                              mode="primary"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c9"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={false}
                                                                isLonely={true}
                                                                mode="primary"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c9"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={false}
                                                                  isLonely={true}
                                                                  mode="primary"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                    component="button"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    isLonely={true}
                                                                    mode="primary"
                                                                    onClick={[Function]}
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      isLonely={true}
                                                                      mode="primary"
                                                                      onClick={[Function]}
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                        disabled={false}
                                                                        isLonely={true}
                                                                        mode="primary"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={0}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          Close
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </TouchScrollable>
                    </ScrollLock>
                  </TouchProvider>
                </SheetProvider>
              </LockToggle>
            </Portal>
          </Portal>
        </Transition>
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;

exports[`ActionModal snapshots should match snapshot when requestState="SUCCESS" with requestStateComponents 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<ActionModal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  requestState="SUCCESS"
  requestStateComponents={
    Object {
      "FAILURE": <span>
        Action failed. Please try again.
      </span>,
      "STANDBY": <span>
        Are you absolutely sure you want to take this action?
      </span>,
      "SUCCESS": <span>
        Success! The action has been taken.
      </span>,
    }
  }
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  textTitle="Action Action Action"
>
  <Modal
    isVisible={true}
    onClickPrimary={[Function]}
    onClickSecondary={[Function]}
    onClose={[Function]}
    requestState="SUCCESS"
    requestStateComponents={
      Object {
        "FAILURE": <span>
          Action failed. Please try again.
        </span>,
        "STANDBY": <span>
          Are you absolutely sure you want to take this action?
        </span>,
        "SUCCESS": <span>
          Success! The action has been taken.
        </span>,
      }
    }
    shouldBeCentered={true}
    shouldCloseOnEscape={true}
    shouldCloseOnOutsideClick={true}
    shouldStretchButtons={false}
    textPrimary="Yes, confirm"
    textSecondary="No, cancel"
    textTitle="Action Action Action"
    viewportScrolling={false}
    withFooter={
      <ModalFooter
        isDisabledPrimary={false}
        isDisabledSecondary={false}
        isPendingPrimary={false}
        isPendingSecondary={false}
        onClickPrimary={[Function]}
        shouldStretchButtons={false}
        textPrimary="Close"
        textSecondary=""
        withFooter={true}
      />
    }
    withHeader={true}
  >
    <Overlay
      isScrollable={false}
      isVisible={true}
      onClose={[Function]}
      shouldCloseOnClick={true}
      transparent={false}
    >
      <CSSTransition
        classNames="luk-fade"
        in={true}
        mountOnEnter={true}
        timeout={200}
        unmountOnExit={true}
      >
        <Transition
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={200}
          unmountOnExit={true}
        >
          <Portal>
            <Portal
              containerInfo={
                .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c9 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                  lattice-portal-inner-container=""
                >
                  <div
                    class="c0"
                  >
                    <div
                      class="c1"
                    >
                      <div
                        class="c2"
                      >
                        <div
                          class="c3"
                        >
                          <div
                            class="c4"
                          >
                            <h1
                              class="c5"
                            >
                              Action Action Action
                            </h1>
                            <button
                              class="c6"
                            >
                              <svg
                                aria-hidden="true"
                                class="svg-inline--fa fa-times fa-w-10 fa-lg "
                                data-icon="times"
                                data-prefix="fal"
                                focusable="false"
                                role="img"
                                viewBox="0 0 320 512"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                  fill="currentColor"
                                />
                              </svg>
                            </button>
                          </div>
                          <div
                            class="c7"
                          >
                            <span>
                              Success! The action has been taken.
                            </span>
                          </div>
                          <div
                            class="c8"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                              mode="primary"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Close
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <LockToggle
                accountForScrollbars={true}
                isActive={true}
              >
                <SheetProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <TouchProvider
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <ScrollLock
                      accountForScrollbars={true}
                      isActive={true}
                    >
                      <TouchScrollable>
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:white;border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#56565a",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Action Action Action"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#56565a",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Action Action Action
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          Success! The action has been taken.
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={false}
                                                  isPendingPrimary={false}
                                                  isPendingSecondary={false}
                                                  onClickPrimary={[Function]}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Close"
                                                  textSecondary=""
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#56565a",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          isLonely={true}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            isLonely={true}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={false}
                                                              isLoading={false}
                                                              isLonely={true}
                                                              mode="primary"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="c9"
                                                                color="default"
                                                                disableElevation={true}
                                                                disabled={false}
                                                                isLonely={true}
                                                                mode="primary"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="c9"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="default"
                                                                  disableElevation={true}
                                                                  disabled={false}
                                                                  isLonely={true}
                                                                  mode="primary"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                    component="button"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    isLonely={true}
                                                                    mode="primary"
                                                                    onClick={[Function]}
                                                                    stretch={false}
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="button"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      isLonely={true}
                                                                      mode="primary"
                                                                      onClick={[Function]}
                                                                      stretch={false}
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c9 MuiButton-disableElevation"
                                                                        disabled={false}
                                                                        isLonely={true}
                                                                        mode="primary"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        stretch={false}
                                                                        tabIndex={0}
                                                                        type="button"
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          Close
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </button>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </TouchScrollable>
                    </ScrollLock>
                  </TouchProvider>
                </SheetProvider>
              </LockToggle>
            </Portal>
          </Portal>
        </Transition>
      </CSSTransition>
    </Overlay>
  </Modal>
</ActionModal>
`;
