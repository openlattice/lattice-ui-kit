// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModalFooter snapshots should match snapshot with custom footer 1`] = `
<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  withFooter={
    <div>
      <span>
        footer
      </span>
      <button
        type="button"
      >
        button 1
      </button>
      <button
        type="button"
      >
        button 2
      </button>
    </div>
  }
/>
`;

exports[`ModalFooter snapshots should match snapshot with primary and secondary buttons 1`] = `
.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #7654ff;
  border-color: #7654ff;
  color: white;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4f3fa7;
  border-color: #4f3fa7;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261e52;
  border-color: #261e52;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #261e52 0 0 0 2px;
}

.c6 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f2f2f4;
  border-color: #f2f2f4;
  color: #56565a;
}

.c6:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dfdfe3;
  border-color: #dfdfe3;
}

.c6:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d1d1d6;
  border-color: #d1d1d6;
  color: #56565a;
}

.c6:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c6:focus {
  box-shadow: #d1d1d6 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              fontColor=""
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={false}
                fontColor=""
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={false}
                    mode="primary"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                Yes, confirm
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c5",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c5"
              disabled={false}
              fontColor=""
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c5"
                disabled={false}
                fontColor=""
                mode="default"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c5"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c6 c5"
                    disabled={false}
                    mode="default"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                No, cancel
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button disabled 1`] = `
.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #7654ff;
  border-color: #7654ff;
  color: white;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4f3fa7;
  border-color: #4f3fa7;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261e52;
  border-color: #261e52;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #261e52 0 0 0 2px;
}

.c6 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f2f2f4;
  border-color: #f2f2f4;
  color: #56565a;
}

.c6:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dfdfe3;
  border-color: #dfdfe3;
}

.c6:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d1d1d6;
  border-color: #d1d1d6;
  color: #56565a;
}

.c6:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c6:focus {
  box-shadow: #d1d1d6 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={true}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={true}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={true}
              fontColor=""
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={true}
                fontColor=""
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={true}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={true}
                    mode="primary"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                Yes, confirm
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c5",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c5"
              disabled={false}
              fontColor=""
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c5"
                disabled={false}
                fontColor=""
                mode="default"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c5"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c6 c5"
                    disabled={false}
                    mode="default"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                No, cancel
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button only 1`] = `
.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #7654ff;
  border-color: #7654ff;
  color: white;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4f3fa7;
  border-color: #4f3fa7;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261e52;
  border-color: #261e52;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #261e52 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary=""
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={true}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={true}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              fontColor=""
              isLoading={false}
              isLonely={true}
              mode="primary"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={false}
                fontColor=""
                isLonely={true}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLonely={true}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={false}
                    mode="primary"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                Yes, confirm
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button pending 1`] = `
.c5 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: absolute;
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
}

.c9 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #7654ff;
  border-color: #7654ff;
  color: white;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4f3fa7;
  border-color: #4f3fa7;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261e52;
  border-color: #261e52;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #261e52 0 0 0 2px;
}

.c8 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f2f2f4;
  border-color: #f2f2f4;
  color: #56565a;
}

.c8:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dfdfe3;
  border-color: #dfdfe3;
}

.c8:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d1d1d6;
  border-color: #d1d1d6;
  color: #56565a;
}

.c8:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c8:focus {
  box-shadow: #d1d1d6 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c7 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={true}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={true}
          isLoading={true}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={true}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={true}
              fontColor=""
              isLoading={true}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={true}
                fontColor=""
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={true}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c8",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={true}
                    mode="primary"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <ButtonSpinner>
                            <ButtonSpinner__SpinnerWrapper>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "ButtonSpinner__SpinnerWrapper-sc-1wmxw4l-0",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "display:flex;position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);",
                                      ],
                                    },
                                    "displayName": "ButtonSpinner__SpinnerWrapper",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "ButtonSpinner__SpinnerWrapper-sc-1wmxw4l-0",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c4"
                                >
                                  <Spinner
                                    bottomColor="#c3c3c8"
                                    centered={true}
                                    size="1x"
                                    topColor="#56565a"
                                  >
                                    <Rotate
                                      centered={true}
                                      className="fa-layers fa-fw fa-1x"
                                    >
                                      <StyledComponent
                                        centered={true}
                                        className="fa-layers fa-fw fa-1x"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Rotate-sc-1o7nhkd-0",
                                              "isStatic": false,
                                              "lastClassName": "c5",
                                              "rules": Array [
                                                "animation:fa-spin ",
                                                [Function],
                                                " infinite linear;align-self:",
                                                [Function],
                                                ";",
                                              ],
                                            },
                                            "displayName": "Rotate",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Rotate-sc-1o7nhkd-0",
                                            "target": "span",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <span
                                          className="c5 fa-layers fa-fw fa-1x"
                                        >
                                          <FontAwesomeIcon
                                            border={false}
                                            className=""
                                            color="#c3c3c8"
                                            fixedWidth={false}
                                            flip={null}
                                            icon={
                                              Object {
                                                "icon": Array [
                                                  512,
                                                  512,
                                                  Array [],
                                                  "f111",
                                                  "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z",
                                                ],
                                                "iconName": "circle",
                                                "prefix": "fal",
                                              }
                                            }
                                            id="spinner-circle"
                                            inverse={false}
                                            listItem={false}
                                            mask={null}
                                            pull={null}
                                            pulse={false}
                                            rotation={null}
                                            size={null}
                                            spin={false}
                                            swapOpacity={false}
                                            symbol={false}
                                            title=""
                                            transform={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className="svg-inline--fa fa-circle fa-w-16 "
                                              color="#c3c3c8"
                                              data-icon="circle"
                                              data-prefix="fal"
                                              focusable="false"
                                              id="spinner-circle"
                                              role="img"
                                              style={Object {}}
                                              viewBox="0 0 512 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                                fill="currentColor"
                                                style={Object {}}
                                              />
                                            </svg>
                                          </FontAwesomeIcon>
                                          <FontAwesomeIcon
                                            border={false}
                                            className=""
                                            color="#56565a"
                                            fixedWidth={false}
                                            flip={null}
                                            icon={
                                              Object {
                                                "icon": Array [
                                                  512,
                                                  512,
                                                  Array [],
                                                  "f3f4",
                                                  "M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z",
                                                ],
                                                "iconName": "spinner-third",
                                                "prefix": "fal",
                                              }
                                            }
                                            id="spinner-third"
                                            inverse={false}
                                            listItem={false}
                                            mask={null}
                                            pull={null}
                                            pulse={false}
                                            rotation={null}
                                            size={null}
                                            spin={false}
                                            swapOpacity={false}
                                            symbol={false}
                                            title=""
                                            transform={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className="svg-inline--fa fa-spinner-third fa-w-16 "
                                              color="#56565a"
                                              data-icon="spinner-third"
                                              data-prefix="fal"
                                              focusable="false"
                                              id="spinner-third"
                                              role="img"
                                              style={Object {}}
                                              viewBox="0 0 512 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                                fill="currentColor"
                                                style={Object {}}
                                              />
                                            </svg>
                                          </FontAwesomeIcon>
                                        </span>
                                      </StyledComponent>
                                    </Rotate>
                                  </Spinner>
                                </div>
                              </StyledComponent>
                            </ButtonSpinner__SpinnerWrapper>
                          </ButtonSpinner>
                          <Content
                            isLoading={true}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c9",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={true}
                            >
                              <span
                                className="c6"
                              >
                                Yes, confirm
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c7",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c7"
              disabled={false}
              fontColor=""
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c7"
                disabled={false}
                fontColor=""
                mode="default"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c7"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c8",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c8 c7"
                    disabled={false}
                    mode="default"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c9",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c9"
                              >
                                No, cancel
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button disabled 1`] = `
.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #7654ff;
  border-color: #7654ff;
  color: white;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4f3fa7;
  border-color: #4f3fa7;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261e52;
  border-color: #261e52;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #261e52 0 0 0 2px;
}

.c6 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f2f2f4;
  border-color: #f2f2f4;
  color: #56565a;
}

.c6:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dfdfe3;
  border-color: #dfdfe3;
}

.c6:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d1d1d6;
  border-color: #d1d1d6;
  color: #56565a;
}

.c6:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c6:focus {
  box-shadow: #d1d1d6 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={true}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              fontColor=""
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={false}
                fontColor=""
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={false}
                    mode="primary"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                Yes, confirm
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={true}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c5",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c5"
              disabled={true}
              fontColor=""
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c5"
                disabled={true}
                fontColor=""
                mode="default"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c5"
                  disabled={true}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c6 c5"
                    disabled={true}
                    mode="default"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                No, cancel
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button only 1`] = `
.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f2f2f4;
  border-color: #f2f2f4;
  color: #56565a;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dfdfe3;
  border-color: #dfdfe3;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d1d1d6;
  border-color: #d1d1d6;
  color: #56565a;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #d1d1d6 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary=""
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              fontColor=""
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={false}
                fontColor=""
                mode="default"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={false}
                    mode="default"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                No, cancel
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button pending 1`] = `
.c8 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: absolute;
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
}

.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c9 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #7654ff;
  border-color: #7654ff;
  color: white;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4f3fa7;
  border-color: #4f3fa7;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261e52;
  border-color: #261e52;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #261e52 0 0 0 2px;
}

.c6 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f2f2f4;
  border-color: #f2f2f4;
  color: #56565a;
}

.c6:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dfdfe3;
  border-color: #dfdfe3;
}

.c6:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d1d1d6;
  border-color: #d1d1d6;
  color: #56565a;
}

.c6:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c6:focus {
  box-shadow: #d1d1d6 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              fontColor=""
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={false}
                fontColor=""
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={false}
                    mode="primary"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c9",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                Yes, confirm
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={true}
          isLoading={true}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c5",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={true}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c5"
              disabled={true}
              fontColor=""
              isLoading={true}
              mode="default"
              onClick={[Function]}
              stretch={false}
              type="button"
            >
              <StyledButton
                className="c5"
                disabled={true}
                fontColor=""
                mode="default"
                onClick={[Function]}
                stretch={false}
                type="button"
              >
                <StyledComponent
                  className="c5"
                  disabled={true}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  type="button"
                >
                  <button
                    className="c6 c5"
                    disabled={true}
                    mode="default"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <ButtonSpinner>
                            <ButtonSpinner__SpinnerWrapper>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "ButtonSpinner__SpinnerWrapper-sc-1wmxw4l-0",
                                      "isStatic": false,
                                      "lastClassName": "c7",
                                      "rules": Array [
                                        "display:flex;position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);",
                                      ],
                                    },
                                    "displayName": "ButtonSpinner__SpinnerWrapper",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "ButtonSpinner__SpinnerWrapper-sc-1wmxw4l-0",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c7"
                                >
                                  <Spinner
                                    bottomColor="#c3c3c8"
                                    centered={true}
                                    size="1x"
                                    topColor="#56565a"
                                  >
                                    <Rotate
                                      centered={true}
                                      className="fa-layers fa-fw fa-1x"
                                    >
                                      <StyledComponent
                                        centered={true}
                                        className="fa-layers fa-fw fa-1x"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Rotate-sc-1o7nhkd-0",
                                              "isStatic": false,
                                              "lastClassName": "c8",
                                              "rules": Array [
                                                "animation:fa-spin ",
                                                [Function],
                                                " infinite linear;align-self:",
                                                [Function],
                                                ";",
                                              ],
                                            },
                                            "displayName": "Rotate",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Rotate-sc-1o7nhkd-0",
                                            "target": "span",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <span
                                          className="c8 fa-layers fa-fw fa-1x"
                                        >
                                          <FontAwesomeIcon
                                            border={false}
                                            className=""
                                            color="#c3c3c8"
                                            fixedWidth={false}
                                            flip={null}
                                            icon={
                                              Object {
                                                "icon": Array [
                                                  512,
                                                  512,
                                                  Array [],
                                                  "f111",
                                                  "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z",
                                                ],
                                                "iconName": "circle",
                                                "prefix": "fal",
                                              }
                                            }
                                            id="spinner-circle"
                                            inverse={false}
                                            listItem={false}
                                            mask={null}
                                            pull={null}
                                            pulse={false}
                                            rotation={null}
                                            size={null}
                                            spin={false}
                                            swapOpacity={false}
                                            symbol={false}
                                            title=""
                                            transform={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className="svg-inline--fa fa-circle fa-w-16 "
                                              color="#c3c3c8"
                                              data-icon="circle"
                                              data-prefix="fal"
                                              focusable="false"
                                              id="spinner-circle"
                                              role="img"
                                              style={Object {}}
                                              viewBox="0 0 512 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                                fill="currentColor"
                                                style={Object {}}
                                              />
                                            </svg>
                                          </FontAwesomeIcon>
                                          <FontAwesomeIcon
                                            border={false}
                                            className=""
                                            color="#56565a"
                                            fixedWidth={false}
                                            flip={null}
                                            icon={
                                              Object {
                                                "icon": Array [
                                                  512,
                                                  512,
                                                  Array [],
                                                  "f3f4",
                                                  "M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z",
                                                ],
                                                "iconName": "spinner-third",
                                                "prefix": "fal",
                                              }
                                            }
                                            id="spinner-third"
                                            inverse={false}
                                            listItem={false}
                                            mask={null}
                                            pull={null}
                                            pulse={false}
                                            rotation={null}
                                            size={null}
                                            spin={false}
                                            swapOpacity={false}
                                            symbol={false}
                                            title=""
                                            transform={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className="svg-inline--fa fa-spinner-third fa-w-16 "
                                              color="#56565a"
                                              data-icon="spinner-third"
                                              data-prefix="fal"
                                              focusable="false"
                                              id="spinner-third"
                                              role="img"
                                              style={Object {}}
                                              viewBox="0 0 512 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                                fill="currentColor"
                                                style={Object {}}
                                              />
                                            </svg>
                                          </FontAwesomeIcon>
                                        </span>
                                      </StyledComponent>
                                    </Rotate>
                                  </Spinner>
                                </div>
                              </StyledComponent>
                            </ButtonSpinner__SpinnerWrapper>
                          </ButtonSpinner>
                          <Content
                            isLoading={true}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c9",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={true}
                            >
                              <span
                                className="c9"
                              >
                                No, cancel
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy primary and secondary buttons 1`] = `
.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #7654ff;
  border-color: #7654ff;
  color: white;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4f3fa7;
  border-color: #4f3fa7;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261e52;
  border-color: #261e52;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #261e52 0 0 0 2px;
}

.c6 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f2f2f4;
  border-color: #f2f2f4;
  color: #56565a;
}

.c6:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dfdfe3;
  border-color: #dfdfe3;
}

.c6:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d1d1d6;
  border-color: #d1d1d6;
  color: #56565a;
}

.c6:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c6:focus {
  box-shadow: #d1d1d6 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c5 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={true}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={true}
          >
            <Button
              className="c1"
              disabled={false}
              fontColor=""
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={true}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={false}
                fontColor=""
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={true}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={true}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={false}
                    mode="primary"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                Yes, confirm
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={true}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c5",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={true}
          >
            <Button
              className="c5"
              disabled={false}
              fontColor=""
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={true}
              type="button"
            >
              <StyledButton
                className="c5"
                disabled={false}
                fontColor=""
                mode="default"
                onClick={[Function]}
                stretch={true}
                type="button"
              >
                <StyledComponent
                  className="c5"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c6",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  mode="default"
                  onClick={[Function]}
                  stretch={true}
                  type="button"
                >
                  <button
                    className="c6 c5"
                    disabled={false}
                    mode="default"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                No, cancel
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy primary button 1`] = `
.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #7654ff;
  border-color: #7654ff;
  color: white;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4f3fa7;
  border-color: #4f3fa7;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #261e52;
  border-color: #261e52;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #261e52 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary="Yes, confirm"
  textSecondary=""
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={true}
          onClick={[Function]}
          stretch={true}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={true}
            onClick={[Function]}
            stretch={true}
          >
            <Button
              className="c1"
              disabled={false}
              fontColor=""
              isLoading={false}
              isLonely={true}
              mode="primary"
              onClick={[Function]}
              stretch={true}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={false}
                fontColor=""
                isLonely={true}
                mode="primary"
                onClick={[Function]}
                stretch={true}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isLonely={true}
                  mode="primary"
                  onClick={[Function]}
                  stretch={true}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={false}
                    mode="primary"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                Yes, confirm
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy secondary button 1`] = `
.c4 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c2 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f2f2f4;
  border-color: #f2f2f4;
  color: #56565a;
}

.c2:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dfdfe3;
  border-color: #dfdfe3;
}

.c2:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #d1d1d6;
  border-color: #d1d1d6;
  color: #56565a;
}

.c2:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f9f9fc;
  border-color: #f9f9fc;
  color: #8b8b90;
}

.c2:focus {
  box-shadow: #d1d1d6 0 0 0 2px;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary=""
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={true}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={true}
          >
            <Button
              className="c1"
              disabled={false}
              fontColor=""
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={true}
              type="button"
            >
              <StyledButton
                className="c1"
                disabled={false}
                fontColor=""
                mode="default"
                onClick={[Function]}
                stretch={true}
                type="button"
              >
                <StyledComponent
                  className="c1"
                  disabled={false}
                  fontColor=""
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "StyledButton-sc-1etazn9-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                          "100ms",
                          " ease-out,border-color ",
                          "100ms",
                          " ease-out,box-shadow ",
                          "100ms",
                          " ease-out;width:",
                          [Function],
                          ";white-space:nowrap;",
                          [Function],
                          ";",
                          [Function],
                          ";:hover{cursor:pointer;text-decoration:none;",
                          [Function],
                          "};:active{text-decoration:none;",
                          [Function],
                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                          [Function],
                          "};:focus{",
                          [Function],
                          "}",
                        ],
                      },
                      "displayName": "StyledButton",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  mode="default"
                  onClick={[Function]}
                  stretch={true}
                  type="button"
                >
                  <button
                    className="c2 c1"
                    disabled={false}
                    mode="default"
                    onClick={[Function]}
                    type="button"
                  >
                    <ContentWrapper>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ContentWrapper-sc-36hfub-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                              ],
                            },
                            "displayName": "ContentWrapper",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="c3"
                        >
                          <Content
                            isLoading={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Content-sc-18psqsj-0",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "flex:1 1 auto;opacity:",
                                      [Function],
                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                    ],
                                  },
                                  "displayName": "Content",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Content-sc-18psqsj-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              isLoading={false}
                            >
                              <span
                                className="c4"
                              >
                                No, cancel
                              </span>
                            </StyledComponent>
                          </Content>
                        </span>
                      </StyledComponent>
                    </ContentWrapper>
                  </button>
                </StyledComponent>
              </StyledButton>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;
