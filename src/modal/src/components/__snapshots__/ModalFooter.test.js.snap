// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModalFooter snapshots should match snapshot with custom footer 1`] = `
<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  withFooter={
    <div>
      <span>
        footer
      </span>
      <button
        type="button"
      >
        button 1
      </button>
      <button
        type="button"
      >
        button 2
      </button>
    </div>
  }
/>
`;

exports[`ModalFooter snapshots should match snapshot with primary and secondary buttons 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c2 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={false}
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    isLonely={false}
                    mode="primary"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      isLonely={false}
                      mode="primary"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                        disabled={false}
                        isLonely={false}
                        mode="primary"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Yes, confirm
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c2"
              disabled={false}
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c2"
                color="default"
                disableElevation={true}
                disabled={false}
                mode="default"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c2"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    mode="default"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      mode="default"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                        disabled={false}
                        mode="default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          No, cancel
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button disabled 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c2 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={true}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={true}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={true}
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={true}
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={true}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation Mui-disabled"
                    component="button"
                    disabled={true}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    isLonely={false}
                    mode="primary"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation Mui-disabled"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      isLonely={false}
                      mode="primary"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation Mui-disabled Mui-disabled"
                        disabled={true}
                        isLonely={false}
                        mode="primary"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={-1}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Yes, confirm
                        </span>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c2"
              disabled={false}
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c2"
                color="default"
                disableElevation={true}
                disabled={false}
                mode="default"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c2"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    mode="default"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      mode="default"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                        disabled={false}
                        mode="default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          No, cancel
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button only 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary=""
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={true}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={true}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              isLoading={false}
              isLonely={true}
              mode="primary"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={false}
                isLonely={true}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  isLonely={true}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    isLonely={true}
                    mode="primary"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      isLonely={true}
                      mode="primary"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                        disabled={false}
                        isLonely={true}
                        mode="primary"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Yes, confirm
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button pending 1`] = `
.c2 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c3 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={true}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={true}
          isLoading={true}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={true}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={true}
              isLoading={true}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={true}
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                startIcon={
                  <Spinner
                    bottomColor="#c3c3c8"
                    centered={true}
                    size="1x"
                    topColor="#56565a"
                  />
                }
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={true}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  startIcon={
                    <Spinner
                      bottomColor="#c3c3c8"
                      centered={true}
                      size="1x"
                      topColor="#56565a"
                    />
                  }
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation Mui-disabled"
                    component="button"
                    disabled={true}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    isLonely={false}
                    mode="primary"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation Mui-disabled"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      isLonely={false}
                      mode="primary"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation Mui-disabled Mui-disabled"
                        disabled={true}
                        isLonely={false}
                        mode="primary"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={-1}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          <span
                            className="MuiButton-startIcon MuiButton-iconSizeMedium"
                          >
                            <Spinner
                              bottomColor="#c3c3c8"
                              centered={true}
                              size="1x"
                              topColor="#56565a"
                            >
                              <Rotate
                                centered={true}
                                className="fa-layers fa-fw fa-1x"
                              >
                                <StyledComponent
                                  centered={true}
                                  className="fa-layers fa-fw fa-1x"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "Rotate-sc-1o7nhkd-0",
                                        "isStatic": false,
                                        "lastClassName": "c2",
                                        "rules": Array [
                                          "animation:fa-spin ",
                                          [Function],
                                          " infinite linear;align-self:",
                                          [Function],
                                          ";",
                                        ],
                                      },
                                      "displayName": "Rotate",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "Rotate-sc-1o7nhkd-0",
                                      "target": "span",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <span
                                    className="c2 fa-layers fa-fw fa-1x"
                                  >
                                    <FontAwesomeIcon
                                      border={false}
                                      className=""
                                      color="#c3c3c8"
                                      fixedWidth={false}
                                      flip={null}
                                      icon={
                                        Object {
                                          "icon": Array [
                                            512,
                                            512,
                                            Array [],
                                            "f111",
                                            "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z",
                                          ],
                                          "iconName": "circle",
                                          "prefix": "fal",
                                        }
                                      }
                                      id="spinner-circle"
                                      inverse={false}
                                      listItem={false}
                                      mask={null}
                                      pull={null}
                                      pulse={false}
                                      rotation={null}
                                      size={null}
                                      spin={false}
                                      swapOpacity={false}
                                      symbol={false}
                                      title=""
                                      transform={null}
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="svg-inline--fa fa-circle fa-w-16 "
                                        color="#c3c3c8"
                                        data-icon="circle"
                                        data-prefix="fal"
                                        focusable="false"
                                        id="spinner-circle"
                                        role="img"
                                        style={Object {}}
                                        viewBox="0 0 512 512"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                          fill="currentColor"
                                          style={Object {}}
                                        />
                                      </svg>
                                    </FontAwesomeIcon>
                                    <FontAwesomeIcon
                                      border={false}
                                      className=""
                                      color="#56565a"
                                      fixedWidth={false}
                                      flip={null}
                                      icon={
                                        Object {
                                          "icon": Array [
                                            512,
                                            512,
                                            Array [],
                                            "f3f4",
                                            "M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z",
                                          ],
                                          "iconName": "spinner-third",
                                          "prefix": "fal",
                                        }
                                      }
                                      id="spinner-third"
                                      inverse={false}
                                      listItem={false}
                                      mask={null}
                                      pull={null}
                                      pulse={false}
                                      rotation={null}
                                      size={null}
                                      spin={false}
                                      swapOpacity={false}
                                      symbol={false}
                                      title=""
                                      transform={null}
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="svg-inline--fa fa-spinner-third fa-w-16 "
                                        color="#56565a"
                                        data-icon="spinner-third"
                                        data-prefix="fal"
                                        focusable="false"
                                        id="spinner-third"
                                        role="img"
                                        style={Object {}}
                                        viewBox="0 0 512 512"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                          fill="currentColor"
                                          style={Object {}}
                                        />
                                      </svg>
                                    </FontAwesomeIcon>
                                  </span>
                                </StyledComponent>
                              </Rotate>
                            </Spinner>
                          </span>
                          Yes, confirm
                        </span>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c3"
              disabled={false}
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c3"
                color="default"
                disableElevation={true}
                disabled={false}
                mode="default"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c3"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c3 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    mode="default"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c3 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      mode="default"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c3 MuiButton-disableElevation"
                        disabled={false}
                        mode="default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          No, cancel
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button disabled 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c2 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={true}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={false}
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    isLonely={false}
                    mode="primary"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      isLonely={false}
                      mode="primary"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                        disabled={false}
                        isLonely={false}
                        mode="primary"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Yes, confirm
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={true}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c2"
              disabled={true}
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c2"
                color="default"
                disableElevation={true}
                disabled={true}
                mode="default"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c2"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={true}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation Mui-disabled"
                    component="button"
                    disabled={true}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    mode="default"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation Mui-disabled"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      mode="default"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c2 MuiButton-disableElevation Mui-disabled Mui-disabled"
                        disabled={true}
                        mode="default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={-1}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          No, cancel
                        </span>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button only 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary=""
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={false}
                mode="default"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  mode="default"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    mode="default"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      mode="default"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                        disabled={false}
                        mode="default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          No, cancel
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button pending 1`] = `
.c3 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c2 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c1"
              disabled={false}
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={false}
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    isLonely={false}
                    mode="primary"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      isLonely={false}
                      mode="primary"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                        disabled={false}
                        isLonely={false}
                        mode="primary"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Yes, confirm
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={true}
          isLoading={true}
          onClick={[Function]}
          stretch={false}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={true}
            onClick={[Function]}
            stretch={false}
          >
            <Button
              className="c2"
              disabled={true}
              isLoading={true}
              mode="default"
              onClick={[Function]}
              stretch={false}
            >
              <WithStyles(ForwardRef(Button))
                className="c2"
                color="default"
                disableElevation={true}
                disabled={true}
                mode="default"
                onClick={[Function]}
                startIcon={
                  <Spinner
                    bottomColor="#c3c3c8"
                    centered={true}
                    size="1x"
                    topColor="#56565a"
                  />
                }
                stretch={false}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c2"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={true}
                  mode="default"
                  onClick={[Function]}
                  startIcon={
                    <Spinner
                      bottomColor="#c3c3c8"
                      centered={true}
                      size="1x"
                      topColor="#56565a"
                    />
                  }
                  stretch={false}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation Mui-disabled"
                    component="button"
                    disabled={true}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    mode="default"
                    onClick={[Function]}
                    stretch={false}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation Mui-disabled"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      mode="default"
                      onClick={[Function]}
                      stretch={false}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c2 MuiButton-disableElevation Mui-disabled Mui-disabled"
                        disabled={true}
                        mode="default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={false}
                        tabIndex={-1}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          <span
                            className="MuiButton-startIcon MuiButton-iconSizeMedium"
                          >
                            <Spinner
                              bottomColor="#c3c3c8"
                              centered={true}
                              size="1x"
                              topColor="#56565a"
                            >
                              <Rotate
                                centered={true}
                                className="fa-layers fa-fw fa-1x"
                              >
                                <StyledComponent
                                  centered={true}
                                  className="fa-layers fa-fw fa-1x"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "Rotate-sc-1o7nhkd-0",
                                        "isStatic": false,
                                        "lastClassName": "c3",
                                        "rules": Array [
                                          "animation:fa-spin ",
                                          [Function],
                                          " infinite linear;align-self:",
                                          [Function],
                                          ";",
                                        ],
                                      },
                                      "displayName": "Rotate",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "Rotate-sc-1o7nhkd-0",
                                      "target": "span",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <span
                                    className="c3 fa-layers fa-fw fa-1x"
                                  >
                                    <FontAwesomeIcon
                                      border={false}
                                      className=""
                                      color="#c3c3c8"
                                      fixedWidth={false}
                                      flip={null}
                                      icon={
                                        Object {
                                          "icon": Array [
                                            512,
                                            512,
                                            Array [],
                                            "f111",
                                            "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z",
                                          ],
                                          "iconName": "circle",
                                          "prefix": "fal",
                                        }
                                      }
                                      id="spinner-circle"
                                      inverse={false}
                                      listItem={false}
                                      mask={null}
                                      pull={null}
                                      pulse={false}
                                      rotation={null}
                                      size={null}
                                      spin={false}
                                      swapOpacity={false}
                                      symbol={false}
                                      title=""
                                      transform={null}
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="svg-inline--fa fa-circle fa-w-16 "
                                        color="#c3c3c8"
                                        data-icon="circle"
                                        data-prefix="fal"
                                        focusable="false"
                                        id="spinner-circle"
                                        role="img"
                                        style={Object {}}
                                        viewBox="0 0 512 512"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                          fill="currentColor"
                                          style={Object {}}
                                        />
                                      </svg>
                                    </FontAwesomeIcon>
                                    <FontAwesomeIcon
                                      border={false}
                                      className=""
                                      color="#56565a"
                                      fixedWidth={false}
                                      flip={null}
                                      icon={
                                        Object {
                                          "icon": Array [
                                            512,
                                            512,
                                            Array [],
                                            "f3f4",
                                            "M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z",
                                          ],
                                          "iconName": "spinner-third",
                                          "prefix": "fal",
                                        }
                                      }
                                      id="spinner-third"
                                      inverse={false}
                                      listItem={false}
                                      mask={null}
                                      pull={null}
                                      pulse={false}
                                      rotation={null}
                                      size={null}
                                      spin={false}
                                      swapOpacity={false}
                                      symbol={false}
                                      title=""
                                      transform={null}
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="svg-inline--fa fa-spinner-third fa-w-16 "
                                        color="#56565a"
                                        data-icon="spinner-third"
                                        data-prefix="fal"
                                        focusable="false"
                                        id="spinner-third"
                                        role="img"
                                        style={Object {}}
                                        viewBox="0 0 512 512"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                          fill="currentColor"
                                          style={Object {}}
                                        />
                                      </svg>
                                    </FontAwesomeIcon>
                                  </span>
                                </StyledComponent>
                              </Rotate>
                            </Spinner>
                          </span>
                          No, cancel
                        </span>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy primary and secondary buttons 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0 0 0 20px;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={false}
          onClick={[Function]}
          stretch={true}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={false}
            onClick={[Function]}
            stretch={true}
          >
            <Button
              className="c1"
              disabled={false}
              isLoading={false}
              isLonely={false}
              mode="primary"
              onClick={[Function]}
              stretch={true}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={false}
                isLonely={false}
                mode="primary"
                onClick={[Function]}
                stretch={true}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  isLonely={false}
                  mode="primary"
                  onClick={[Function]}
                  stretch={true}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    isLonely={false}
                    mode="primary"
                    onClick={[Function]}
                    stretch={true}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      isLonely={false}
                      mode="primary"
                      onClick={[Function]}
                      stretch={true}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                        disabled={false}
                        isLonely={false}
                        mode="primary"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={true}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Yes, confirm
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={true}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={true}
          >
            <Button
              className="c2"
              disabled={false}
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={true}
            >
              <WithStyles(ForwardRef(Button))
                className="c2"
                color="default"
                disableElevation={true}
                disabled={false}
                mode="default"
                onClick={[Function]}
                stretch={true}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c2"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  mode="default"
                  onClick={[Function]}
                  stretch={true}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    mode="default"
                    onClick={[Function]}
                    stretch={true}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      mode="default"
                      onClick={[Function]}
                      stretch={true}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c2 MuiButton-disableElevation"
                        disabled={false}
                        mode="default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={true}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          No, cancel
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy primary button 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  margin: 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary="Yes, confirm"
  textSecondary=""
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          disabled={false}
          isLoading={false}
          isLonely={true}
          onClick={[Function]}
          stretch={true}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "margin:",
                    [Function],
                    ";flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            isLonely={true}
            onClick={[Function]}
            stretch={true}
          >
            <Button
              className="c1"
              disabled={false}
              isLoading={false}
              isLonely={true}
              mode="primary"
              onClick={[Function]}
              stretch={true}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={false}
                isLonely={true}
                mode="primary"
                onClick={[Function]}
                stretch={true}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  isLonely={true}
                  mode="primary"
                  onClick={[Function]}
                  stretch={true}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    isLonely={true}
                    mode="primary"
                    onClick={[Function]}
                    stretch={true}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      isLonely={true}
                      mode="primary"
                      onClick={[Function]}
                      stretch={true}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                        disabled={false}
                        isLonely={true}
                        mode="primary"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={true}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Yes, confirm
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy secondary button 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c1 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary=""
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <ModalFooter__SecondaryButton
          disabled={false}
          isLoading={false}
          onClick={[Function]}
          stretch={true}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "flex:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
            stretch={true}
          >
            <Button
              className="c1"
              disabled={false}
              isLoading={false}
              mode="default"
              onClick={[Function]}
              stretch={true}
            >
              <WithStyles(ForwardRef(Button))
                className="c1"
                color="default"
                disableElevation={true}
                disabled={false}
                mode="default"
                onClick={[Function]}
                stretch={true}
                variant="contained"
              >
                <ForwardRef(Button)
                  className="c1"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="default"
                  disableElevation={true}
                  disabled={false}
                  mode="default"
                  onClick={[Function]}
                  stretch={true}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    mode="default"
                    onClick={[Function]}
                    stretch={true}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      mode="default"
                      onClick={[Function]}
                      stretch={true}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained c1 MuiButton-disableElevation"
                        disabled={false}
                        mode="default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        stretch={true}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          No, cancel
                        </span>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </Button>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;
