// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModalFooter snapshots should match snapshot with custom footer 1`] = `
<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  withFooter={
    <div>
      <span>
        footer
      </span>
      <button
        type="button"
      >
        button 1
      </button>
      <button
        type="button"
      >
        button 2
      </button>
    </div>
  }
/>
`;

exports[`ModalFooter snapshots should match snapshot with primary and secondary buttons 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={false}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          color="primary"
          disabled={false}
          isLoading={false}
          onClick={[Function]}
        >
          <StyledComponent
            color="primary"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "hJdMGi",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              color="primary"
              disabled={false}
              isLoading={false}
              onClick={[Function]}
            >
              <Button
                className=""
                color="primary"
                disabled={false}
                forwardRef={null}
                isLoading={false}
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-containedPrimary-13 "
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-containedPrimary-13 "
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Yes, confirm
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          id="secondary"
          isLoading={false}
          name="secondary"
          onClick={[Function]}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "gEFSSj",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="secondary"
            isLoading={false}
            name="secondary"
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              disabled={false}
              id="secondary"
              isLoading={false}
              name="secondary"
              onClick={[Function]}
            >
              <Button
                className=""
                disabled={false}
                forwardRef={null}
                id="secondary"
                isLoading={false}
                name="secondary"
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className=""
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  id="secondary"
                  name="secondary"
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className=""
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    id="secondary"
                    name="secondary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="secondary"
                      name="secondary"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="secondary"
                        name="secondary"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained "
                          disabled={false}
                          id="secondary"
                          name="secondary"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            No, cancel
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button disabled 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

<ModalFooter
  isDisabledPrimary={true}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={false}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          color="primary"
          disabled={true}
          isLoading={false}
          onClick={[Function]}
        >
          <StyledComponent
            color="primary"
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "hJdMGi",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              color="primary"
              disabled={true}
              isLoading={false}
              onClick={[Function]}
            >
              <Button
                className=""
                color="primary"
                disabled={true}
                forwardRef={null}
                isLoading={false}
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-containedPrimary-13 "
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={true}
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-containedPrimary-13 "
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={true}
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 Mui-disabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 Mui-disabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 Mui-disabled Mui-disabled"
                          disabled={true}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Yes, confirm
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          id="secondary"
          isLoading={false}
          name="secondary"
          onClick={[Function]}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "gEFSSj",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="secondary"
            isLoading={false}
            name="secondary"
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              disabled={false}
              id="secondary"
              isLoading={false}
              name="secondary"
              onClick={[Function]}
            >
              <Button
                className=""
                disabled={false}
                forwardRef={null}
                id="secondary"
                isLoading={false}
                name="secondary"
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className=""
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  id="secondary"
                  name="secondary"
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className=""
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    id="secondary"
                    name="secondary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="secondary"
                      name="secondary"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="secondary"
                        name="secondary"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained "
                          disabled={false}
                          id="secondary"
                          name="secondary"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            No, cancel
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button only 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary=""
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={false}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          color="primary"
          disabled={false}
          isLoading={false}
          onClick={[Function]}
        >
          <StyledComponent
            color="primary"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "hJdMGi",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              color="primary"
              disabled={false}
              isLoading={false}
              onClick={[Function]}
            >
              <Button
                className=""
                color="primary"
                disabled={false}
                forwardRef={null}
                isLoading={false}
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-containedPrimary-13 "
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-containedPrimary-13 "
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Yes, confirm
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with primary button pending 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

.c1 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={true}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={false}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          color="primary"
          disabled={true}
          isLoading={true}
          onClick={[Function]}
        >
          <StyledComponent
            color="primary"
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "hJdMGi",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={true}
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              color="primary"
              disabled={true}
              isLoading={true}
              onClick={[Function]}
            >
              <Button
                className=""
                color="primary"
                disabled={true}
                forwardRef={null}
                isLoading={true}
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-containedPrimary-13 "
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={true}
                  onClick={[Function]}
                  startIcon={
                    <Spinner
                      bottomColor="#c3c3c8"
                      centered={true}
                      size="1x"
                      topColor="#56565a"
                    />
                  }
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-containedPrimary-13 "
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={true}
                    onClick={[Function]}
                    startIcon={
                      <Spinner
                        bottomColor="#c3c3c8"
                        centered={true}
                        size="1x"
                        topColor="#56565a"
                      />
                    }
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 Mui-disabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 Mui-disabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 Mui-disabled Mui-disabled"
                          disabled={true}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <span
                              className="MuiButton-startIcon MuiButton-iconSizeMedium"
                            >
                              <Spinner
                                bottomColor="#c3c3c8"
                                centered={true}
                                size="1x"
                                topColor="#56565a"
                              >
                                <Rotate
                                  centered={true}
                                  className="fa-layers fa-fw fa-1x"
                                >
                                  <StyledComponent
                                    centered={true}
                                    className="fa-layers fa-fw fa-1x"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "Rotate-sc-1o7nhkd-0",
                                          "isStatic": false,
                                          "lastClassName": "c1",
                                          "rules": Array [
                                            "animation:fa-spin ",
                                            [Function],
                                            " infinite linear;align-self:",
                                            [Function],
                                            ";",
                                          ],
                                        },
                                        "displayName": "Rotate",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "Rotate-sc-1o7nhkd-0",
                                        "target": "span",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <span
                                      className="c1 fa-layers fa-fw fa-1x"
                                    >
                                      <FontAwesomeIcon
                                        border={false}
                                        className=""
                                        color="#c3c3c8"
                                        fixedWidth={false}
                                        flip={null}
                                        icon={
                                          Object {
                                            "icon": Array [
                                              512,
                                              512,
                                              Array [],
                                              "f111",
                                              "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z",
                                            ],
                                            "iconName": "circle",
                                            "prefix": "fal",
                                          }
                                        }
                                        id="spinner-circle"
                                        inverse={false}
                                        listItem={false}
                                        mask={null}
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        size={null}
                                        spin={false}
                                        swapOpacity={false}
                                        symbol={false}
                                        title=""
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-circle fa-w-16 "
                                          color="#c3c3c8"
                                          data-icon="circle"
                                          data-prefix="fal"
                                          focusable="false"
                                          id="spinner-circle"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 512 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                      <FontAwesomeIcon
                                        border={false}
                                        className=""
                                        color="#56565a"
                                        fixedWidth={false}
                                        flip={null}
                                        icon={
                                          Object {
                                            "icon": Array [
                                              512,
                                              512,
                                              Array [],
                                              "f3f4",
                                              "M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z",
                                            ],
                                            "iconName": "spinner-third",
                                            "prefix": "fal",
                                          }
                                        }
                                        id="spinner-third"
                                        inverse={false}
                                        listItem={false}
                                        mask={null}
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        size={null}
                                        spin={false}
                                        swapOpacity={false}
                                        symbol={false}
                                        title=""
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-spinner-third fa-w-16 "
                                          color="#56565a"
                                          data-icon="spinner-third"
                                          data-prefix="fal"
                                          focusable="false"
                                          id="spinner-third"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 512 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                    </span>
                                  </StyledComponent>
                                </Rotate>
                              </Spinner>
                            </span>
                            Yes, confirm
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          id="secondary"
          isLoading={false}
          name="secondary"
          onClick={[Function]}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "gEFSSj",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="secondary"
            isLoading={false}
            name="secondary"
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              disabled={false}
              id="secondary"
              isLoading={false}
              name="secondary"
              onClick={[Function]}
            >
              <Button
                className=""
                disabled={false}
                forwardRef={null}
                id="secondary"
                isLoading={false}
                name="secondary"
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className=""
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  id="secondary"
                  name="secondary"
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className=""
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    id="secondary"
                    name="secondary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="secondary"
                      name="secondary"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="secondary"
                        name="secondary"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained "
                          disabled={false}
                          id="secondary"
                          name="secondary"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            No, cancel
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button disabled 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={true}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={false}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          color="primary"
          disabled={false}
          isLoading={false}
          onClick={[Function]}
        >
          <StyledComponent
            color="primary"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "hJdMGi",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              color="primary"
              disabled={false}
              isLoading={false}
              onClick={[Function]}
            >
              <Button
                className=""
                color="primary"
                disabled={false}
                forwardRef={null}
                isLoading={false}
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-containedPrimary-13 "
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-containedPrimary-13 "
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Yes, confirm
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={true}
          id="secondary"
          isLoading={false}
          name="secondary"
          onClick={[Function]}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "gEFSSj",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="secondary"
            isLoading={false}
            name="secondary"
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              disabled={true}
              id="secondary"
              isLoading={false}
              name="secondary"
              onClick={[Function]}
            >
              <Button
                className=""
                disabled={true}
                forwardRef={null}
                id="secondary"
                isLoading={false}
                name="secondary"
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className=""
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={true}
                  id="secondary"
                  name="secondary"
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className=""
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={true}
                    id="secondary"
                    name="secondary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained Mui-disabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="secondary"
                      name="secondary"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained Mui-disabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="secondary"
                        name="secondary"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained Mui-disabled Mui-disabled"
                          disabled={true}
                          id="secondary"
                          name="secondary"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            No, cancel
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button only 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary=""
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={false}
    >
      <div
        className="c0"
      >
        <ModalFooter__SecondaryButton
          disabled={false}
          id="secondary"
          isLoading={false}
          name="secondary"
          onClick={[Function]}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "gEFSSj",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="secondary"
            isLoading={false}
            name="secondary"
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              disabled={false}
              id="secondary"
              isLoading={false}
              name="secondary"
              onClick={[Function]}
            >
              <Button
                className=""
                disabled={false}
                forwardRef={null}
                id="secondary"
                isLoading={false}
                name="secondary"
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className=""
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  id="secondary"
                  name="secondary"
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className=""
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    id="secondary"
                    name="secondary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="secondary"
                      name="secondary"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="secondary"
                        name="secondary"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained "
                          disabled={false}
                          id="secondary"
                          name="secondary"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            No, cancel
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with secondary button pending 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

.c1 {
  -webkit-animation: fa-spin 0.75s infinite linear;
  animation: fa-spin 0.75s infinite linear;
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={false}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={false}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          color="primary"
          disabled={false}
          isLoading={false}
          onClick={[Function]}
        >
          <StyledComponent
            color="primary"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "hJdMGi",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              color="primary"
              disabled={false}
              isLoading={false}
              onClick={[Function]}
            >
              <Button
                className=""
                color="primary"
                disabled={false}
                forwardRef={null}
                isLoading={false}
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-containedPrimary-13 "
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-containedPrimary-13 "
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Yes, confirm
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={true}
          id="secondary"
          isLoading={true}
          name="secondary"
          onClick={[Function]}
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "gEFSSj",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="secondary"
            isLoading={true}
            name="secondary"
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              disabled={true}
              id="secondary"
              isLoading={true}
              name="secondary"
              onClick={[Function]}
            >
              <Button
                className=""
                disabled={true}
                forwardRef={null}
                id="secondary"
                isLoading={true}
                name="secondary"
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className=""
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={true}
                  id="secondary"
                  name="secondary"
                  onClick={[Function]}
                  startIcon={
                    <Spinner
                      bottomColor="#c3c3c8"
                      centered={true}
                      size="1x"
                      topColor="#56565a"
                    />
                  }
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className=""
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={true}
                    id="secondary"
                    name="secondary"
                    onClick={[Function]}
                    startIcon={
                      <Spinner
                        bottomColor="#c3c3c8"
                        centered={true}
                        size="1x"
                        topColor="#56565a"
                      />
                    }
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained Mui-disabled"
                      component="button"
                      disableRipple={true}
                      disabled={true}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="secondary"
                      name="secondary"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained Mui-disabled"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="secondary"
                        name="secondary"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained Mui-disabled Mui-disabled"
                          disabled={true}
                          id="secondary"
                          name="secondary"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={-1}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <span
                              className="MuiButton-startIcon MuiButton-iconSizeMedium"
                            >
                              <Spinner
                                bottomColor="#c3c3c8"
                                centered={true}
                                size="1x"
                                topColor="#56565a"
                              >
                                <Rotate
                                  centered={true}
                                  className="fa-layers fa-fw fa-1x"
                                >
                                  <StyledComponent
                                    centered={true}
                                    className="fa-layers fa-fw fa-1x"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "Rotate-sc-1o7nhkd-0",
                                          "isStatic": false,
                                          "lastClassName": "c1",
                                          "rules": Array [
                                            "animation:fa-spin ",
                                            [Function],
                                            " infinite linear;align-self:",
                                            [Function],
                                            ";",
                                          ],
                                        },
                                        "displayName": "Rotate",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "Rotate-sc-1o7nhkd-0",
                                        "target": "span",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <span
                                      className="c1 fa-layers fa-fw fa-1x"
                                    >
                                      <FontAwesomeIcon
                                        border={false}
                                        className=""
                                        color="#c3c3c8"
                                        fixedWidth={false}
                                        flip={null}
                                        icon={
                                          Object {
                                            "icon": Array [
                                              512,
                                              512,
                                              Array [],
                                              "f111",
                                              "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z",
                                            ],
                                            "iconName": "circle",
                                            "prefix": "fal",
                                          }
                                        }
                                        id="spinner-circle"
                                        inverse={false}
                                        listItem={false}
                                        mask={null}
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        size={null}
                                        spin={false}
                                        swapOpacity={false}
                                        symbol={false}
                                        title=""
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-circle fa-w-16 "
                                          color="#c3c3c8"
                                          data-icon="circle"
                                          data-prefix="fal"
                                          focusable="false"
                                          id="spinner-circle"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 512 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm216 248c0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                      <FontAwesomeIcon
                                        border={false}
                                        className=""
                                        color="#56565a"
                                        fixedWidth={false}
                                        flip={null}
                                        icon={
                                          Object {
                                            "icon": Array [
                                              512,
                                              512,
                                              Array [],
                                              "f3f4",
                                              "M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z",
                                            ],
                                            "iconName": "spinner-third",
                                            "prefix": "fal",
                                          }
                                        }
                                        id="spinner-third"
                                        inverse={false}
                                        listItem={false}
                                        mask={null}
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        size={null}
                                        spin={false}
                                        swapOpacity={false}
                                        symbol={false}
                                        title=""
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-spinner-third fa-w-16 "
                                          color="#56565a"
                                          data-icon="spinner-third"
                                          data-prefix="fal"
                                          focusable="false"
                                          id="spinner-third"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 512 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M460.115 373.846l-6.941-4.008c-5.546-3.202-7.564-10.177-4.661-15.886 32.971-64.838 31.167-142.731-5.415-205.954-36.504-63.356-103.118-103.876-175.8-107.701C260.952 39.963 256 34.676 256 28.321v-8.012c0-6.904 5.808-12.337 12.703-11.982 83.552 4.306 160.157 50.861 202.106 123.67 42.069 72.703 44.083 162.322 6.034 236.838-3.14 6.149-10.75 8.462-16.728 5.011z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                    </span>
                                  </StyledComponent>
                                </Rotate>
                              </Spinner>
                            </span>
                            No, cancel
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy primary and secondary buttons 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary="Yes, confirm"
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={true}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          color="primary"
          disabled={false}
          isLoading={false}
          onClick={[Function]}
        >
          <StyledComponent
            color="primary"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "hJdMGi",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              color="primary"
              disabled={false}
              isLoading={false}
              onClick={[Function]}
            >
              <Button
                className=""
                color="primary"
                disabled={false}
                forwardRef={null}
                isLoading={false}
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-containedPrimary-13 "
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-containedPrimary-13 "
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Yes, confirm
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
        <ModalFooter__SecondaryButton
          disabled={false}
          id="secondary"
          isLoading={false}
          name="secondary"
          onClick={[Function]}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "gEFSSj",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="secondary"
            isLoading={false}
            name="secondary"
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              disabled={false}
              id="secondary"
              isLoading={false}
              name="secondary"
              onClick={[Function]}
            >
              <Button
                className=""
                disabled={false}
                forwardRef={null}
                id="secondary"
                isLoading={false}
                name="secondary"
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className=""
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  id="secondary"
                  name="secondary"
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className=""
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    id="secondary"
                    name="secondary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="secondary"
                      name="secondary"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="secondary"
                        name="secondary"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained "
                          disabled={false}
                          id="secondary"
                          name="secondary"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            No, cancel
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy primary button 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary="Yes, confirm"
  textSecondary=""
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={true}
    >
      <div
        className="c0"
      >
        <ModalFooter__PrimaryButton
          color="primary"
          disabled={false}
          isLoading={false}
          onClick={[Function]}
        >
          <StyledComponent
            color="primary"
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                  "isStatic": false,
                  "lastClassName": "hJdMGi",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__PrimaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            isLoading={false}
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              color="primary"
              disabled={false}
              isLoading={false}
              onClick={[Function]}
            >
              <Button
                className=""
                color="primary"
                disabled={false}
                forwardRef={null}
                isLoading={false}
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-containedPrimary-13 "
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-containedPrimary-13 "
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Yes, confirm
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__PrimaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;

exports[`ModalFooter snapshots should match snapshot with stretchy secondary button 1`] = `
.c0 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c0 > button {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c0 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

<ModalFooter
  isDisabledPrimary={false}
  isDisabledSecondary={false}
  isPendingPrimary={false}
  isPendingSecondary={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  shouldStretchButtons={true}
  textPrimary=""
  textSecondary="No, cancel"
  withFooter={true}
>
  <StyledModalComponents__FooterSection
    stretch={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "color:",
              "#56565a",
              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
              "30px",
              ";position:relative;",
              "align-items:center;flex-direction:row-reverse;> button{flex:",
              [Function],
              ";}> button:nth-of-type(2){margin:0 20px 0 0px;}",
            ],
          },
          "displayName": "StyledModalComponents__FooterSection",
          "foldedComponentIds": Array [
            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
          ],
          "render": [Function],
          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      stretch={true}
    >
      <div
        className="c0"
      >
        <ModalFooter__SecondaryButton
          disabled={false}
          id="secondary"
          isLoading={false}
          name="secondary"
          onClick={[Function]}
        >
          <StyledComponent
            disabled={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                  "isStatic": false,
                  "lastClassName": "gEFSSj",
                  "rules": Array [],
                },
                "displayName": "ModalFooter__SecondaryButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="secondary"
            isLoading={false}
            name="secondary"
            onClick={[Function]}
          >
            <ForwardRef
              className=""
              disabled={false}
              id="secondary"
              isLoading={false}
              name="secondary"
              onClick={[Function]}
            >
              <Button
                className=""
                disabled={false}
                forwardRef={null}
                id="secondary"
                isLoading={false}
                name="secondary"
                onClick={[Function]}
              >
                <WithStyles(ForwardRef(Button))
                  className=""
                  color="default"
                  disableElevation={false}
                  disableRipple={true}
                  disabled={false}
                  id="secondary"
                  name="secondary"
                  onClick={[Function]}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className=""
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableRipple={true}
                    disabled={false}
                    id="secondary"
                    name="secondary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained "
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="secondary"
                      name="secondary"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained "
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={true}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="secondary"
                        name="secondary"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained "
                          disabled={false}
                          id="secondary"
                          name="secondary"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            No, cancel
                          </span>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </Button>
            </ForwardRef>
          </StyledComponent>
        </ModalFooter__SecondaryButton>
      </div>
    </StyledComponent>
  </StyledModalComponents__FooterSection>
</ModalFooter>
`;
