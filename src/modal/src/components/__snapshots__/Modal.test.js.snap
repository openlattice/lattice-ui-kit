// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`modal snapshots should match snapshot when isVisible="false" 1`] = `
<Modal
  isVisible={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  shouldBeCentered={true}
  shouldCloseOnEscape={true}
  shouldCloseOnOutsideClick={true}
  shouldStretchButtons={false}
  textPrimary="Confirm"
  textSecondary="Cancel"
  textTitle="Title"
  viewportScrolling={false}
  withFooter={true}
  withHeader={true}
>
  <Overlay
    isScrollable={false}
    isVisible={false}
    onClose={[Function]}
    shouldCloseOnClick={true}
    transparent={false}
  >
    <CSSTransition
      classNames="luk-fade"
      in={false}
      mountOnEnter={true}
      timeout={200}
      unmountOnExit={true}
    >
      <Transition
        appear={false}
        enter={true}
        exit={true}
        in={false}
        mountOnEnter={true}
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        timeout={200}
        unmountOnExit={true}
      />
    </CSSTransition>
  </Overlay>
</Modal>
`;

exports[`modal snapshots should match snapshot when isVisible="true" 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: #ffffff;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c11 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c12 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c10 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #8045ff;
  border-color: #8045ff;
  color: #ffffff;
}

.c10:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #6124e2;
  border-color: #6124e2;
}

.c10:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #410ab5;
  border-color: #410ab5;
}

.c10:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c10:focus-visible {
  box-shadow: #410ab5 0 0 0 2px;
}

.c14 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #8e929b;
}

.c14:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dcdce7;
  border-color: #dcdce7;
}

.c14:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #b6bbc7;
  border-color: #b6bbc7;
  color: #ffffff;
}

.c14:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c14:focus-visible {
  box-shadow: #b6bbc7 0 0 0 2px;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #555e6f;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<Modal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  shouldBeCentered={true}
  shouldCloseOnEscape={true}
  shouldCloseOnOutsideClick={true}
  shouldStretchButtons={false}
  textPrimary="Confirm"
  textSecondary="Cancel"
  textTitle="Title"
  viewportScrolling={false}
  withFooter={true}
  withHeader={true}
>
  <Overlay
    isScrollable={false}
    isVisible={true}
    onClose={[Function]}
    shouldCloseOnClick={true}
    transparent={false}
  >
    <CSSTransition
      classNames="luk-fade"
      in={true}
      mountOnEnter={true}
      timeout={200}
      unmountOnExit={true}
    >
      <Transition
        appear={false}
        enter={true}
        exit={true}
        in={true}
        mountOnEnter={true}
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        timeout={200}
        unmountOnExit={true}
      >
        <Portal>
          <Portal
            containerInfo={
              .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: #ffffff;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c7 {
  color: #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c8 {
  color: #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  color: #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c11 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c12 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c9 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #8045ff;
  border-color: #8045ff;
  color: #ffffff;
}

.c9:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #6124e2;
  border-color: #6124e2;
}

.c9:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #410ab5;
  border-color: #410ab5;
}

.c9:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c9:focus-visible {
  box-shadow: #410ab5 0 0 0 2px;
}

.c13 {
  border-radius: 3px;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  transition: background-color 100ms ease-out,border-color 100ms ease-out,box-shadow 100ms ease-out;
  white-space: nowrap;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #8e929b;
}

.c13:hover {
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #dcdce7;
  border-color: #dcdce7;
}

.c13:active {
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #b6bbc7;
  border-color: #b6bbc7;
  color: #ffffff;
}

.c13:disabled {
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
}

.c13:focus-visible {
  box-shadow: #b6bbc7 0 0 0 2px;
}

.c10 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c14 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #555e6f;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                lattice-portal-inner-container=""
              >
                <div
                  class="c0"
                >
                  <div
                    class="c1"
                  >
                    <div
                      class="c2"
                    >
                      <div
                        class="c3"
                      >
                        <div
                          class="c4"
                        >
                          <h1
                            class="c5"
                          >
                            Title
                          </h1>
                          <button
                            class="c6"
                          >
                            <svg
                              aria-hidden="true"
                              class="svg-inline--fa fa-times fa-w-10 fa-lg "
                              data-icon="times"
                              data-prefix="fal"
                              focusable="false"
                              role="img"
                              viewBox="0 0 320 512"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                fill="currentColor"
                              />
                            </svg>
                          </button>
                        </div>
                        <div
                          class="c7"
                        >
                          <span>
                            hello
                          </span>
                        </div>
                        <div
                          class="c8"
                        >
                          <button
                            class="c9 c10"
                            mode="primary"
                            type="button"
                          >
                            <span
                              class="c11"
                            >
                              <span
                                class="c12"
                              >
                                Confirm
                              </span>
                            </span>
                          </button>
                          <button
                            class="c13 c14"
                            mode="default"
                            type="button"
                          >
                            <span
                              class="c11"
                            >
                              <span
                                class="c12"
                              >
                                Cancel
                              </span>
                            </span>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          >
            <LockToggle
              accountForScrollbars={true}
              isActive={true}
            >
              <SheetProvider
                accountForScrollbars={true}
                isActive={true}
              >
                <TouchProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <ScrollLock
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <TouchScrollable>
                      <NodeResolver
                        innerRef={[Function]}
                      >
                        <OverlayOuterContainer
                          transparent={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    "background-color:",
                                    [Function],
                                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                                    "&.luk-fade-appear{opacity:0;};&.luk-fade-appear-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-enter{opacity:0;};&.luk-fade-enter-active{opacity:1;transition:opacity ",
                                    "200ms",
                                    " ease-out;};&.luk-fade-exit{opacity:1;};&.luk-fade-exit-active{opacity:0;transition:opacity ",
                                    "200ms",
                                    " ease-out;};",
                                    ";",
                                  ],
                                },
                                "displayName": "OverlayOuterContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "StyledOverlayComponents__OverlayOuterContainer-ol4tzw-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            transparent={false}
                          >
                            <div
                              className="c0"
                            >
                              <OverlayInnerContainer
                                isScrollable={false}
                                onClick={[Function]}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          "display:block;height:100%;position:absolute;overflow-y:",
                                          [Function],
                                          ";width:100%;",
                                        ],
                                      },
                                      "displayName": "OverlayInnerContainer",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "StyledOverlayComponents__OverlayInnerContainer-ol4tzw-1",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  isScrollable={false}
                                  onClick={[Function]}
                                >
                                  <div
                                    className="c1"
                                    onClick={[Function]}
                                  >
                                    <StyledModalComponents__ModalOuterContainer
                                      onClick={[Function]}
                                      viewportScrolling={false}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                              "isStatic": false,
                                              "lastClassName": "c2",
                                              "rules": Array [
                                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;padding:",
                                                "60px",
                                                ";",
                                                "@media (max-width:",
                                                "36",
                                                "em){",
                                                "
    padding: ",
                                                "30px",
                                                ";
  ",
                                                "}",
                                                " ",
                                                [Function],
                                              ],
                                            },
                                            "displayName": "StyledModalComponents__ModalOuterContainer",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "StyledModalComponents__ModalOuterContainer-sc-1r1r1yf-0",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        viewportScrolling={false}
                                      >
                                        <div
                                          className="c2"
                                          onClick={[Function]}
                                        >
                                          <StyledModalComponents__ModalInnerContainer
                                            center={true}
                                            viewportScrolling={false}
                                          >
                                            <StyledComponent
                                              center={true}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "align-self:",
                                                      [Function],
                                                      ";background-color:",
                                                      "#ffffff",
                                                      ";border-radius:3px;box-shadow:0 2px 8px -2px ",
                                                      "#555e6f",
                                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:100%;min-height:200px;min-width:300px;position:relative;",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "StyledModalComponents__ModalInnerContainer",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "StyledModalComponents__ModalInnerContainer-sc-1r1r1yf-1",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              viewportScrolling={false}
                                            >
                                              <div
                                                className="c3"
                                              >
                                                <ModalHeader
                                                  onClickClose={[Function]}
                                                  textTitle="Title"
                                                  withHeader={true}
                                                >
                                                  <StyledModalComponents__HeaderSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c4",
                                                            "rules": Array [
                                                              "color:",
                                                              "#555e6f",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__HeaderSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__HeaderSection-sc-1r1r1yf-5",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c4"
                                                      >
                                                        <ModalHeader__ModalTitle>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c5",
                                                                  "rules": Array [
                                                                    "color:",
                                                                    "#555e6f",
                                                                    ";font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__ModalTitle",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__ModalTitle-sc-1rdyrep-0",
                                                                "target": "h1",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <h1
                                                              className="c5"
                                                            >
                                                              Title
                                                            </h1>
                                                          </StyledComponent>
                                                        </ModalHeader__ModalTitle>
                                                        <ModalHeader__CloseButton
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c6",
                                                                  "rules": Array [
                                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                                  ],
                                                                },
                                                                "displayName": "ModalHeader__CloseButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalHeader__CloseButton-sc-1rdyrep-1",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="c6"
                                                              onClick={[Function]}
                                                            >
                                                              <FontAwesomeIcon
                                                                border={false}
                                                                className=""
                                                                fixedWidth={false}
                                                                flip={null}
                                                                icon={
                                                                  Object {
                                                                    "icon": Array [
                                                                      320,
                                                                      512,
                                                                      Array [],
                                                                      "f00d",
                                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                                    ],
                                                                    "iconName": "times",
                                                                    "prefix": "fal",
                                                                  }
                                                                }
                                                                inverse={false}
                                                                listItem={false}
                                                                mask={null}
                                                                pull={null}
                                                                pulse={false}
                                                                rotation={null}
                                                                size="lg"
                                                                spin={false}
                                                                swapOpacity={false}
                                                                symbol={false}
                                                                title=""
                                                                transform={null}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                                  data-icon="times"
                                                                  data-prefix="fal"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={Object {}}
                                                                  viewBox="0 0 320 512"
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                                    fill="currentColor"
                                                                    style={Object {}}
                                                                  />
                                                                </svg>
                                                              </FontAwesomeIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </ModalHeader__CloseButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__HeaderSection>
                                                </ModalHeader>
                                                <ModalBody
                                                  viewportScrolling={false}
                                                >
                                                  <StyledModalComponents__BodySection
                                                    viewportScrolling={false}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              "color:",
                                                              "#555e6f",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "flex:1 1 auto;padding:0 ",
                                                              "30px",
                                                              ";",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__BodySection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__BodySection-sc-1r1r1yf-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      viewportScrolling={false}
                                                    >
                                                      <div
                                                        className="c7"
                                                      >
                                                        <span>
                                                          hello
                                                        </span>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__BodySection>
                                                </ModalBody>
                                                <ModalFooter
                                                  isDisabledPrimary={false}
                                                  isDisabledSecondary={false}
                                                  isPendingPrimary={false}
                                                  isPendingSecondary={false}
                                                  onClickPrimary={[Function]}
                                                  onClickSecondary={[Function]}
                                                  shouldStretchButtons={false}
                                                  textPrimary="Confirm"
                                                  textSecondary="Cancel"
                                                  withFooter={true}
                                                >
                                                  <StyledModalComponents__FooterSection>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                            "isStatic": false,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "color:",
                                                              "#555e6f",
                                                              ";display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                                              "30px",
                                                              ";position:relative;",
                                                              "align-items:center;flex-direction:row-reverse;",
                                                            ],
                                                          },
                                                          "displayName": "StyledModalComponents__FooterSection",
                                                          "foldedComponentIds": Array [
                                                            "StyledModalComponents__ModalSection-sc-1r1r1yf-2",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "StyledModalComponents__FooterSection-sc-1r1r1yf-4",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ModalFooter__PrimaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          isLonely={false}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c9",
                                                                  "rules": Array [
                                                                    "margin:",
                                                                    [Function],
                                                                    ";flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__PrimaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__PrimaryButton-sc-1a1to5t-0",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            isLonely={false}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c9"
                                                              disabled={false}
                                                              fontColor=""
                                                              isLoading={false}
                                                              isLonely={false}
                                                              mode="primary"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                              type="button"
                                                            >
                                                              <StyledButton
                                                                className="c9"
                                                                disabled={false}
                                                                fontColor=""
                                                                isLonely={false}
                                                                mode="primary"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                type="button"
                                                              >
                                                                <StyledComponent
                                                                  className="c9"
                                                                  disabled={false}
                                                                  fontColor=""
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
                                                                        "componentId": "StyledButton-sc-1etazn9-0",
                                                                        "isStatic": false,
                                                                        "lastClassName": "c14",
                                                                        "rules": Array [
                                                                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                                                                          "100ms",
                                                                          " ease-out,border-color ",
                                                                          "100ms",
                                                                          " ease-out,box-shadow ",
                                                                          "100ms",
                                                                          " ease-out;width:",
                                                                          [Function],
                                                                          ";white-space:nowrap;",
                                                                          [Function],
                                                                          ";:hover{cursor:pointer;text-decoration:none;",
                                                                          [Function],
                                                                          "};:active{text-decoration:none;",
                                                                          [Function],
                                                                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                                                                          [Function],
                                                                          "};:focus-visible{",
                                                                          [Function],
                                                                          "}",
                                                                        ],
                                                                      },
                                                                      "displayName": "StyledButton",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
                                                                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                                                                      "target": "button",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                  isLonely={false}
                                                                  mode="primary"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  type="button"
                                                                >
                                                                  <button
                                                                    className="c10 c9"
                                                                    disabled={false}
                                                                    mode="primary"
                                                                    onClick={[Function]}
                                                                    type="button"
                                                                  >
                                                                    <ContentWrapper>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "ContentWrapper-sc-36hfub-0",
                                                                              "isStatic": false,
                                                                              "lastClassName": "c11",
                                                                              "rules": Array [
                                                                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                                                              ],
                                                                            },
                                                                            "displayName": "ContentWrapper",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                                                                            "target": "span",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <span
                                                                          className="c11"
                                                                        >
                                                                          <Content
                                                                            isLoading={false}
                                                                          >
                                                                            <StyledComponent
                                                                              forwardedComponent={
                                                                                Object {
                                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                                  "attrs": Array [],
                                                                                  "componentStyle": ComponentStyle {
                                                                                    "componentId": "Content-sc-18psqsj-0",
                                                                                    "isStatic": false,
                                                                                    "lastClassName": "c12",
                                                                                    "rules": Array [
                                                                                      "flex:1 1 auto;opacity:",
                                                                                      [Function],
                                                                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                                    ],
                                                                                  },
                                                                                  "displayName": "Content",
                                                                                  "foldedComponentIds": Array [],
                                                                                  "render": [Function],
                                                                                  "styledComponentId": "Content-sc-18psqsj-0",
                                                                                  "target": "span",
                                                                                  "toString": [Function],
                                                                                  "warnTooManyClasses": [Function],
                                                                                  "withComponent": [Function],
                                                                                }
                                                                              }
                                                                              forwardedRef={null}
                                                                              isLoading={false}
                                                                            >
                                                                              <span
                                                                                className="c12"
                                                                              >
                                                                                Confirm
                                                                              </span>
                                                                            </StyledComponent>
                                                                          </Content>
                                                                        </span>
                                                                      </StyledComponent>
                                                                    </ContentWrapper>
                                                                  </button>
                                                                </StyledComponent>
                                                              </StyledButton>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__PrimaryButton>
                                                        <ModalFooter__SecondaryButton
                                                          disabled={false}
                                                          isLoading={false}
                                                          onClick={[Function]}
                                                          stretch={false}
                                                        >
                                                          <StyledComponent
                                                            disabled={false}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [
                                                                  [Function],
                                                                ],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c13",
                                                                  "rules": Array [
                                                                    "flex:",
                                                                    [Function],
                                                                    ";",
                                                                  ],
                                                                },
                                                                "displayName": "ModalFooter__SecondaryButton",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "ModalFooter__SecondaryButton-sc-1a1to5t-1",
                                                                "target": [Function],
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            isLoading={false}
                                                            onClick={[Function]}
                                                            stretch={false}
                                                          >
                                                            <Button
                                                              className="c13"
                                                              disabled={false}
                                                              fontColor=""
                                                              isLoading={false}
                                                              mode="default"
                                                              onClick={[Function]}
                                                              stretch={false}
                                                              type="button"
                                                            >
                                                              <StyledButton
                                                                className="c13"
                                                                disabled={false}
                                                                fontColor=""
                                                                mode="default"
                                                                onClick={[Function]}
                                                                stretch={false}
                                                                type="button"
                                                              >
                                                                <StyledComponent
                                                                  className="c13"
                                                                  disabled={false}
                                                                  fontColor=""
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
                                                                        "componentId": "StyledButton-sc-1etazn9-0",
                                                                        "isStatic": false,
                                                                        "lastClassName": "c14",
                                                                        "rules": Array [
                                                                          "border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;transition:background-color ",
                                                                          "100ms",
                                                                          " ease-out,border-color ",
                                                                          "100ms",
                                                                          " ease-out,box-shadow ",
                                                                          "100ms",
                                                                          " ease-out;width:",
                                                                          [Function],
                                                                          ";white-space:nowrap;",
                                                                          [Function],
                                                                          ";:hover{cursor:pointer;text-decoration:none;",
                                                                          [Function],
                                                                          "};:active{text-decoration:none;",
                                                                          [Function],
                                                                          "};:disabled{cursor:not-allowed;text-decoration:none;",
                                                                          [Function],
                                                                          "};:focus-visible{",
                                                                          [Function],
                                                                          "}",
                                                                        ],
                                                                      },
                                                                      "displayName": "StyledButton",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
                                                                      "styledComponentId": "StyledButton-sc-1etazn9-0",
                                                                      "target": "button",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                  mode="default"
                                                                  onClick={[Function]}
                                                                  stretch={false}
                                                                  type="button"
                                                                >
                                                                  <button
                                                                    className="c14 c13"
                                                                    disabled={false}
                                                                    mode="default"
                                                                    onClick={[Function]}
                                                                    type="button"
                                                                  >
                                                                    <ContentWrapper>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "ContentWrapper-sc-36hfub-0",
                                                                              "isStatic": false,
                                                                              "lastClassName": "c11",
                                                                              "rules": Array [
                                                                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                                                              ],
                                                                            },
                                                                            "displayName": "ContentWrapper",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                                                                            "target": "span",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <span
                                                                          className="c11"
                                                                        >
                                                                          <Content
                                                                            isLoading={false}
                                                                          >
                                                                            <StyledComponent
                                                                              forwardedComponent={
                                                                                Object {
                                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                                  "attrs": Array [],
                                                                                  "componentStyle": ComponentStyle {
                                                                                    "componentId": "Content-sc-18psqsj-0",
                                                                                    "isStatic": false,
                                                                                    "lastClassName": "c12",
                                                                                    "rules": Array [
                                                                                      "flex:1 1 auto;opacity:",
                                                                                      [Function],
                                                                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                                    ],
                                                                                  },
                                                                                  "displayName": "Content",
                                                                                  "foldedComponentIds": Array [],
                                                                                  "render": [Function],
                                                                                  "styledComponentId": "Content-sc-18psqsj-0",
                                                                                  "target": "span",
                                                                                  "toString": [Function],
                                                                                  "warnTooManyClasses": [Function],
                                                                                  "withComponent": [Function],
                                                                                }
                                                                              }
                                                                              forwardedRef={null}
                                                                              isLoading={false}
                                                                            >
                                                                              <span
                                                                                className="c12"
                                                                              >
                                                                                Cancel
                                                                              </span>
                                                                            </StyledComponent>
                                                                          </Content>
                                                                        </span>
                                                                      </StyledComponent>
                                                                    </ContentWrapper>
                                                                  </button>
                                                                </StyledComponent>
                                                              </StyledButton>
                                                            </Button>
                                                          </StyledComponent>
                                                        </ModalFooter__SecondaryButton>
                                                      </div>
                                                    </StyledComponent>
                                                  </StyledModalComponents__FooterSection>
                                                </ModalFooter>
                                              </div>
                                            </StyledComponent>
                                          </StyledModalComponents__ModalInnerContainer>
                                        </div>
                                      </StyledComponent>
                                    </StyledModalComponents__ModalOuterContainer>
                                  </div>
                                </StyledComponent>
                              </OverlayInnerContainer>
                            </div>
                          </StyledComponent>
                        </OverlayOuterContainer>
                      </NodeResolver>
                    </TouchScrollable>
                  </ScrollLock>
                </TouchProvider>
              </SheetProvider>
            </LockToggle>
          </Portal>
        </Portal>
      </Transition>
    </CSSTransition>
  </Overlay>
</Modal>
`;
