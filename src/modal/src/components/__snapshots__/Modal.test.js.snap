// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`modal snapshots should match snapshot when isVisible="false" 1`] = `
<Modal
  isVisible={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  shouldBeCentered={true}
  shouldCloseOnEscape={true}
  shouldCloseOnOutsideClick={true}
  shouldStretchButtons={false}
  textPrimary="Confirm"
  textSecondary="Cancel"
  textTitle="Title"
  viewportScrolling={false}
  withFooter={true}
  withHeader={true}
/>
`;

exports[`modal snapshots should match snapshot when isVisible="true" 1`] = `
.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: #ffffff;
  border-radius: 4px;
  box-shadow: 0 2px 8px -2px #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: calc(100vw - 240px);
  min-height: 200px;
  min-width: 300px;
  position: relative;
  margin: 0;
  max-height: calc(100vh - 240px);
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-x: hidden;
  overflow-y: auto;
  padding: 0 30px;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c11 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c12 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c14 {
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  color: #8e929b;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
}

.c14:hover {
  background-color: #dcdce7;
  border-color: #dcdce7;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c14:active {
  background-color: #b6bbc7;
  border-color: #b6bbc7;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c14:disabled {
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c10 {
  background-color: #8045ff;
  border-color: #8045ff;
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  color: #ffffff;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
}

.c10:hover {
  background-color: #6124e2;
  border-color: #6124e2;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c10:active {
  background-color: #361876;
  border-color: #361876;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c10:disabled {
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #555e6f;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

<Modal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  shouldBeCentered={true}
  shouldCloseOnEscape={true}
  shouldCloseOnOutsideClick={true}
  shouldStretchButtons={false}
  textPrimary="Confirm"
  textSecondary="Cancel"
  textTitle="Title"
  viewportScrolling={false}
  withFooter={true}
  withHeader={true}
>
  <Overlay
    isScrollable={false}
    isVisible={true}
    onClose={[Function]}
    shouldCloseOnClick={true}
  >
    <Portal>
      <Portal
        containerInfo={
          .c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: #ffffff;
  border-radius: 4px;
  box-shadow: 0 2px 8px -2px #555e6f;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: calc(100vw - 240px);
  min-height: 200px;
  min-width: 300px;
  position: relative;
  margin: 0;
  max-height: calc(100vh - 240px);
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-x: hidden;
  overflow-y: auto;
  padding: 0 30px;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c11 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;
  overflow: hidden;
  min-width: 14px;
}

.c12 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  opacity: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c14 {
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  color: #8e929b;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
}

.c14:hover {
  background-color: #dcdce7;
  border-color: #dcdce7;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c14:active {
  background-color: #b6bbc7;
  border-color: #b6bbc7;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c14:disabled {
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c10 {
  background-color: #8045ff;
  border-color: #8045ff;
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  color: #ffffff;
  cursor: pointer;
  font-size: 14px;
  line-height: 18px;
  outline: none;
  padding: 10px 20px;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  white-space: nowrap;
}

.c10:hover {
  background-color: #6124e2;
  border-color: #6124e2;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c10:active {
  background-color: #361876;
  border-color: #361876;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c10:disabled {
  background-color: #f0f0f7;
  border-color: #f0f0f7;
  color: #b6bbc7;
  cursor: not-allowed;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c9 {
  margin: 0 0 0 20px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c5 {
  color: #555e6f;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c6 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

<div
            lattice-portal-inner-container=""
          >
            <div
              class="c0"
            >
              <div
                class="c1"
              >
                <div
                  class="c2"
                >
                  <div
                    class="c3"
                  >
                    <div
                      class="c4"
                    >
                      <h1
                        class="c5"
                      >
                        Title
                      </h1>
                      <button
                        class="c6"
                      >
                        <svg
                          aria-hidden="true"
                          class="svg-inline--fa fa-times fa-w-10 fa-lg "
                          data-icon="times"
                          data-prefix="fal"
                          focusable="false"
                          role="img"
                          viewBox="0 0 320 512"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                    <div
                      class="c7"
                    >
                      <span>
                        hello
                      </span>
                    </div>
                    <div
                      class="c8"
                    >
                      <button
                        class="c9 c10"
                        type="button"
                      >
                        <span
                          class="c11"
                        >
                          <span
                            class="c12"
                          >
                            Confirm
                          </span>
                        </span>
                      </button>
                      <button
                        class="c13 c14"
                        type="button"
                      >
                        <span
                          class="c11"
                        >
                          <span
                            class="c12"
                          >
                            Cancel
                          </span>
                        </span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        }
      >
        <OverlayOuterContainer>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "OverlayOuterContainer-ol4tzw-0",
                  "isStatic": true,
                  "lastClassName": "c0",
                  "rules": Array [
                    "background-color:",
                    "rgba(8,0,25,0.3)",
                    ";bottom:0;display:block;left:0;position:fixed;right:0;top:0;z-index:1000;",
                  ],
                },
                "displayName": "OverlayOuterContainer",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "OverlayOuterContainer-ol4tzw-0",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c0"
            >
              <OverlayInnerContainer
                isScrollable={false}
                onClick={[Function]}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "OverlayInnerContainer-ol4tzw-1",
                        "isStatic": false,
                        "lastClassName": "c1",
                        "rules": Array [
                          "display:block;height:100%;position:absolute;overflow-y:",
                          [Function],
                          ";width:100%;",
                        ],
                      },
                      "displayName": "OverlayInnerContainer",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "OverlayInnerContainer-ol4tzw-1",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isScrollable={false}
                  onClick={[Function]}
                >
                  <div
                    className="c1"
                    onClick={[Function]}
                  >
                    <ModalOuterContainer
                      onClick={[Function]}
                      viewportScrolling={false}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ModalOuterContainer-sc-1r1r1yf-0",
                              "isStatic": false,
                              "lastClassName": "c2",
                              "rules": Array [
                                "align-items:center;display:flex;flex:0 0 auto;flex-direction:row;justify-content:center;width:100%;",
                                [Function],
                              ],
                            },
                            "displayName": "ModalOuterContainer",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ModalOuterContainer-sc-1r1r1yf-0",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                        viewportScrolling={false}
                      >
                        <div
                          className="c2"
                          onClick={[Function]}
                        >
                          <ModalInnerContainer
                            center={true}
                            viewportScrolling={false}
                          >
                            <StyledComponent
                              center={true}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ModalInnerContainer-sc-1r1r1yf-1",
                                    "isStatic": false,
                                    "lastClassName": "c3",
                                    "rules": Array [
                                      "align-self:",
                                      [Function],
                                      ";background-color:",
                                      "#ffffff",
                                      ";border-radius:4px;box-shadow:0 2px 8px -2px ",
                                      "#555e6f",
                                      ";display:flex;flex:0 0 auto;flex-direction:column;max-width:calc(100vw - ",
                                      "240",
                                      "px);min-height:200px;min-width:300px;position:relative;",
                                      [Function],
                                      " ",
                                      [Function],
                                    ],
                                  },
                                  "displayName": "ModalInnerContainer",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ModalInnerContainer-sc-1r1r1yf-1",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              viewportScrolling={false}
                            >
                              <div
                                className="c3"
                              >
                                <ModalHeader
                                  onClickClose={[Function]}
                                  textTitle="Title"
                                  withHeader={true}
                                >
                                  <HeaderSection>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "HeaderSection-sc-1r1r1yf-5",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                              "30",
                                              "px;position:relative;",
                                              "align-items:center;flex-direction:row;justify-content:space-between;",
                                            ],
                                          },
                                          "displayName": "HeaderSection",
                                          "foldedComponentIds": Array [
                                            "ModalSection-sc-1r1r1yf-2",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "HeaderSection-sc-1r1r1yf-5",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="c4"
                                      >
                                        <ModalTitle>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "ModalTitle-sc-1rdyrep-0",
                                                  "isStatic": true,
                                                  "lastClassName": "c5",
                                                  "rules": Array [
                                                    "color:#555e6f;font-size:18px;font-weight:normal;margin:0 30px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                  ],
                                                },
                                                "displayName": "ModalTitle",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "ModalTitle-sc-1rdyrep-0",
                                                "target": "h1",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <h1
                                              className="c5"
                                            >
                                              Title
                                            </h1>
                                          </StyledComponent>
                                        </ModalTitle>
                                        <CloseButtonWrapper
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "CloseButtonWrapper-sc-1rdyrep-1",
                                                  "isStatic": true,
                                                  "lastClassName": "c6",
                                                  "rules": Array [
                                                    "background:none;border:none;cursor:pointer;font-size:12px;height:32px;margin:0 0 0 auto;padding:0;text-align:center;width:32px;",
                                                  ],
                                                },
                                                "displayName": "CloseButtonWrapper",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "CloseButtonWrapper-sc-1rdyrep-1",
                                                "target": "button",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <button
                                              className="c6"
                                              onClick={[Function]}
                                            >
                                              <FontAwesomeIcon
                                                border={false}
                                                className=""
                                                fixedWidth={false}
                                                flip={null}
                                                icon={
                                                  Object {
                                                    "icon": Array [
                                                      320,
                                                      512,
                                                      Array [],
                                                      "f00d",
                                                      "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                    ],
                                                    "iconName": "times",
                                                    "prefix": "fal",
                                                  }
                                                }
                                                inverse={false}
                                                listItem={false}
                                                mask={null}
                                                pull={null}
                                                pulse={false}
                                                rotation={null}
                                                size="lg"
                                                spin={false}
                                                symbol={false}
                                                title=""
                                                transform={null}
                                              >
                                                <svg
                                                  aria-hidden="true"
                                                  className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                  data-icon="times"
                                                  data-prefix="fal"
                                                  focusable="false"
                                                  role="img"
                                                  style={Object {}}
                                                  viewBox="0 0 320 512"
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                    fill="currentColor"
                                                    style={Object {}}
                                                  />
                                                </svg>
                                              </FontAwesomeIcon>
                                            </button>
                                          </StyledComponent>
                                        </CloseButtonWrapper>
                                      </div>
                                    </StyledComponent>
                                  </HeaderSection>
                                </ModalHeader>
                                <ModalBody>
                                  <BodySection>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "BodySection-sc-1r1r1yf-3",
                                            "isStatic": true,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                              "30",
                                              "px;position:relative;",
                                              "flex:1 1 auto;overflow-x:hidden;overflow-y:auto;padding:0 ",
                                              "30",
                                              "px;",
                                            ],
                                          },
                                          "displayName": "BodySection",
                                          "foldedComponentIds": Array [
                                            "ModalSection-sc-1r1r1yf-2",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "BodySection-sc-1r1r1yf-3",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="c7"
                                      >
                                        <span>
                                          hello
                                        </span>
                                      </div>
                                    </StyledComponent>
                                  </BodySection>
                                </ModalBody>
                                <ModalFooter
                                  onClickPrimary={[Function]}
                                  onClickSecondary={[Function]}
                                  shouldStretchButtons={false}
                                  textPrimary="Confirm"
                                  textSecondary="Cancel"
                                  withFooter={true}
                                >
                                  <FooterSection>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FooterSection-sc-1r1r1yf-4",
                                            "isStatic": true,
                                            "lastClassName": "c8",
                                            "rules": Array [
                                              "display:flex;flex:0 0 auto;flex-direction:column;min-height:40px;padding:",
                                              "30",
                                              "px;position:relative;",
                                              "align-items:center;flex-direction:row-reverse;",
                                            ],
                                          },
                                          "displayName": "FooterSection",
                                          "foldedComponentIds": Array [
                                            "ModalSection-sc-1r1r1yf-2",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "FooterSection-sc-1r1r1yf-4",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="c8"
                                      >
                                        <PrimaryButton
                                          isLonely={false}
                                          onClick={[Function]}
                                          stretch={false}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [
                                                  Object {
                                                    "mode": "primary",
                                                  },
                                                ],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "PrimaryButton-sc-1a1to5t-0",
                                                  "isStatic": false,
                                                  "lastClassName": "c9",
                                                  "rules": Array [
                                                    "margin:",
                                                    [Function],
                                                    ";flex:",
                                                    [Function],
                                                    ";",
                                                  ],
                                                },
                                                "displayName": "PrimaryButton",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "PrimaryButton-sc-1a1to5t-0",
                                                "target": [Function],
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            isLonely={false}
                                            onClick={[Function]}
                                            stretch={false}
                                          >
                                            <Button
                                              className="c9"
                                              disabled={false}
                                              isLoading={false}
                                              isLonely={false}
                                              mode="primary"
                                              onClick={[Function]}
                                              stretch={false}
                                              type="button"
                                            >
                                              <PrimaryButton
                                                className="c9"
                                                disabled={false}
                                                isLonely={false}
                                                onClick={[Function]}
                                                stretch={false}
                                                type="button"
                                              >
                                                <StyledComponent
                                                  className="c9"
                                                  disabled={false}
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "PrimaryButton-sc-1t8zuv9-0",
                                                        "isStatic": true,
                                                        "lastClassName": "c10",
                                                        "rules": Array [
                                                          "background-color:",
                                                          "#8045ff",
                                                          ";border-color:",
                                                          "#8045ff",
                                                          ";border-radius:4px;border-style:solid;border-width:1px;color:",
                                                          "#ffffff",
                                                          ";cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;white-space:nowrap;",
                                                          " ",
                                                          "&:hover{background-color:",
                                                          "#6124e2",
                                                          ";border-color:",
                                                          "#6124e2",
                                                          ";cursor:pointer;text-decoration:none;}",
                                                          " ",
                                                          "&:active{background-color:",
                                                          "#361876",
                                                          ";border-color:",
                                                          "#361876",
                                                          ";text-decoration:none;}",
                                                          " ",
                                                          "&:disabled{background-color:",
                                                          "#f0f0f7",
                                                          ";border-color:",
                                                          "#f0f0f7",
                                                          ";color:",
                                                          "#b6bbc7",
                                                          ";cursor:not-allowed;text-decoration:none;}",
                                                        ],
                                                      },
                                                      "displayName": "PrimaryButton",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "PrimaryButton-sc-1t8zuv9-0",
                                                      "target": "button",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  isLonely={false}
                                                  onClick={[Function]}
                                                  stretch={false}
                                                  type="button"
                                                >
                                                  <button
                                                    className="c9 c10"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                    type="button"
                                                  >
                                                    <ContentWrapper>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "ContentWrapper-sc-36hfub-0",
                                                              "isStatic": true,
                                                              "lastClassName": "c11",
                                                              "rules": Array [
                                                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                                              ],
                                                            },
                                                            "displayName": "ContentWrapper",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                                                            "target": "span",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <span
                                                          className="c11"
                                                        >
                                                          <Content
                                                            isLoading={false}
                                                          >
                                                            <StyledComponent
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "Content-sc-18psqsj-0",
                                                                    "isStatic": false,
                                                                    "lastClassName": "c12",
                                                                    "rules": Array [
                                                                      "flex:1 1 auto;opacity:",
                                                                      [Function],
                                                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                    ],
                                                                  },
                                                                  "displayName": "Content",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "Content-sc-18psqsj-0",
                                                                  "target": "span",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                              isLoading={false}
                                                            >
                                                              <span
                                                                className="c12"
                                                              >
                                                                Confirm
                                                              </span>
                                                            </StyledComponent>
                                                          </Content>
                                                        </span>
                                                      </StyledComponent>
                                                    </ContentWrapper>
                                                  </button>
                                                </StyledComponent>
                                              </PrimaryButton>
                                            </Button>
                                          </StyledComponent>
                                        </PrimaryButton>
                                        <SecondaryButton
                                          onClick={[Function]}
                                          stretch={false}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [
                                                  Object {
                                                    "mode": "default",
                                                  },
                                                ],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "SecondaryButton-sc-1a1to5t-1",
                                                  "isStatic": false,
                                                  "lastClassName": "c13",
                                                  "rules": Array [
                                                    "flex:",
                                                    [Function],
                                                    ";",
                                                  ],
                                                },
                                                "displayName": "SecondaryButton",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "SecondaryButton-sc-1a1to5t-1",
                                                "target": [Function],
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                            stretch={false}
                                          >
                                            <Button
                                              className="c13"
                                              disabled={false}
                                              isLoading={false}
                                              mode="default"
                                              onClick={[Function]}
                                              stretch={false}
                                              type="button"
                                            >
                                              <DefaultButton
                                                className="c13"
                                                disabled={false}
                                                onClick={[Function]}
                                                stretch={false}
                                                type="button"
                                              >
                                                <StyledComponent
                                                  className="c13"
                                                  disabled={false}
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "DefaultButton-sc-2dhy0g-0",
                                                        "isStatic": true,
                                                        "lastClassName": "c14",
                                                        "rules": Array [
                                                          "background-color:",
                                                          "#f0f0f7",
                                                          ";border-color:",
                                                          "#f0f0f7",
                                                          ";border-radius:4px;border-style:solid;border-width:1px;color:",
                                                          "#8e929b",
                                                          ";cursor:pointer;font-size:14px;line-height:18px;outline:none;padding:10px 20px;text-align:center;text-decoration:none;white-space:nowrap;",
                                                          " ",
                                                          "&:hover{background-color:",
                                                          "#dcdce7",
                                                          ";border-color:",
                                                          "#dcdce7",
                                                          ";cursor:pointer;text-decoration:none;}",
                                                          " ",
                                                          "&:active{background-color:",
                                                          "#b6bbc7",
                                                          ";border-color:",
                                                          "#b6bbc7",
                                                          ";color:",
                                                          "#ffffff",
                                                          ";text-decoration:none;}",
                                                          " ",
                                                          "&:disabled{background-color:",
                                                          "#f0f0f7",
                                                          ";border-color:",
                                                          "#f0f0f7",
                                                          ";color:",
                                                          "#b6bbc7",
                                                          ";cursor:not-allowed;text-decoration:none;}",
                                                        ],
                                                      },
                                                      "displayName": "DefaultButton",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "DefaultButton-sc-2dhy0g-0",
                                                      "target": "button",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  onClick={[Function]}
                                                  stretch={false}
                                                  type="button"
                                                >
                                                  <button
                                                    className="c13 c14"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                    type="button"
                                                  >
                                                    <ContentWrapper>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "ContentWrapper-sc-36hfub-0",
                                                              "isStatic": true,
                                                              "lastClassName": "c11",
                                                              "rules": Array [
                                                                "align-self:center;display:inline-flex;flex-wrap:nowrap;max-width:100%;position:relative;overflow:hidden;min-width:14px;",
                                                              ],
                                                            },
                                                            "displayName": "ContentWrapper",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "ContentWrapper-sc-36hfub-0",
                                                            "target": "span",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <span
                                                          className="c11"
                                                        >
                                                          <Content
                                                            isLoading={false}
                                                          >
                                                            <StyledComponent
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "Content-sc-18psqsj-0",
                                                                    "isStatic": false,
                                                                    "lastClassName": "c12",
                                                                    "rules": Array [
                                                                      "flex:1 1 auto;opacity:",
                                                                      [Function],
                                                                      ";overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
                                                                    ],
                                                                  },
                                                                  "displayName": "Content",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "Content-sc-18psqsj-0",
                                                                  "target": "span",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                              isLoading={false}
                                                            >
                                                              <span
                                                                className="c12"
                                                              >
                                                                Cancel
                                                              </span>
                                                            </StyledComponent>
                                                          </Content>
                                                        </span>
                                                      </StyledComponent>
                                                    </ContentWrapper>
                                                  </button>
                                                </StyledComponent>
                                              </DefaultButton>
                                            </Button>
                                          </StyledComponent>
                                        </SecondaryButton>
                                      </div>
                                    </StyledComponent>
                                  </FooterSection>
                                </ModalFooter>
                              </div>
                            </StyledComponent>
                          </ModalInnerContainer>
                        </div>
                      </StyledComponent>
                    </ModalOuterContainer>
                  </div>
                </StyledComponent>
              </OverlayInnerContainer>
            </div>
          </StyledComponent>
        </OverlayOuterContainer>
        <LockToggle
          accountForScrollbars={true}
          isActive={true}
        >
          <SheetProvider
            accountForScrollbars={true}
            isActive={true}
          >
            <TouchProvider
              accountForScrollbars={true}
              isActive={true}
            >
              <ScrollLock
                accountForScrollbars={true}
                isActive={true}
              />
            </TouchProvider>
          </SheetProvider>
        </LockToggle>
      </Portal>
    </Portal>
  </Overlay>
</Modal>
`;
