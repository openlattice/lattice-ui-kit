// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`modal snapshots should match snapshot when isVisible="false" 1`] = `
<Modal
  isVisible={false}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  shouldBeCentered={true}
  shouldCloseOnEscape={true}
  shouldCloseOnOutsideClick={true}
  shouldStretchButtons={false}
  textPrimary="Confirm"
  textSecondary="Cancel"
  textTitle="Title"
  viewportScrolling={false}
  withFooter={true}
  withHeader={true}
>
  <Overlay
    isScrollable={false}
    isVisible={false}
    onClose={[Function]}
    shouldCloseOnClick={true}
    transparent={false}
  >
    <CSSTransition
      classNames="luk-fade"
      in={false}
      mountOnEnter={true}
      timeout={200}
      unmountOnExit={true}
    >
      <Transition
        appear={false}
        enter={true}
        exit={true}
        in={false}
        mountOnEnter={true}
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        timeout={200}
        unmountOnExit={true}
      />
    </CSSTransition>
  </Overlay>
</Modal>
`;

exports[`modal snapshots should match snapshot when isVisible="true" 1`] = `
.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
}

.c8 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c9 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c9 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c9 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

.c5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c6 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c7 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<Modal
  isVisible={true}
  onClickPrimary={[Function]}
  onClickSecondary={[Function]}
  onClose={[Function]}
  shouldBeCentered={true}
  shouldCloseOnEscape={true}
  shouldCloseOnOutsideClick={true}
  shouldStretchButtons={false}
  textPrimary="Confirm"
  textSecondary="Cancel"
  textTitle="Title"
  viewportScrolling={false}
  withFooter={true}
  withHeader={true}
>
  <Overlay
    isScrollable={false}
    isVisible={true}
    onClose={[Function]}
    shouldCloseOnClick={true}
    transparent={false}
  >
    <CSSTransition
      classNames="luk-fade"
      in={true}
      mountOnEnter={true}
      timeout={200}
      unmountOnExit={true}
    >
      <Transition
        appear={false}
        enter={true}
        exit={true}
        in={true}
        mountOnEnter={true}
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        timeout={200}
        unmountOnExit={true}
      >
        <Portal>
          <Portal
            containerInfo={
              .c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 100%;
  padding: 60px;
  height: 100%;
  min-height: 100%;
}

.c3 {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  background-color: white;
  border-radius: 3px;
  box-shadow: 0 2px 8px -2px #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  max-width: 100%;
  min-height: 200px;
  min-width: 300px;
  position: relative;
  max-height: 100%;
}

.c4 {
  color: #56565a;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 40px;
  padding: 30px;
  position: relative;
}

.c8 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 0 30px;
  overflow-x: hidden;
  overflow-y: auto;
}

.c9 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

.c9 > button {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c9 > button:nth-of-type(2) {
  margin: 0 20px 0 0px;
}

.c5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c6 {
  color: #56565a;
  font-size: 18px;
  font-weight: normal;
  margin: 0 30px 0 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.c7 {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 12px;
  height: 32px;
  margin: 0 0 0 auto;
  padding: 0;
  text-align: center;
  width: 32px;
}

.c0 {
  background-color: rgba(8,0,25,0.3);
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 1000;
}

.c0.luk-fade-appear {
  opacity: 0;
}

.c0.luk-fade-appear-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-enter {
  opacity: 0;
}

.c0.luk-fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c0.luk-fade-exit {
  opacity: 1;
}

.c0.luk-fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
}

.c1 {
  display: block;
  height: 100%;
  position: absolute;
  overflow-y: visible;
  width: 100%;
}

@media (max-width:36em) {
  .c2 {
    padding: 30px;
  }
}

<div
                lattice-portal-inner-container=""
              >
                <div
                  class="c0"
                >
                  <div
                    class="c1"
                  >
                    <div
                      class="c2"
                    >
                      <div
                        class="c3"
                      >
                        <div
                          class="c4 c5"
                        >
                          <h1
                            class="c6"
                          >
                            Title
                          </h1>
                          <button
                            class="c7"
                          >
                            <svg
                              aria-hidden="true"
                              class="svg-inline--fa fa-times fa-w-10 fa-lg "
                              data-icon="times"
                              data-prefix="fal"
                              focusable="false"
                              role="img"
                              viewBox="0 0 320 512"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                fill="currentColor"
                              />
                            </svg>
                          </button>
                        </div>
                        <div
                          class="c4 c8"
                        >
                          <span>
                            hello
                          </span>
                        </div>
                        <div
                          class="c4 c9"
                        >
                          <button
                            class="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiButton-label"
                            >
                              Confirm
                            </span>
                          </button>
                          <button
                            class="MuiButtonBase-root MuiButton-root MuiButton-contained "
                            id="secondary"
                            name="secondary"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiButton-label"
                            >
                              Cancel
                            </span>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          >
            <LockToggle
              accountForScrollbars={true}
              isActive={true}
            >
              <SheetProvider
                accountForScrollbars={true}
                isActive={true}
              >
                <TouchProvider
                  accountForScrollbars={true}
                  isActive={true}
                >
                  <ScrollLock
                    accountForScrollbars={true}
                    isActive={true}
                  >
                    <TouchScrollable>
                      <OverlayOuterContainer
                        transparent={false}
                      >
                        <div
                          className="c0"
                        >
                          <OverlayInnerContainer
                            isScrollable={false}
                            onClick={[Function]}
                          >
                            <div
                              className="c1"
                              onClick={[Function]}
                            >
                              <styled.div
                                onClick={[Function]}
                                viewportScrolling={false}
                              >
                                <div
                                  className="c2"
                                  onClick={[Function]}
                                >
                                  <styled.div
                                    center={true}
                                    viewportScrolling={false}
                                  >
                                    <div
                                      className="c3"
                                    >
                                      <ModalHeader
                                        onClickClose={[Function]}
                                        textTitle="Title"
                                        withHeader={true}
                                      >
                                        <Styled(styled.div)>
                                          <div
                                            className="c4 c5"
                                          >
                                            <styled.h1>
                                              <h1
                                                className="c6"
                                              >
                                                Title
                                              </h1>
                                            </styled.h1>
                                            <styled.button
                                              onClick={[Function]}
                                            >
                                              <button
                                                className="c7"
                                                onClick={[Function]}
                                              >
                                                <FontAwesomeIcon
                                                  border={false}
                                                  className=""
                                                  fixedWidth={false}
                                                  flip={null}
                                                  icon={
                                                    Object {
                                                      "icon": Array [
                                                        320,
                                                        512,
                                                        Array [],
                                                        "f00d",
                                                        "M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z",
                                                      ],
                                                      "iconName": "times",
                                                      "prefix": "fal",
                                                    }
                                                  }
                                                  inverse={false}
                                                  listItem={false}
                                                  mask={null}
                                                  pull={null}
                                                  pulse={false}
                                                  rotation={null}
                                                  size="lg"
                                                  spin={false}
                                                  swapOpacity={false}
                                                  symbol={false}
                                                  title=""
                                                  transform={null}
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="svg-inline--fa fa-times fa-w-10 fa-lg "
                                                    data-icon="times"
                                                    data-prefix="fal"
                                                    focusable="false"
                                                    role="img"
                                                    style={Object {}}
                                                    viewBox="0 0 320 512"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                      fill="currentColor"
                                                      style={Object {}}
                                                    />
                                                  </svg>
                                                </FontAwesomeIcon>
                                              </button>
                                            </styled.button>
                                          </div>
                                        </Styled(styled.div)>
                                      </ModalHeader>
                                      <ModalBody
                                        viewportScrolling={false}
                                      >
                                        <Styled(styled.div)
                                          viewportScrolling={false}
                                        >
                                          <div
                                            className="c4 c8"
                                          >
                                            <span>
                                              hello
                                            </span>
                                          </div>
                                        </Styled(styled.div)>
                                      </ModalBody>
                                      <ModalFooter
                                        isDisabledPrimary={false}
                                        isDisabledSecondary={false}
                                        isPendingPrimary={false}
                                        isPendingSecondary={false}
                                        onClickPrimary={[Function]}
                                        onClickSecondary={[Function]}
                                        shouldStretchButtons={false}
                                        textPrimary="Confirm"
                                        textSecondary="Cancel"
                                        withFooter={true}
                                      >
                                        <Styled(styled.div)
                                          stretch={false}
                                        >
                                          <div
                                            className="c4 c9"
                                          >
                                            <Styled(Component)
                                              color="primary"
                                              disabled={false}
                                              isLoading={false}
                                              onClick={[Function]}
                                            >
                                              <ForwardRef
                                                className=""
                                                color="primary"
                                                disabled={false}
                                                isLoading={false}
                                                onClick={[Function]}
                                              >
                                                <Button
                                                  className=""
                                                  color="primary"
                                                  disabled={false}
                                                  forwardRef={null}
                                                  isLoading={false}
                                                  onClick={[Function]}
                                                >
                                                  <WithStyles(ForwardRef(Button))
                                                    className="makeStyles-containedPrimary-13 "
                                                    color="default"
                                                    disableElevation={false}
                                                    disableRipple={true}
                                                    disabled={false}
                                                    onClick={[Function]}
                                                    variant="contained"
                                                  >
                                                    <ForwardRef(Button)
                                                      className="makeStyles-containedPrimary-13 "
                                                      classes={
                                                        Object {
                                                          "colorInherit": "MuiButton-colorInherit",
                                                          "contained": "MuiButton-contained",
                                                          "containedPrimary": "MuiButton-containedPrimary",
                                                          "containedSecondary": "MuiButton-containedSecondary",
                                                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                          "disableElevation": "MuiButton-disableElevation",
                                                          "disabled": "Mui-disabled",
                                                          "endIcon": "MuiButton-endIcon",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "fullWidth": "MuiButton-fullWidth",
                                                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                          "label": "MuiButton-label",
                                                          "outlined": "MuiButton-outlined",
                                                          "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                          "root": "MuiButton-root",
                                                          "sizeLarge": "MuiButton-sizeLarge",
                                                          "sizeSmall": "MuiButton-sizeSmall",
                                                          "startIcon": "MuiButton-startIcon",
                                                          "text": "MuiButton-text",
                                                          "textPrimary": "MuiButton-textPrimary",
                                                          "textSecondary": "MuiButton-textSecondary",
                                                          "textSizeLarge": "MuiButton-textSizeLarge",
                                                          "textSizeSmall": "MuiButton-textSizeSmall",
                                                        }
                                                      }
                                                      color="default"
                                                      disableElevation={false}
                                                      disableRipple={true}
                                                      disabled={false}
                                                      onClick={[Function]}
                                                      variant="contained"
                                                    >
                                                      <WithStyles(ForwardRef(ButtonBase))
                                                        className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                                                        component="button"
                                                        disableRipple={true}
                                                        disabled={false}
                                                        focusRipple={true}
                                                        focusVisibleClassName="Mui-focusVisible"
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        <ForwardRef(ButtonBase)
                                                          className="MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                                                          classes={
                                                            Object {
                                                              "disabled": "Mui-disabled",
                                                              "focusVisible": "Mui-focusVisible",
                                                              "root": "MuiButtonBase-root",
                                                            }
                                                          }
                                                          component="button"
                                                          disableRipple={true}
                                                          disabled={false}
                                                          focusRipple={true}
                                                          focusVisibleClassName="Mui-focusVisible"
                                                          onClick={[Function]}
                                                          type="button"
                                                        >
                                                          <button
                                                            className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-containedPrimary-13 "
                                                            disabled={false}
                                                            onBlur={[Function]}
                                                            onClick={[Function]}
                                                            onDragLeave={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            onKeyUp={[Function]}
                                                            onMouseDown={[Function]}
                                                            onMouseLeave={[Function]}
                                                            onMouseUp={[Function]}
                                                            onTouchEnd={[Function]}
                                                            onTouchMove={[Function]}
                                                            onTouchStart={[Function]}
                                                            tabIndex={0}
                                                            type="button"
                                                          >
                                                            <span
                                                              className="MuiButton-label"
                                                            >
                                                              Confirm
                                                            </span>
                                                          </button>
                                                        </ForwardRef(ButtonBase)>
                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                    </ForwardRef(Button)>
                                                  </WithStyles(ForwardRef(Button))>
                                                </Button>
                                              </ForwardRef>
                                            </Styled(Component)>
                                            <Styled(Component)
                                              disabled={false}
                                              id="secondary"
                                              isLoading={false}
                                              name="secondary"
                                              onClick={[Function]}
                                            >
                                              <ForwardRef
                                                className=""
                                                disabled={false}
                                                id="secondary"
                                                isLoading={false}
                                                name="secondary"
                                                onClick={[Function]}
                                              >
                                                <Button
                                                  className=""
                                                  disabled={false}
                                                  forwardRef={null}
                                                  id="secondary"
                                                  isLoading={false}
                                                  name="secondary"
                                                  onClick={[Function]}
                                                >
                                                  <WithStyles(ForwardRef(Button))
                                                    className=""
                                                    color="default"
                                                    disableElevation={false}
                                                    disableRipple={true}
                                                    disabled={false}
                                                    id="secondary"
                                                    name="secondary"
                                                    onClick={[Function]}
                                                    variant="contained"
                                                  >
                                                    <ForwardRef(Button)
                                                      className=""
                                                      classes={
                                                        Object {
                                                          "colorInherit": "MuiButton-colorInherit",
                                                          "contained": "MuiButton-contained",
                                                          "containedPrimary": "MuiButton-containedPrimary",
                                                          "containedSecondary": "MuiButton-containedSecondary",
                                                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                          "disableElevation": "MuiButton-disableElevation",
                                                          "disabled": "Mui-disabled",
                                                          "endIcon": "MuiButton-endIcon",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "fullWidth": "MuiButton-fullWidth",
                                                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                          "label": "MuiButton-label",
                                                          "outlined": "MuiButton-outlined",
                                                          "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                          "root": "MuiButton-root",
                                                          "sizeLarge": "MuiButton-sizeLarge",
                                                          "sizeSmall": "MuiButton-sizeSmall",
                                                          "startIcon": "MuiButton-startIcon",
                                                          "text": "MuiButton-text",
                                                          "textPrimary": "MuiButton-textPrimary",
                                                          "textSecondary": "MuiButton-textSecondary",
                                                          "textSizeLarge": "MuiButton-textSizeLarge",
                                                          "textSizeSmall": "MuiButton-textSizeSmall",
                                                        }
                                                      }
                                                      color="default"
                                                      disableElevation={false}
                                                      disableRipple={true}
                                                      disabled={false}
                                                      id="secondary"
                                                      name="secondary"
                                                      onClick={[Function]}
                                                      variant="contained"
                                                    >
                                                      <WithStyles(ForwardRef(ButtonBase))
                                                        className="MuiButton-root MuiButton-contained "
                                                        component="button"
                                                        disableRipple={true}
                                                        disabled={false}
                                                        focusRipple={true}
                                                        focusVisibleClassName="Mui-focusVisible"
                                                        id="secondary"
                                                        name="secondary"
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        <ForwardRef(ButtonBase)
                                                          className="MuiButton-root MuiButton-contained "
                                                          classes={
                                                            Object {
                                                              "disabled": "Mui-disabled",
                                                              "focusVisible": "Mui-focusVisible",
                                                              "root": "MuiButtonBase-root",
                                                            }
                                                          }
                                                          component="button"
                                                          disableRipple={true}
                                                          disabled={false}
                                                          focusRipple={true}
                                                          focusVisibleClassName="Mui-focusVisible"
                                                          id="secondary"
                                                          name="secondary"
                                                          onClick={[Function]}
                                                          type="button"
                                                        >
                                                          <button
                                                            className="MuiButtonBase-root MuiButton-root MuiButton-contained "
                                                            disabled={false}
                                                            id="secondary"
                                                            name="secondary"
                                                            onBlur={[Function]}
                                                            onClick={[Function]}
                                                            onDragLeave={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            onKeyUp={[Function]}
                                                            onMouseDown={[Function]}
                                                            onMouseLeave={[Function]}
                                                            onMouseUp={[Function]}
                                                            onTouchEnd={[Function]}
                                                            onTouchMove={[Function]}
                                                            onTouchStart={[Function]}
                                                            tabIndex={0}
                                                            type="button"
                                                          >
                                                            <span
                                                              className="MuiButton-label"
                                                            >
                                                              Cancel
                                                            </span>
                                                          </button>
                                                        </ForwardRef(ButtonBase)>
                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                    </ForwardRef(Button)>
                                                  </WithStyles(ForwardRef(Button))>
                                                </Button>
                                              </ForwardRef>
                                            </Styled(Component)>
                                          </div>
                                        </Styled(styled.div)>
                                      </ModalFooter>
                                    </div>
                                  </styled.div>
                                </div>
                              </styled.div>
                            </div>
                          </OverlayInnerContainer>
                        </div>
                      </OverlayOuterContainer>
                    </TouchScrollable>
                  </ScrollLock>
                </TouchProvider>
              </SheetProvider>
            </LockToggle>
          </Portal>
        </Portal>
      </Transition>
    </CSSTransition>
  </Overlay>
</Modal>
`;
